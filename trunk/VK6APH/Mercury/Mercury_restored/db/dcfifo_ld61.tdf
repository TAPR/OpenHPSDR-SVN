--dcfifo ADD_RAM_OUTPUT_REGISTER="OFF" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 CLOCKS_ARE_SYNCHRONIZED="FALSE" DEVICE_FAMILY="Cyclone" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=2048 LPM_SHOWAHEAD="OFF" LPM_WIDTH=8 LPM_WIDTHU=11 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" data q rdclk rdempty rdreq wrclk wrempty wrfull wrreq wrusedw ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 5.1 cbx_a_gray2bin 2005:04:27:12:26:10:SJ cbx_a_graycounter 2005:07:27:11:56:48:SJ cbx_altdpram 2004:12:01:07:29:56:SJ cbx_altsyncram 2005:10:21:05:19:54:SJ cbx_cycloneii 2005:08:30:10:31:44:SJ cbx_dcfifo 2005:09:18:04:58:04:SJ cbx_fifo_common 2005:07:22:05:40:24:SJ cbx_flex10ke 2002:10:19:11:54:38:SJ cbx_lpm_add_sub 2005:09:30:12:13:06:SJ cbx_lpm_compare 2005:07:12:04:41:28:SJ cbx_lpm_counter 2005:08:24:10:49:38:SJ cbx_lpm_decode 2005:04:28:09:28:48:SJ cbx_lpm_mux 2005:04:28:09:25:00:SJ cbx_mgl 2005:10:09:07:39:04:SJ cbx_scfifo 2005:09:07:08:25:24:SJ cbx_stratix 2005:10:07:15:53:08:SJ cbx_stratixii 2005:07:27:05:50:56:SJ cbx_util_mgl 2005:09:13:05:23:22:SJ  VERSION_END


--  Copyright (C) 1991-2005 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_fefifo_b0d (aclr, clock, rreq, usedw_in[10..0])
RETURNS ( empty, full);
FUNCTION a_fefifo_g0d (aclr, clock, usedw_in[10..0], wreq)
RETURNS ( empty, full);
FUNCTION a_gray2bin_36b (gray[10..0])
RETURNS ( bin[10..0]);
FUNCTION a_graycounter_726 (aclr, clock, cnt_en)
RETURNS ( q[10..0]);
FUNCTION dpram_ipm (data[7..0], inclock, outclock, outclocken, rdaddress[10..0], wraddress[10..0], wren)
RETURNS ( q[7..0]);
FUNCTION dffpipe_pe9 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION alt_synch_pipe_1e8 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION alt_synch_pipe_2e8 (clock, clrn, d[10..0])
RETURNS ( q[10..0]);
FUNCTION add_sub_pvb (dataa[10..0], datab[10..0])
RETURNS ( result[10..0]);
FUNCTION cntr_j08 (aclr, clock, cnt_en)
RETURNS ( q[10..0]);

--synthesis_resources = lut 165 M4K 4 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;{ -from ""write_delay_cycle"" -to ""dffpipe_rs_dgwp|dffpipe6|dffe7a"" }CUT=ON;{ -from ""rdptr_g|power_modified_counter_values"" -to ""dffpipe_ws_dgrp|dffpipe10|dffe11a"" }CUT=ON";

SUBDESIGN dcfifo_ld61
( 
	data[7..0]	:	input;
	q[7..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdfull	:	output;
	rdreq	:	input;
	rdusedw[10..0]	:	output;
	wrclk	:	input;
	wrempty	:	output;
	wrfull	:	output;
	wrreq	:	input;
	wrusedw[10..0]	:	output;
) 
VARIABLE 
	read_state : a_fefifo_b0d;
	write_state : a_fefifo_g0d;
	gray2bin_rs_nbwp : a_gray2bin_36b;
	gray2bin_ws_nbrp : a_gray2bin_36b;
	rdptr_g : a_graycounter_726;
	wrptr_g : a_graycounter_726;
	fiforam : dpram_ipm;
	write_delay_cycle[10..0] : dffe;
	dffpipe_rdbuw : dffpipe_pe9;
	dffpipe_rdusedw : dffpipe_pe9;
	dffpipe_rs_dbwp : dffpipe_pe9;
	dffpipe_rs_dgwp : alt_synch_pipe_1e8;
	dffpipe_wr_dbuw : dffpipe_pe9;
	dffpipe_wrusedw : dffpipe_pe9;
	dffpipe_ws_dgrp : alt_synch_pipe_2e8;
	dffpipe_ws_nbrp : dffpipe_pe9;
	lpm_add_sub_rd_udwn : add_sub_pvb;
	lpm_add_sub_wr_udwn : add_sub_pvb;
	rdptr_b : cntr_j08;
	wrptr_b : cntr_j08;
	aclr	: NODE;
	rd_dbuw[10..0]	: WIRE;
	rd_udwn[10..0]	: WIRE;
	rs_dbwp[10..0]	: WIRE;
	rs_dgwp[10..0]	: WIRE;
	rs_nbwp[10..0]	: WIRE;
	tmp_aclr	: WIRE;
	tmp_data[10..0]	: WIRE;
	valid_rreq	: WIRE;
	valid_wreq	: WIRE;
	wr_dbuw[10..0]	: WIRE;
	wr_udwn[10..0]	: WIRE;
	ws_dbrp[10..0]	: WIRE;
	ws_dgrp[10..0]	: WIRE;
	ws_nbrp[10..0]	: WIRE;

BEGIN 
	read_state.aclr = aclr;
	read_state.clock = rdclk;
	read_state.rreq = rdreq;
	read_state.usedw_in[] = rd_dbuw[];
	write_state.aclr = aclr;
	write_state.clock = wrclk;
	write_state.usedw_in[] = wr_dbuw[];
	write_state.wreq = wrreq;
	gray2bin_rs_nbwp.gray[] = rs_dgwp[];
	gray2bin_ws_nbrp.gray[] = ws_dgrp[];
	rdptr_g.aclr = aclr;
	rdptr_g.clock = rdclk;
	rdptr_g.cnt_en = valid_rreq;
	wrptr_g.aclr = aclr;
	wrptr_g.clock = wrclk;
	wrptr_g.cnt_en = valid_wreq;
	fiforam.data[] = data[];
	fiforam.inclock = wrclk;
	fiforam.outclock = rdclk;
	fiforam.outclocken = valid_rreq;
	fiforam.rdaddress[] = rdptr_g.q[];
	fiforam.wraddress[] = wrptr_g.q[];
	fiforam.wren = valid_wreq;
	write_delay_cycle[].CLK = wrclk;
	write_delay_cycle[].CLRN = (! aclr);
	write_delay_cycle[].D = wrptr_g.q[];
	dffpipe_rdbuw.clock = rdclk;
	dffpipe_rdbuw.clrn = tmp_aclr;
	dffpipe_rdbuw.d[] = rd_udwn[];
	dffpipe_rdusedw.clock = rdclk;
	dffpipe_rdusedw.clrn = tmp_aclr;
	dffpipe_rdusedw.d[] = rd_udwn[];
	dffpipe_rs_dbwp.clock = rdclk;
	dffpipe_rs_dbwp.clrn = tmp_aclr;
	dffpipe_rs_dbwp.d[] = rs_nbwp[];
	dffpipe_rs_dgwp.clock = rdclk;
	dffpipe_rs_dgwp.clrn = tmp_aclr;
	dffpipe_rs_dgwp.d[] = write_delay_cycle[].Q;
	dffpipe_wr_dbuw.clock = wrclk;
	dffpipe_wr_dbuw.clrn = tmp_aclr;
	dffpipe_wr_dbuw.d[] = wr_udwn[];
	dffpipe_wrusedw.clock = wrclk;
	dffpipe_wrusedw.clrn = tmp_aclr;
	dffpipe_wrusedw.d[] = wr_udwn[];
	dffpipe_ws_dgrp.clock = wrclk;
	dffpipe_ws_dgrp.clrn = tmp_aclr;
	dffpipe_ws_dgrp.d[] = tmp_data[];
	dffpipe_ws_nbrp.clock = wrclk;
	dffpipe_ws_nbrp.clrn = tmp_aclr;
	dffpipe_ws_nbrp.d[] = ws_nbrp[];
	lpm_add_sub_rd_udwn.dataa[] = rs_dbwp[];
	lpm_add_sub_rd_udwn.datab[] = rdptr_b.q[];
	lpm_add_sub_wr_udwn.dataa[] = wrptr_b.q[];
	lpm_add_sub_wr_udwn.datab[] = ws_dbrp[];
	rdptr_b.aclr = aclr;
	rdptr_b.clock = rdclk;
	rdptr_b.cnt_en = valid_rreq;
	wrptr_b.aclr = aclr;
	wrptr_b.clock = wrclk;
	wrptr_b.cnt_en = valid_wreq;
	aclr = GND;
	q[] = fiforam.q[];
	rd_dbuw[] = dffpipe_rdbuw.q[];
	rd_udwn[] = lpm_add_sub_rd_udwn.result[];
	rdempty = read_state.empty;
	rdfull = read_state.full;
	rdusedw[] = dffpipe_rdusedw.q[];
	rs_dbwp[] = dffpipe_rs_dbwp.q[];
	rs_dgwp[] = dffpipe_rs_dgwp.q[];
	rs_nbwp[] = gray2bin_rs_nbwp.bin[];
	tmp_aclr = (! aclr);
	tmp_data[] = rdptr_g.q[];
	valid_rreq = (rdreq & (! read_state.empty));
	valid_wreq = (wrreq & (! write_state.full));
	wr_dbuw[] = dffpipe_wr_dbuw.q[];
	wr_udwn[] = lpm_add_sub_wr_udwn.result[];
	wrempty = write_state.empty;
	wrfull = write_state.full;
	wrusedw[] = dffpipe_wrusedw.q[];
	ws_dbrp[] = dffpipe_ws_nbrp.q[];
	ws_dgrp[] = dffpipe_ws_dgrp.q[];
	ws_nbrp[] = gray2bin_ws_nbrp.bin[];
END;
--VALID FILE
