--lpm_add_sub CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTH=24 ONE_INPUT_IS_CONSTANT="NO" dataa datab result
--VERSION_BEGIN 5.1 cbx_cycloneii 2005:08:30:10:31:44:SJ cbx_lpm_add_sub 2005:09:30:12:13:06:SJ cbx_mgl 2005:10:09:07:39:04:SJ cbx_stratix 2005:10:07:15:53:08:SJ cbx_stratixii 2005:07:27:05:50:56:SJ  VERSION_END


--  Copyright (C) 1991-2005 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);

--synthesis_resources = lut 24 
SUBDESIGN add_sub_tpg
( 
	dataa[23..0]	:	input;
	datab[23..0]	:	input;
	result[23..0]	:	output;
) 
VARIABLE 
	add_sub_cella[23..0] : carry_sum;
	datab_node[23..0]	: WIRE;
	main_cin_wire	: WIRE;

BEGIN 
	add_sub_cella[].cin = ( ((dataa[23..23] & datab_node[23..23]) # ((dataa[23..23] # datab_node[23..23]) & add_sub_cella[22].cout)), ((dataa[22..22] & datab_node[22..22]) # ((dataa[22..22] # datab_node[22..22]) & add_sub_cella[21].cout)), ((dataa[21..21] & datab_node[21..21]) # ((dataa[21..21] # datab_node[21..21]) & add_sub_cella[20].cout)), ((dataa[20..20] & datab_node[20..20]) # ((dataa[20..20] # datab_node[20..20]) & add_sub_cella[19].cout)), ((dataa[19..19] & datab_node[19..19]) # ((dataa[19..19] # datab_node[19..19]) & add_sub_cella[18].cout)), ((dataa[18..18] & datab_node[18..18]) # ((dataa[18..18] # datab_node[18..18]) & add_sub_cella[17].cout)), ((dataa[17..17] & datab_node[17..17]) # ((dataa[17..17] # datab_node[17..17]) & add_sub_cella[16].cout)), ((dataa[16..16] & datab_node[16..16]) # ((dataa[16..16] # datab_node[16..16]) & add_sub_cella[15].cout)), ((dataa[15..15] & datab_node[15..15]) # ((dataa[15..15] # datab_node[15..15]) & add_sub_cella[14].cout)), ((dataa[14..14] & datab_node[14..14]) # ((dataa[14..14] # datab_node[14..14]) & add_sub_cella[13].cout)), ((dataa[13..13] & datab_node[13..13]) # ((dataa[13..13] # datab_node[13..13]) & add_sub_cella[12].cout)), ((dataa[12..12] & datab_node[12..12]) # ((dataa[12..12] # datab_node[12..12]) & add_sub_cella[11].cout)), ((dataa[11..11] & datab_node[11..11]) # ((dataa[11..11] # datab_node[11..11]) & add_sub_cella[10].cout)), ((dataa[10..10] & datab_node[10..10]) # ((dataa[10..10] # datab_node[10..10]) & add_sub_cella[9].cout)), ((dataa[9..9] & datab_node[9..9]) # ((dataa[9..9] # datab_node[9..9]) & add_sub_cella[8].cout)), ((dataa[8..8] & datab_node[8..8]) # ((dataa[8..8] # datab_node[8..8]) & add_sub_cella[7].cout)), ((dataa[7..7] & datab_node[7..7]) # ((dataa[7..7] # datab_node[7..7]) & add_sub_cella[6].cout)), ((dataa[6..6] & datab_node[6..6]) # ((dataa[6..6] # datab_node[6..6]) & add_sub_cella[5].cout)), ((dataa[5..5] & datab_node[5..5]) # ((dataa[5..5] # datab_node[5..5]) & add_sub_cella[4].cout)), ((dataa[4..4] & datab_node[4..4]) # ((dataa[4..4] # datab_node[4..4]) & add_sub_cella[3].cout)), ((dataa[3..3] & datab_node[3..3]) # ((dataa[3..3] # datab_node[3..3]) & add_sub_cella[2].cout)), ((dataa[2..2] & datab_node[2..2]) # ((dataa[2..2] # datab_node[2..2]) & add_sub_cella[1].cout)), ((dataa[1..1] & datab_node[1..1]) # ((dataa[1..1] # datab_node[1..1]) & add_sub_cella[0].cout)), ((dataa[0..0] & datab_node[0..0]) # ((dataa[0..0] # datab_node[0..0]) & main_cin_wire)));
	add_sub_cella[].sin = ( ((dataa[23..23] $ datab_node[23..23]) $ add_sub_cella[22].cout), ((dataa[22..22] $ datab_node[22..22]) $ add_sub_cella[21].cout), ((dataa[21..21] $ datab_node[21..21]) $ add_sub_cella[20].cout), ((dataa[20..20] $ datab_node[20..20]) $ add_sub_cella[19].cout), ((dataa[19..19] $ datab_node[19..19]) $ add_sub_cella[18].cout), ((dataa[18..18] $ datab_node[18..18]) $ add_sub_cella[17].cout), ((dataa[17..17] $ datab_node[17..17]) $ add_sub_cella[16].cout), ((dataa[16..16] $ datab_node[16..16]) $ add_sub_cella[15].cout), ((dataa[15..15] $ datab_node[15..15]) $ add_sub_cella[14].cout), ((dataa[14..14] $ datab_node[14..14]) $ add_sub_cella[13].cout), ((dataa[13..13] $ datab_node[13..13]) $ add_sub_cella[12].cout), ((dataa[12..12] $ datab_node[12..12]) $ add_sub_cella[11].cout), ((dataa[11..11] $ datab_node[11..11]) $ add_sub_cella[10].cout), ((dataa[10..10] $ datab_node[10..10]) $ add_sub_cella[9].cout), ((dataa[9..9] $ datab_node[9..9]) $ add_sub_cella[8].cout), ((dataa[8..8] $ datab_node[8..8]) $ add_sub_cella[7].cout), ((dataa[7..7] $ datab_node[7..7]) $ add_sub_cella[6].cout), ((dataa[6..6] $ datab_node[6..6]) $ add_sub_cella[5].cout), ((dataa[5..5] $ datab_node[5..5]) $ add_sub_cella[4].cout), ((dataa[4..4] $ datab_node[4..4]) $ add_sub_cella[3].cout), ((dataa[3..3] $ datab_node[3..3]) $ add_sub_cella[2].cout), ((dataa[2..2] $ datab_node[2..2]) $ add_sub_cella[1].cout), ((dataa[1..1] $ datab_node[1..1]) $ add_sub_cella[0].cout), ((dataa[0..0] $ datab_node[0..0]) $ main_cin_wire));
	datab_node[] = datab[];
	main_cin_wire = B"0";
	result[] = add_sub_cella[].sout;
END;
--VALID FILE
