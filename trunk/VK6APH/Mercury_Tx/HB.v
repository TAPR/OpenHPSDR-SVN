// -------------------------------------------------------------
//
// Module: HB
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-04 19:47:19
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: HB
// TargetDirectory: c:\HPDSDR\trunk\VK6APH\Mercury\Matlab-files
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 11
// Filter Length      : 21
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s16,15 -> [-1 1)
// Input              : s24,15 -> [-256 256)
// Filter Internals   : Specify Precision
//   Output           : s24,30 -> [-7.812500e-003 7.812500e-003)
//   Product          : s30,30 -> [-5.000000e-001 5.000000e-001)
//   Accumulator      : s32,30 -> [-2 2)
//   Round Mode       : convergent
//   Overflow Mode    : wrap
//
// Implementation Cost
// Number of Multipliers : 11
// Number of Adders      : 10
// Number of States      : 18
// MultPerInputSample    : 5.5
// AddPerInputSample     : 5
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HB 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [23:0] filter_in; //sfix24_En15
  output  signed [23:0] filter_out; //sfix24_En30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: HB
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_3 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_4 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_5 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_6 = 16'b0100000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_7 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_8 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_9 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_10 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_11 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b0000000000110001; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b1111111011101111; //sfix16_En15
  parameter signed [15:0] coeffphase2_3 = 16'b0000001110011111; //sfix16_En15
  parameter signed [15:0] coeffphase2_4 = 16'b1111010111000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_5 = 16'b0010011110000010; //sfix16_En15
  parameter signed [15:0] coeffphase2_6 = 16'b0010011110000010; //sfix16_En15
  parameter signed [15:0] coeffphase2_7 = 16'b1111010111000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_8 = 16'b0000001110011111; //sfix16_En15
  parameter signed [15:0] coeffphase2_9 = 16'b1111111011101111; //sfix16_En15
  parameter signed [15:0] coeffphase2_10 = 16'b0000000000110001; //sfix16_En15
  parameter signed [15:0] coeffphase2_11 = 16'b0000000000000000; //sfix16_En15
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [23:0] input_register; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase0 [0:4] ; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase1 [0:9] ; // sfix24_En15
  wire signed [29:0] product_phase0_6; // sfix30_En30
  wire signed [29:0] product_phase1_1; // sfix30_En30
  wire signed [30:0] mulcsd_temp; // sfix31_En30
  wire signed [29:0] product_phase1_2; // sfix30_En30
  wire signed [32:0] mulcsd_temp_1; // sfix33_En30
  wire signed [29:0] product_phase1_3; // sfix30_En30
  wire signed [34:0] mulcsd_temp_2; // sfix35_En30
  wire signed [29:0] product_phase1_4; // sfix30_En30
  wire signed [35:0] mulcsd_temp_3; // sfix36_En30
  wire signed [29:0] product_phase1_5; // sfix30_En30
  wire signed [37:0] mulcsd_temp_4; // sfix38_En30
  wire signed [29:0] product_phase1_6; // sfix30_En30
  wire signed [37:0] mulcsd_temp_5; // sfix38_En30
  wire signed [29:0] product_phase1_7; // sfix30_En30
  wire signed [35:0] mulcsd_temp_6; // sfix36_En30
  wire signed [29:0] product_phase1_8; // sfix30_En30
  wire signed [34:0] mulcsd_temp_7; // sfix35_En30
  wire signed [29:0] product_phase1_9; // sfix30_En30
  wire signed [32:0] mulcsd_temp_8; // sfix33_En30
  wire signed [29:0] product_phase1_10; // sfix30_En30
  wire signed [30:0] mulcsd_temp_9; // sfix31_En30
  reg  signed [29:0] product_pipeline_phase0_6; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_1; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_2; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_3; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_4; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_5; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_6; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_7; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_8; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_9; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_10; // sfix30_En30
  wire signed [31:0] quantized_sum; // sfix32_En30
  wire signed [31:0] sumvector1 [0:5] ; // sfix32_En30
  wire signed [31:0] add_signext; // sfix32_En30
  wire signed [31:0] add_signext_1; // sfix32_En30
  wire signed [32:0] add_temp; // sfix33_En30
  wire signed [29:0] add_signext_2; // sfix30_En30
  wire signed [29:0] add_signext_3; // sfix30_En30
  wire signed [30:0] add_temp_1; // sfix31_En30
  wire signed [29:0] add_signext_4; // sfix30_En30
  wire signed [29:0] add_signext_5; // sfix30_En30
  wire signed [30:0] add_temp_2; // sfix31_En30
  wire signed [29:0] add_signext_6; // sfix30_En30
  wire signed [29:0] add_signext_7; // sfix30_En30
  wire signed [30:0] add_temp_3; // sfix31_En30
  wire signed [29:0] add_signext_8; // sfix30_En30
  wire signed [29:0] add_signext_9; // sfix30_En30
  wire signed [30:0] add_temp_4; // sfix31_En30
  reg  signed [31:0] sumdelay_pipeline1 [0:5] ; // sfix32_En30
  wire signed [31:0] sumvector2 [0:2] ; // sfix32_En30
  wire signed [31:0] add_signext_10; // sfix32_En30
  wire signed [31:0] add_signext_11; // sfix32_En30
  wire signed [32:0] add_temp_5; // sfix33_En30
  wire signed [31:0] add_signext_12; // sfix32_En30
  wire signed [31:0] add_signext_13; // sfix32_En30
  wire signed [32:0] add_temp_6; // sfix33_En30
  wire signed [31:0] add_signext_14; // sfix32_En30
  wire signed [31:0] add_signext_15; // sfix32_En30
  wire signed [32:0] add_temp_7; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline2 [0:2] ; // sfix32_En30
  wire signed [31:0] sumvector3 [0:1] ; // sfix32_En30
  wire signed [31:0] add_signext_16; // sfix32_En30
  wire signed [31:0] add_signext_17; // sfix32_En30
  wire signed [32:0] add_temp_8; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline3 [0:1] ; // sfix32_En30
  wire signed [31:0] sum4; // sfix32_En30
  wire signed [31:0] add_signext_18; // sfix32_En30
  wire signed [31:0] add_signext_19; // sfix32_En30
  wire signed [32:0] add_temp_9; // sfix33_En30
  wire signed [23:0] output_typeconvert; // sfix24_En30
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  wire ce_gated; // boolean
  reg  signed [23:0] output_register; // sfix24_En30

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign product_phase0_6 = $signed({input_pipeline_phase0[4][15:0], 14'b00000000000000});

  assign mulcsd_temp = 
        $signed({input_pipeline_phase1[0], 6'b000000}) -
        $signed({input_pipeline_phase1[0], 4'b0000}) +
        input_pipeline_phase1[0];
  assign product_phase1_1 = mulcsd_temp[29:0];

  assign mulcsd_temp_1 = - (
        $signed({input_pipeline_phase1[1], 8'b00000000}) +
        $signed({input_pipeline_phase1[1], 4'b0000}) +
        input_pipeline_phase1[1]);
  assign product_phase1_2 = mulcsd_temp_1[29:0];

  assign mulcsd_temp_2 = 
        $signed({input_pipeline_phase1[2], 10'b0000000000}) -
        $signed({input_pipeline_phase1[2], 7'b0000000}) +
        $signed({input_pipeline_phase1[2], 5'b00000}) -
        input_pipeline_phase1[2];
  assign product_phase1_3 = mulcsd_temp_2[29:0];

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase1[3], 11'b00000000000}) +
        $signed({input_pipeline_phase1[3], 9'b000000000}) +
        $signed({input_pipeline_phase1[3], 6'b000000}));
  assign product_phase1_4 = mulcsd_temp_3[29:0];

  assign mulcsd_temp_4 = 
        $signed({input_pipeline_phase1[4], 13'b0000000000000}) +
        $signed({input_pipeline_phase1[4], 11'b00000000000}) -
        $signed({input_pipeline_phase1[4], 7'b0000000}) +
        $signed({input_pipeline_phase1[4], 1'b0});
  assign product_phase1_5 = mulcsd_temp_4[29:0];

  assign mulcsd_temp_5 = 
        $signed({input_pipeline_phase1[5], 13'b0000000000000}) +
        $signed({input_pipeline_phase1[5], 11'b00000000000}) -
        $signed({input_pipeline_phase1[5], 7'b0000000}) +
        $signed({input_pipeline_phase1[5], 1'b0});
  assign product_phase1_6 = mulcsd_temp_5[29:0];

  assign mulcsd_temp_6 = - (
        $signed({input_pipeline_phase1[6], 11'b00000000000}) +
        $signed({input_pipeline_phase1[6], 9'b000000000}) +
        $signed({input_pipeline_phase1[6], 6'b000000}));
  assign product_phase1_7 = mulcsd_temp_6[29:0];

  assign mulcsd_temp_7 = 
        $signed({input_pipeline_phase1[7], 10'b0000000000}) -
        $signed({input_pipeline_phase1[7], 7'b0000000}) +
        $signed({input_pipeline_phase1[7], 5'b00000}) -
        input_pipeline_phase1[7];
  assign product_phase1_8 = mulcsd_temp_7[29:0];

  assign mulcsd_temp_8 = - (
        $signed({input_pipeline_phase1[8], 8'b00000000}) +
        $signed({input_pipeline_phase1[8], 4'b0000}) +
        input_pipeline_phase1[8]);
  assign product_phase1_9 = mulcsd_temp_8[29:0];

  assign mulcsd_temp_9 = 
        $signed({input_pipeline_phase1[9], 6'b000000}) -
        $signed({input_pipeline_phase1[9], 4'b0000}) +
        input_pipeline_phase1[9];
  assign product_phase1_10 = mulcsd_temp_9[29:0];

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase1_1 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase1_3 <= 0;
        product_pipeline_phase1_4 <= 0;
        product_pipeline_phase1_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase1_6 <= 0;
        product_pipeline_phase1_7 <= 0;
        product_pipeline_phase1_8 <= 0;
        product_pipeline_phase1_9 <= 0;
        product_pipeline_phase1_10 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          product_pipeline_phase1_1 <= product_phase1_1;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase1_3 <= product_phase1_3;
          product_pipeline_phase1_4 <= product_phase1_4;
          product_pipeline_phase1_5 <= product_phase1_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase1_6 <= product_phase1_6;
          product_pipeline_phase1_7 <= product_phase1_7;
          product_pipeline_phase1_8 <= product_phase1_8;
          product_pipeline_phase1_9 <= product_phase1_9;
          product_pipeline_phase1_10 <= product_phase1_10;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{2{product_pipeline_phase1_1[29]}}, product_pipeline_phase1_1});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{2{product_pipeline_phase1_2[29]}}, product_pipeline_phase1_2});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[31:0];

  assign add_signext_2 = product_pipeline_phase1_3;
  assign add_signext_3 = product_pipeline_phase1_4;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{1{add_temp_1[30]}}, add_temp_1});

  assign add_signext_4 = product_pipeline_phase1_5;
  assign add_signext_5 = product_pipeline_phase1_6;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector1[2] = $signed({{1{add_temp_2[30]}}, add_temp_2});

  assign add_signext_6 = product_pipeline_phase1_7;
  assign add_signext_7 = product_pipeline_phase1_8;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector1[3] = $signed({{1{add_temp_3[30]}}, add_temp_3});

  assign add_signext_8 = product_pipeline_phase1_9;
  assign add_signext_9 = product_pipeline_phase1_10;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector1[4] = $signed({{1{add_temp_4[30]}}, add_temp_4});

  assign sumvector1[5] = $signed({{2{product_pipeline_phase0_6[29]}}, product_pipeline_phase0_6});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_10 = sumdelay_pipeline1[0];
  assign add_signext_11 = sumdelay_pipeline1[1];
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector2[0] = add_temp_5[31:0];

  assign add_signext_12 = sumdelay_pipeline1[2];
  assign add_signext_13 = sumdelay_pipeline1[3];
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector2[1] = add_temp_6[31:0];

  assign add_signext_14 = sumdelay_pipeline1[4];
  assign add_signext_15 = sumdelay_pipeline1[5];
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector2[2] = add_temp_7[31:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_16 = sumdelay_pipeline2[0];
  assign add_signext_17 = sumdelay_pipeline2[1];
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector3[0] = add_temp_8[31:0];

  assign sumvector3[1] = sumdelay_pipeline2[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_18 = sumdelay_pipeline3[0];
  assign add_signext_19 = sumdelay_pipeline3[1];
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum4 = add_temp_9[31:0];

  assign output_typeconvert = sum4[23:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_delayline1 <= clk_enable;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline8 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_gated;
  assign filter_out = output_register;
endmodule  // HB
