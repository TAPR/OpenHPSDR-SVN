// -------------------------------------------------------------
//
// Module: CFIR
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-12-31 19:24:34
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CFIR
// TargetDirectory: c:\HPDSDR\trunk\VK6APH\Mercury\Matlab-files
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 48
// Filter Length      : 95
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s18,17 -> [-1 1)
// Input              : s16,15 -> [-1 1)
// Filter Internals   : Full Precision
//   Output           : s35,32 -> [-4 4)  (auto determined)
//   Product          : s33,32 -> [-1 1)  (auto determined)
//   Accumulator      : s35,32 -> [-4 4)  (auto determined)
//   Round Mode       : No rounding
//   Overflow Mode    : No overflow
//
// Design Method Information
// Design Algorithm : equiripple
//
// Design Options
// DensityFactor : 16
// MinOrder      : any
// MinPhase      : false
// StopbandDecay : 60
// StopbandShape : linear
//
// Design Specifications
// Sampling Frequency : 0.39063 MHz
// Response           : CIC Compensator
// Specification      : Fp,Fst,Ap,Ast
// MultirateType      : Decimator
// DecimationFactor   : 2e-006 MHz
// NumberOfSections   : 8e-006 MHz
// DifferentialDelay  : 1e-006 MHz
// Passband Edge      : 0.09 MHz
// Stopband Edge      : 0.11 MHz
// Passband Ripple    : 0.01 dB
// Stopband Atten.    : 80 dB
//
// Measurements
// Sampling Frequency : 0.39063 MHz
// Passband Edge      : 0.09 MHz
// 3-dB Point         : 0.10102 MHz
// 6-dB Point         : 0.10204 MHz
// Stopband Edge      : 0.11 MHz
// Passband Ripple    : 0.010496 dB
// Stopband Atten.    : 78.2777 dB
// Transition Width   : 0.02 MHz
//
// Implementation Cost
// Number of Multipliers : 95
// Number of Adders      : 94
// Number of States      : 94
// MultPerInputSample    : 47.5
// AddPerInputSample     : 47
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CFIR 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [34:0] filter_out; //sfix35_En32
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: CFIR
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [17:0] coeffphase1_1 = 18'b111111111111111010; //sfix18_En17
  parameter signed [17:0] coeffphase1_2 = 18'b000000000000100101; //sfix18_En17
  parameter signed [17:0] coeffphase1_3 = 18'b111111111111011011; //sfix18_En17
  parameter signed [17:0] coeffphase1_4 = 18'b000000000001000000; //sfix18_En17
  parameter signed [17:0] coeffphase1_5 = 18'b111111111110011101; //sfix18_En17
  parameter signed [17:0] coeffphase1_6 = 18'b000000000010010101; //sfix18_En17
  parameter signed [17:0] coeffphase1_7 = 18'b111111111100100100; //sfix18_En17
  parameter signed [17:0] coeffphase1_8 = 18'b000000000100111101; //sfix18_En17
  parameter signed [17:0] coeffphase1_9 = 18'b111111111001000001; //sfix18_En17
  parameter signed [17:0] coeffphase1_10 = 18'b000000001001101010; //sfix18_En17
  parameter signed [17:0] coeffphase1_11 = 18'b111111110010110111; //sfix18_En17
  parameter signed [17:0] coeffphase1_12 = 18'b000000010001100111; //sfix18_En17
  parameter signed [17:0] coeffphase1_13 = 18'b111111101000101111; //sfix18_En17
  parameter signed [17:0] coeffphase1_14 = 18'b000000011110011010; //sfix18_En17
  parameter signed [17:0] coeffphase1_15 = 18'b111111011000101001; //sfix18_En17
  parameter signed [17:0] coeffphase1_16 = 18'b000000110010100111; //sfix18_En17
  parameter signed [17:0] coeffphase1_17 = 18'b111110111111001011; //sfix18_En17
  parameter signed [17:0] coeffphase1_18 = 18'b000001010011000110; //sfix18_En17
  parameter signed [17:0] coeffphase1_19 = 18'b111110010100110101; //sfix18_En17
  parameter signed [17:0] coeffphase1_20 = 18'b000010001100010011; //sfix18_En17
  parameter signed [17:0] coeffphase1_21 = 18'b111101000011000100; //sfix18_En17
  parameter signed [17:0] coeffphase1_22 = 18'b000100001100001010; //sfix18_En17
  parameter signed [17:0] coeffphase1_23 = 18'b111001011100100101; //sfix18_En17
  parameter signed [17:0] coeffphase1_24 = 18'b001100000100011001; //sfix18_En17
  parameter signed [17:0] coeffphase1_25 = 18'b001100000100011001; //sfix18_En17
  parameter signed [17:0] coeffphase1_26 = 18'b111001011100100101; //sfix18_En17
  parameter signed [17:0] coeffphase1_27 = 18'b000100001100001010; //sfix18_En17
  parameter signed [17:0] coeffphase1_28 = 18'b111101000011000100; //sfix18_En17
  parameter signed [17:0] coeffphase1_29 = 18'b000010001100010011; //sfix18_En17
  parameter signed [17:0] coeffphase1_30 = 18'b111110010100110101; //sfix18_En17
  parameter signed [17:0] coeffphase1_31 = 18'b000001010011000110; //sfix18_En17
  parameter signed [17:0] coeffphase1_32 = 18'b111110111111001011; //sfix18_En17
  parameter signed [17:0] coeffphase1_33 = 18'b000000110010100111; //sfix18_En17
  parameter signed [17:0] coeffphase1_34 = 18'b111111011000101001; //sfix18_En17
  parameter signed [17:0] coeffphase1_35 = 18'b000000011110011010; //sfix18_En17
  parameter signed [17:0] coeffphase1_36 = 18'b111111101000101111; //sfix18_En17
  parameter signed [17:0] coeffphase1_37 = 18'b000000010001100111; //sfix18_En17
  parameter signed [17:0] coeffphase1_38 = 18'b111111110010110111; //sfix18_En17
  parameter signed [17:0] coeffphase1_39 = 18'b000000001001101010; //sfix18_En17
  parameter signed [17:0] coeffphase1_40 = 18'b111111111001000001; //sfix18_En17
  parameter signed [17:0] coeffphase1_41 = 18'b000000000100111101; //sfix18_En17
  parameter signed [17:0] coeffphase1_42 = 18'b111111111100100100; //sfix18_En17
  parameter signed [17:0] coeffphase1_43 = 18'b000000000010010101; //sfix18_En17
  parameter signed [17:0] coeffphase1_44 = 18'b111111111110011101; //sfix18_En17
  parameter signed [17:0] coeffphase1_45 = 18'b000000000001000000; //sfix18_En17
  parameter signed [17:0] coeffphase1_46 = 18'b111111111111011011; //sfix18_En17
  parameter signed [17:0] coeffphase1_47 = 18'b000000000000100101; //sfix18_En17
  parameter signed [17:0] coeffphase1_48 = 18'b111111111111111010; //sfix18_En17
  parameter signed [17:0] coeffphase2_1 = 18'b000000000000000010; //sfix18_En17
  parameter signed [17:0] coeffphase2_2 = 18'b000000000000100011; //sfix18_En17
  parameter signed [17:0] coeffphase2_3 = 18'b111111111111001101; //sfix18_En17
  parameter signed [17:0] coeffphase2_4 = 18'b000000000001010101; //sfix18_En17
  parameter signed [17:0] coeffphase2_5 = 18'b111111111101111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_6 = 18'b000000000011000000; //sfix18_En17
  parameter signed [17:0] coeffphase2_7 = 18'b111111111011110011; //sfix18_En17
  parameter signed [17:0] coeffphase2_8 = 18'b000000000101101100; //sfix18_En17
  parameter signed [17:0] coeffphase2_9 = 18'b111111111000100001; //sfix18_En17
  parameter signed [17:0] coeffphase2_10 = 18'b000000001001100110; //sfix18_En17
  parameter signed [17:0] coeffphase2_11 = 18'b111111110011111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_12 = 18'b000000001110110100; //sfix18_En17
  parameter signed [17:0] coeffphase2_13 = 18'b111111101110000111; //sfix18_En17
  parameter signed [17:0] coeffphase2_14 = 18'b000000010101010011; //sfix18_En17
  parameter signed [17:0] coeffphase2_15 = 18'b111111100110111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_16 = 18'b000000011101001100; //sfix18_En17
  parameter signed [17:0] coeffphase2_17 = 18'b111111011110001010; //sfix18_En17
  parameter signed [17:0] coeffphase2_18 = 18'b000000100111011000; //sfix18_En17
  parameter signed [17:0] coeffphase2_19 = 18'b111111010001011110; //sfix18_En17
  parameter signed [17:0] coeffphase2_20 = 18'b000000111001001000; //sfix18_En17
  parameter signed [17:0] coeffphase2_21 = 18'b111110110011101110; //sfix18_En17
  parameter signed [17:0] coeffphase2_22 = 18'b000001111001100110; //sfix18_En17
  parameter signed [17:0] coeffphase2_23 = 18'b111011100110001111; //sfix18_En17
  parameter signed [17:0] coeffphase2_24 = 18'b010110011001010010; //sfix18_En17
  parameter signed [17:0] coeffphase2_25 = 18'b111011100110001111; //sfix18_En17
  parameter signed [17:0] coeffphase2_26 = 18'b000001111001100110; //sfix18_En17
  parameter signed [17:0] coeffphase2_27 = 18'b111110110011101110; //sfix18_En17
  parameter signed [17:0] coeffphase2_28 = 18'b000000111001001000; //sfix18_En17
  parameter signed [17:0] coeffphase2_29 = 18'b111111010001011110; //sfix18_En17
  parameter signed [17:0] coeffphase2_30 = 18'b000000100111011000; //sfix18_En17
  parameter signed [17:0] coeffphase2_31 = 18'b111111011110001010; //sfix18_En17
  parameter signed [17:0] coeffphase2_32 = 18'b000000011101001100; //sfix18_En17
  parameter signed [17:0] coeffphase2_33 = 18'b111111100110111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_34 = 18'b000000010101010011; //sfix18_En17
  parameter signed [17:0] coeffphase2_35 = 18'b111111101110000111; //sfix18_En17
  parameter signed [17:0] coeffphase2_36 = 18'b000000001110110100; //sfix18_En17
  parameter signed [17:0] coeffphase2_37 = 18'b111111110011111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_38 = 18'b000000001001100110; //sfix18_En17
  parameter signed [17:0] coeffphase2_39 = 18'b111111111000100001; //sfix18_En17
  parameter signed [17:0] coeffphase2_40 = 18'b000000000101101100; //sfix18_En17
  parameter signed [17:0] coeffphase2_41 = 18'b111111111011110011; //sfix18_En17
  parameter signed [17:0] coeffphase2_42 = 18'b000000000011000000; //sfix18_En17
  parameter signed [17:0] coeffphase2_43 = 18'b111111111101111101; //sfix18_En17
  parameter signed [17:0] coeffphase2_44 = 18'b000000000001010101; //sfix18_En17
  parameter signed [17:0] coeffphase2_45 = 18'b111111111111001101; //sfix18_En17
  parameter signed [17:0] coeffphase2_46 = 18'b000000000000100011; //sfix18_En17
  parameter signed [17:0] coeffphase2_47 = 18'b000000000000000010; //sfix18_En17
  parameter signed [17:0] coeffphase2_48 = 18'b000000000000000000; //sfix18_En17
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [15:0] input_register; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase0 [0:46] ; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase1 [0:46] ; // sfix16_En15
  wire signed [32:0] product_phase0_1; // sfix33_En32
  wire signed [19:0] mulcsd_temp; // sfix20_En32
  wire signed [32:0] product_phase0_2; // sfix33_En32
  wire signed [21:0] mulcsd_temp_1; // sfix22_En32
  wire signed [32:0] product_phase0_3; // sfix33_En32
  wire signed [21:0] mulcsd_temp_2; // sfix22_En32
  wire signed [32:0] product_phase0_4; // sfix33_En32
  wire signed [32:0] product_phase0_5; // sfix33_En32
  wire signed [23:0] mulcsd_temp_3; // sfix24_En32
  wire signed [32:0] product_phase0_6; // sfix33_En32
  wire signed [23:0] mulcsd_temp_4; // sfix24_En32
  wire signed [32:0] product_phase0_7; // sfix33_En32
  wire signed [24:0] mulcsd_temp_5; // sfix25_En32
  wire signed [32:0] product_phase0_8; // sfix33_En32
  wire signed [24:0] mulcsd_temp_6; // sfix25_En32
  wire signed [32:0] product_phase0_9; // sfix33_En32
  wire signed [25:0] mulcsd_temp_7; // sfix26_En32
  wire signed [32:0] product_phase0_10; // sfix33_En32
  wire signed [25:0] mulcsd_temp_8; // sfix26_En32
  wire signed [32:0] product_phase0_11; // sfix33_En32
  wire signed [26:0] mulcsd_temp_9; // sfix27_En32
  wire signed [32:0] product_phase0_12; // sfix33_En32
  wire signed [26:0] mulcsd_temp_10; // sfix27_En32
  wire signed [32:0] product_phase0_13; // sfix33_En32
  wire signed [26:0] mulcsd_temp_11; // sfix27_En32
  wire signed [32:0] product_phase0_14; // sfix33_En32
  wire signed [27:0] mulcsd_temp_12; // sfix28_En32
  wire signed [32:0] product_phase0_15; // sfix33_En32
  wire signed [27:0] mulcsd_temp_13; // sfix28_En32
  wire signed [32:0] product_phase0_16; // sfix33_En32
  wire signed [28:0] mulcsd_temp_14; // sfix29_En32
  wire signed [32:0] product_phase0_17; // sfix33_En32
  wire signed [28:0] mulcsd_temp_15; // sfix29_En32
  wire signed [32:0] product_phase0_18; // sfix33_En32
  wire signed [28:0] mulcsd_temp_16; // sfix29_En32
  wire signed [32:0] product_phase0_19; // sfix33_En32
  wire signed [29:0] mulcsd_temp_17; // sfix30_En32
  wire signed [32:0] product_phase0_20; // sfix33_En32
  wire signed [29:0] mulcsd_temp_18; // sfix30_En32
  wire signed [32:0] product_phase0_21; // sfix33_En32
  wire signed [29:0] mulcsd_temp_19; // sfix30_En32
  wire signed [32:0] product_phase0_22; // sfix33_En32
  wire signed [30:0] mulcsd_temp_20; // sfix31_En32
  wire signed [32:0] product_phase0_23; // sfix33_En32
  wire signed [31:0] mulcsd_temp_21; // sfix32_En32
  wire signed [32:0] product_phase0_24; // sfix33_En32
  wire signed [32:0] mulcsd_temp_22; // sfix33_En32
  wire signed [32:0] product_phase0_25; // sfix33_En32
  wire signed [32:0] mulcsd_temp_23; // sfix33_En32
  wire signed [32:0] product_phase0_26; // sfix33_En32
  wire signed [31:0] mulcsd_temp_24; // sfix32_En32
  wire signed [32:0] product_phase0_27; // sfix33_En32
  wire signed [30:0] mulcsd_temp_25; // sfix31_En32
  wire signed [32:0] product_phase0_28; // sfix33_En32
  wire signed [29:0] mulcsd_temp_26; // sfix30_En32
  wire signed [32:0] product_phase0_29; // sfix33_En32
  wire signed [29:0] mulcsd_temp_27; // sfix30_En32
  wire signed [32:0] product_phase0_30; // sfix33_En32
  wire signed [29:0] mulcsd_temp_28; // sfix30_En32
  wire signed [32:0] product_phase0_31; // sfix33_En32
  wire signed [28:0] mulcsd_temp_29; // sfix29_En32
  wire signed [32:0] product_phase0_32; // sfix33_En32
  wire signed [28:0] mulcsd_temp_30; // sfix29_En32
  wire signed [32:0] product_phase0_33; // sfix33_En32
  wire signed [28:0] mulcsd_temp_31; // sfix29_En32
  wire signed [32:0] product_phase0_34; // sfix33_En32
  wire signed [27:0] mulcsd_temp_32; // sfix28_En32
  wire signed [32:0] product_phase0_35; // sfix33_En32
  wire signed [27:0] mulcsd_temp_33; // sfix28_En32
  wire signed [32:0] product_phase0_36; // sfix33_En32
  wire signed [26:0] mulcsd_temp_34; // sfix27_En32
  wire signed [32:0] product_phase0_37; // sfix33_En32
  wire signed [26:0] mulcsd_temp_35; // sfix27_En32
  wire signed [32:0] product_phase0_38; // sfix33_En32
  wire signed [26:0] mulcsd_temp_36; // sfix27_En32
  wire signed [32:0] product_phase0_39; // sfix33_En32
  wire signed [25:0] mulcsd_temp_37; // sfix26_En32
  wire signed [32:0] product_phase0_40; // sfix33_En32
  wire signed [25:0] mulcsd_temp_38; // sfix26_En32
  wire signed [32:0] product_phase0_41; // sfix33_En32
  wire signed [24:0] mulcsd_temp_39; // sfix25_En32
  wire signed [32:0] product_phase0_42; // sfix33_En32
  wire signed [24:0] mulcsd_temp_40; // sfix25_En32
  wire signed [32:0] product_phase0_43; // sfix33_En32
  wire signed [23:0] mulcsd_temp_41; // sfix24_En32
  wire signed [32:0] product_phase0_44; // sfix33_En32
  wire signed [23:0] mulcsd_temp_42; // sfix24_En32
  wire signed [32:0] product_phase0_45; // sfix33_En32
  wire signed [32:0] product_phase0_46; // sfix33_En32
  wire signed [21:0] mulcsd_temp_43; // sfix22_En32
  wire signed [32:0] product_phase0_47; // sfix33_En32
  wire signed [21:0] mulcsd_temp_44; // sfix22_En32
  wire signed [32:0] product_phase0_48; // sfix33_En32
  wire signed [19:0] mulcsd_temp_45; // sfix20_En32
  wire signed [32:0] product_phase1_1; // sfix33_En32
  wire signed [32:0] product_phase1_2; // sfix33_En32
  wire signed [21:0] mulcsd_temp_46; // sfix22_En32
  wire signed [32:0] product_phase1_3; // sfix33_En32
  wire signed [22:0] mulcsd_temp_47; // sfix23_En32
  wire signed [32:0] product_phase1_4; // sfix33_En32
  wire signed [22:0] mulcsd_temp_48; // sfix23_En32
  wire signed [32:0] product_phase1_5; // sfix33_En32
  wire signed [23:0] mulcsd_temp_49; // sfix24_En32
  wire signed [32:0] product_phase1_6; // sfix33_En32
  wire signed [24:0] mulcsd_temp_50; // sfix25_En32
  wire signed [32:0] product_phase1_7; // sfix33_En32
  wire signed [24:0] mulcsd_temp_51; // sfix25_En32
  wire signed [32:0] product_phase1_8; // sfix33_En32
  wire signed [24:0] mulcsd_temp_52; // sfix25_En32
  wire signed [32:0] product_phase1_9; // sfix33_En32
  wire signed [25:0] mulcsd_temp_53; // sfix26_En32
  wire signed [32:0] product_phase1_10; // sfix33_En32
  wire signed [25:0] mulcsd_temp_54; // sfix26_En32
  wire signed [32:0] product_phase1_11; // sfix33_En32
  wire signed [26:0] mulcsd_temp_55; // sfix27_En32
  wire signed [32:0] product_phase1_12; // sfix33_En32
  wire signed [26:0] mulcsd_temp_56; // sfix27_En32
  wire signed [32:0] product_phase1_13; // sfix33_En32
  wire signed [26:0] mulcsd_temp_57; // sfix27_En32
  wire signed [32:0] product_phase1_14; // sfix33_En32
  wire signed [26:0] mulcsd_temp_58; // sfix27_En32
  wire signed [32:0] product_phase1_15; // sfix33_En32
  wire signed [27:0] mulcsd_temp_59; // sfix28_En32
  wire signed [32:0] product_phase1_16; // sfix33_En32
  wire signed [27:0] mulcsd_temp_60; // sfix28_En32
  wire signed [32:0] product_phase1_17; // sfix33_En32
  wire signed [27:0] mulcsd_temp_61; // sfix28_En32
  wire signed [32:0] product_phase1_18; // sfix33_En32
  wire signed [27:0] mulcsd_temp_62; // sfix28_En32
  wire signed [32:0] product_phase1_19; // sfix33_En32
  wire signed [27:0] mulcsd_temp_63; // sfix28_En32
  wire signed [32:0] product_phase1_20; // sfix33_En32
  wire signed [28:0] mulcsd_temp_64; // sfix29_En32
  wire signed [32:0] product_phase1_21; // sfix33_En32
  wire signed [28:0] mulcsd_temp_65; // sfix29_En32
  wire signed [32:0] product_phase1_22; // sfix33_En32
  wire signed [29:0] mulcsd_temp_66; // sfix30_En32
  wire signed [32:0] product_phase1_23; // sfix33_En32
  wire signed [30:0] mulcsd_temp_67; // sfix31_En32
  wire signed [32:0] product_phase1_24; // sfix33_En32
  wire signed [32:0] mulcsd_temp_68; // sfix33_En32
  wire signed [32:0] product_phase1_25; // sfix33_En32
  wire signed [30:0] mulcsd_temp_69; // sfix31_En32
  wire signed [32:0] product_phase1_26; // sfix33_En32
  wire signed [29:0] mulcsd_temp_70; // sfix30_En32
  wire signed [32:0] product_phase1_27; // sfix33_En32
  wire signed [28:0] mulcsd_temp_71; // sfix29_En32
  wire signed [32:0] product_phase1_28; // sfix33_En32
  wire signed [28:0] mulcsd_temp_72; // sfix29_En32
  wire signed [32:0] product_phase1_29; // sfix33_En32
  wire signed [27:0] mulcsd_temp_73; // sfix28_En32
  wire signed [32:0] product_phase1_30; // sfix33_En32
  wire signed [27:0] mulcsd_temp_74; // sfix28_En32
  wire signed [32:0] product_phase1_31; // sfix33_En32
  wire signed [27:0] mulcsd_temp_75; // sfix28_En32
  wire signed [32:0] product_phase1_32; // sfix33_En32
  wire signed [27:0] mulcsd_temp_76; // sfix28_En32
  wire signed [32:0] product_phase1_33; // sfix33_En32
  wire signed [27:0] mulcsd_temp_77; // sfix28_En32
  wire signed [32:0] product_phase1_34; // sfix33_En32
  wire signed [26:0] mulcsd_temp_78; // sfix27_En32
  wire signed [32:0] product_phase1_35; // sfix33_En32
  wire signed [26:0] mulcsd_temp_79; // sfix27_En32
  wire signed [32:0] product_phase1_36; // sfix33_En32
  wire signed [26:0] mulcsd_temp_80; // sfix27_En32
  wire signed [32:0] product_phase1_37; // sfix33_En32
  wire signed [26:0] mulcsd_temp_81; // sfix27_En32
  wire signed [32:0] product_phase1_38; // sfix33_En32
  wire signed [25:0] mulcsd_temp_82; // sfix26_En32
  wire signed [32:0] product_phase1_39; // sfix33_En32
  wire signed [25:0] mulcsd_temp_83; // sfix26_En32
  wire signed [32:0] product_phase1_40; // sfix33_En32
  wire signed [24:0] mulcsd_temp_84; // sfix25_En32
  wire signed [32:0] product_phase1_41; // sfix33_En32
  wire signed [24:0] mulcsd_temp_85; // sfix25_En32
  wire signed [32:0] product_phase1_42; // sfix33_En32
  wire signed [24:0] mulcsd_temp_86; // sfix25_En32
  wire signed [32:0] product_phase1_43; // sfix33_En32
  wire signed [23:0] mulcsd_temp_87; // sfix24_En32
  wire signed [32:0] product_phase1_44; // sfix33_En32
  wire signed [22:0] mulcsd_temp_88; // sfix23_En32
  wire signed [32:0] product_phase1_45; // sfix33_En32
  wire signed [22:0] mulcsd_temp_89; // sfix23_En32
  wire signed [32:0] product_phase1_46; // sfix33_En32
  wire signed [21:0] mulcsd_temp_90; // sfix22_En32
  wire signed [32:0] product_phase1_47; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_1; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_2; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_3; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_4; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_5; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_6; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_7; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_8; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_9; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_10; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_11; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_12; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_13; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_14; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_15; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_16; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_17; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_18; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_19; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_20; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_21; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_22; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_23; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_24; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_25; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_26; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_27; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_28; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_29; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_30; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_31; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_32; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_33; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_34; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_35; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_36; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_37; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_38; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_39; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_40; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_41; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_42; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_43; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_44; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_45; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_46; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_47; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase0_48; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_1; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_2; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_3; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_4; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_5; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_6; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_7; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_8; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_9; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_10; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_11; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_12; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_13; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_14; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_15; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_16; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_17; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_18; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_19; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_20; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_21; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_22; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_23; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_24; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_25; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_26; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_27; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_28; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_29; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_30; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_31; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_32; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_33; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_34; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_35; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_36; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_37; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_38; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_39; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_40; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_41; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_42; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_43; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_44; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_45; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_46; // sfix33_En32
  reg  signed [32:0] product_pipeline_phase1_47; // sfix33_En32
  wire signed [34:0] quantized_sum; // sfix35_En32
  wire signed [34:0] sumvector1 [0:47] ; // sfix35_En32
  wire signed [34:0] add_signext; // sfix35_En32
  wire signed [34:0] add_signext_1; // sfix35_En32
  wire signed [35:0] add_temp; // sfix36_En32
  wire signed [32:0] add_signext_2; // sfix33_En32
  wire signed [32:0] add_signext_3; // sfix33_En32
  wire signed [33:0] add_temp_1; // sfix34_En32
  wire signed [32:0] add_signext_4; // sfix33_En32
  wire signed [32:0] add_signext_5; // sfix33_En32
  wire signed [33:0] add_temp_2; // sfix34_En32
  wire signed [32:0] add_signext_6; // sfix33_En32
  wire signed [32:0] add_signext_7; // sfix33_En32
  wire signed [33:0] add_temp_3; // sfix34_En32
  wire signed [32:0] add_signext_8; // sfix33_En32
  wire signed [32:0] add_signext_9; // sfix33_En32
  wire signed [33:0] add_temp_4; // sfix34_En32
  wire signed [32:0] add_signext_10; // sfix33_En32
  wire signed [32:0] add_signext_11; // sfix33_En32
  wire signed [33:0] add_temp_5; // sfix34_En32
  wire signed [32:0] add_signext_12; // sfix33_En32
  wire signed [32:0] add_signext_13; // sfix33_En32
  wire signed [33:0] add_temp_6; // sfix34_En32
  wire signed [32:0] add_signext_14; // sfix33_En32
  wire signed [32:0] add_signext_15; // sfix33_En32
  wire signed [33:0] add_temp_7; // sfix34_En32
  wire signed [32:0] add_signext_16; // sfix33_En32
  wire signed [32:0] add_signext_17; // sfix33_En32
  wire signed [33:0] add_temp_8; // sfix34_En32
  wire signed [32:0] add_signext_18; // sfix33_En32
  wire signed [32:0] add_signext_19; // sfix33_En32
  wire signed [33:0] add_temp_9; // sfix34_En32
  wire signed [32:0] add_signext_20; // sfix33_En32
  wire signed [32:0] add_signext_21; // sfix33_En32
  wire signed [33:0] add_temp_10; // sfix34_En32
  wire signed [32:0] add_signext_22; // sfix33_En32
  wire signed [32:0] add_signext_23; // sfix33_En32
  wire signed [33:0] add_temp_11; // sfix34_En32
  wire signed [32:0] add_signext_24; // sfix33_En32
  wire signed [32:0] add_signext_25; // sfix33_En32
  wire signed [33:0] add_temp_12; // sfix34_En32
  wire signed [32:0] add_signext_26; // sfix33_En32
  wire signed [32:0] add_signext_27; // sfix33_En32
  wire signed [33:0] add_temp_13; // sfix34_En32
  wire signed [32:0] add_signext_28; // sfix33_En32
  wire signed [32:0] add_signext_29; // sfix33_En32
  wire signed [33:0] add_temp_14; // sfix34_En32
  wire signed [32:0] add_signext_30; // sfix33_En32
  wire signed [32:0] add_signext_31; // sfix33_En32
  wire signed [33:0] add_temp_15; // sfix34_En32
  wire signed [32:0] add_signext_32; // sfix33_En32
  wire signed [32:0] add_signext_33; // sfix33_En32
  wire signed [33:0] add_temp_16; // sfix34_En32
  wire signed [32:0] add_signext_34; // sfix33_En32
  wire signed [32:0] add_signext_35; // sfix33_En32
  wire signed [33:0] add_temp_17; // sfix34_En32
  wire signed [32:0] add_signext_36; // sfix33_En32
  wire signed [32:0] add_signext_37; // sfix33_En32
  wire signed [33:0] add_temp_18; // sfix34_En32
  wire signed [32:0] add_signext_38; // sfix33_En32
  wire signed [32:0] add_signext_39; // sfix33_En32
  wire signed [33:0] add_temp_19; // sfix34_En32
  wire signed [32:0] add_signext_40; // sfix33_En32
  wire signed [32:0] add_signext_41; // sfix33_En32
  wire signed [33:0] add_temp_20; // sfix34_En32
  wire signed [32:0] add_signext_42; // sfix33_En32
  wire signed [32:0] add_signext_43; // sfix33_En32
  wire signed [33:0] add_temp_21; // sfix34_En32
  wire signed [32:0] add_signext_44; // sfix33_En32
  wire signed [32:0] add_signext_45; // sfix33_En32
  wire signed [33:0] add_temp_22; // sfix34_En32
  wire signed [32:0] add_signext_46; // sfix33_En32
  wire signed [32:0] add_signext_47; // sfix33_En32
  wire signed [33:0] add_temp_23; // sfix34_En32
  wire signed [32:0] add_signext_48; // sfix33_En32
  wire signed [32:0] add_signext_49; // sfix33_En32
  wire signed [33:0] add_temp_24; // sfix34_En32
  wire signed [32:0] add_signext_50; // sfix33_En32
  wire signed [32:0] add_signext_51; // sfix33_En32
  wire signed [33:0] add_temp_25; // sfix34_En32
  wire signed [32:0] add_signext_52; // sfix33_En32
  wire signed [32:0] add_signext_53; // sfix33_En32
  wire signed [33:0] add_temp_26; // sfix34_En32
  wire signed [32:0] add_signext_54; // sfix33_En32
  wire signed [32:0] add_signext_55; // sfix33_En32
  wire signed [33:0] add_temp_27; // sfix34_En32
  wire signed [32:0] add_signext_56; // sfix33_En32
  wire signed [32:0] add_signext_57; // sfix33_En32
  wire signed [33:0] add_temp_28; // sfix34_En32
  wire signed [32:0] add_signext_58; // sfix33_En32
  wire signed [32:0] add_signext_59; // sfix33_En32
  wire signed [33:0] add_temp_29; // sfix34_En32
  wire signed [32:0] add_signext_60; // sfix33_En32
  wire signed [32:0] add_signext_61; // sfix33_En32
  wire signed [33:0] add_temp_30; // sfix34_En32
  wire signed [32:0] add_signext_62; // sfix33_En32
  wire signed [32:0] add_signext_63; // sfix33_En32
  wire signed [33:0] add_temp_31; // sfix34_En32
  wire signed [32:0] add_signext_64; // sfix33_En32
  wire signed [32:0] add_signext_65; // sfix33_En32
  wire signed [33:0] add_temp_32; // sfix34_En32
  wire signed [32:0] add_signext_66; // sfix33_En32
  wire signed [32:0] add_signext_67; // sfix33_En32
  wire signed [33:0] add_temp_33; // sfix34_En32
  wire signed [32:0] add_signext_68; // sfix33_En32
  wire signed [32:0] add_signext_69; // sfix33_En32
  wire signed [33:0] add_temp_34; // sfix34_En32
  wire signed [32:0] add_signext_70; // sfix33_En32
  wire signed [32:0] add_signext_71; // sfix33_En32
  wire signed [33:0] add_temp_35; // sfix34_En32
  wire signed [32:0] add_signext_72; // sfix33_En32
  wire signed [32:0] add_signext_73; // sfix33_En32
  wire signed [33:0] add_temp_36; // sfix34_En32
  wire signed [32:0] add_signext_74; // sfix33_En32
  wire signed [32:0] add_signext_75; // sfix33_En32
  wire signed [33:0] add_temp_37; // sfix34_En32
  wire signed [32:0] add_signext_76; // sfix33_En32
  wire signed [32:0] add_signext_77; // sfix33_En32
  wire signed [33:0] add_temp_38; // sfix34_En32
  wire signed [32:0] add_signext_78; // sfix33_En32
  wire signed [32:0] add_signext_79; // sfix33_En32
  wire signed [33:0] add_temp_39; // sfix34_En32
  wire signed [32:0] add_signext_80; // sfix33_En32
  wire signed [32:0] add_signext_81; // sfix33_En32
  wire signed [33:0] add_temp_40; // sfix34_En32
  wire signed [32:0] add_signext_82; // sfix33_En32
  wire signed [32:0] add_signext_83; // sfix33_En32
  wire signed [33:0] add_temp_41; // sfix34_En32
  wire signed [32:0] add_signext_84; // sfix33_En32
  wire signed [32:0] add_signext_85; // sfix33_En32
  wire signed [33:0] add_temp_42; // sfix34_En32
  wire signed [32:0] add_signext_86; // sfix33_En32
  wire signed [32:0] add_signext_87; // sfix33_En32
  wire signed [33:0] add_temp_43; // sfix34_En32
  wire signed [32:0] add_signext_88; // sfix33_En32
  wire signed [32:0] add_signext_89; // sfix33_En32
  wire signed [33:0] add_temp_44; // sfix34_En32
  wire signed [32:0] add_signext_90; // sfix33_En32
  wire signed [32:0] add_signext_91; // sfix33_En32
  wire signed [33:0] add_temp_45; // sfix34_En32
  wire signed [32:0] add_signext_92; // sfix33_En32
  wire signed [32:0] add_signext_93; // sfix33_En32
  wire signed [33:0] add_temp_46; // sfix34_En32
  reg  signed [34:0] sumdelay_pipeline1 [0:47] ; // sfix35_En32
  wire signed [34:0] sumvector2 [0:23] ; // sfix35_En32
  wire signed [34:0] add_signext_94; // sfix35_En32
  wire signed [34:0] add_signext_95; // sfix35_En32
  wire signed [35:0] add_temp_47; // sfix36_En32
  wire signed [34:0] add_signext_96; // sfix35_En32
  wire signed [34:0] add_signext_97; // sfix35_En32
  wire signed [35:0] add_temp_48; // sfix36_En32
  wire signed [34:0] add_signext_98; // sfix35_En32
  wire signed [34:0] add_signext_99; // sfix35_En32
  wire signed [35:0] add_temp_49; // sfix36_En32
  wire signed [34:0] add_signext_100; // sfix35_En32
  wire signed [34:0] add_signext_101; // sfix35_En32
  wire signed [35:0] add_temp_50; // sfix36_En32
  wire signed [34:0] add_signext_102; // sfix35_En32
  wire signed [34:0] add_signext_103; // sfix35_En32
  wire signed [35:0] add_temp_51; // sfix36_En32
  wire signed [34:0] add_signext_104; // sfix35_En32
  wire signed [34:0] add_signext_105; // sfix35_En32
  wire signed [35:0] add_temp_52; // sfix36_En32
  wire signed [34:0] add_signext_106; // sfix35_En32
  wire signed [34:0] add_signext_107; // sfix35_En32
  wire signed [35:0] add_temp_53; // sfix36_En32
  wire signed [34:0] add_signext_108; // sfix35_En32
  wire signed [34:0] add_signext_109; // sfix35_En32
  wire signed [35:0] add_temp_54; // sfix36_En32
  wire signed [34:0] add_signext_110; // sfix35_En32
  wire signed [34:0] add_signext_111; // sfix35_En32
  wire signed [35:0] add_temp_55; // sfix36_En32
  wire signed [34:0] add_signext_112; // sfix35_En32
  wire signed [34:0] add_signext_113; // sfix35_En32
  wire signed [35:0] add_temp_56; // sfix36_En32
  wire signed [34:0] add_signext_114; // sfix35_En32
  wire signed [34:0] add_signext_115; // sfix35_En32
  wire signed [35:0] add_temp_57; // sfix36_En32
  wire signed [34:0] add_signext_116; // sfix35_En32
  wire signed [34:0] add_signext_117; // sfix35_En32
  wire signed [35:0] add_temp_58; // sfix36_En32
  wire signed [34:0] add_signext_118; // sfix35_En32
  wire signed [34:0] add_signext_119; // sfix35_En32
  wire signed [35:0] add_temp_59; // sfix36_En32
  wire signed [34:0] add_signext_120; // sfix35_En32
  wire signed [34:0] add_signext_121; // sfix35_En32
  wire signed [35:0] add_temp_60; // sfix36_En32
  wire signed [34:0] add_signext_122; // sfix35_En32
  wire signed [34:0] add_signext_123; // sfix35_En32
  wire signed [35:0] add_temp_61; // sfix36_En32
  wire signed [34:0] add_signext_124; // sfix35_En32
  wire signed [34:0] add_signext_125; // sfix35_En32
  wire signed [35:0] add_temp_62; // sfix36_En32
  wire signed [34:0] add_signext_126; // sfix35_En32
  wire signed [34:0] add_signext_127; // sfix35_En32
  wire signed [35:0] add_temp_63; // sfix36_En32
  wire signed [34:0] add_signext_128; // sfix35_En32
  wire signed [34:0] add_signext_129; // sfix35_En32
  wire signed [35:0] add_temp_64; // sfix36_En32
  wire signed [34:0] add_signext_130; // sfix35_En32
  wire signed [34:0] add_signext_131; // sfix35_En32
  wire signed [35:0] add_temp_65; // sfix36_En32
  wire signed [34:0] add_signext_132; // sfix35_En32
  wire signed [34:0] add_signext_133; // sfix35_En32
  wire signed [35:0] add_temp_66; // sfix36_En32
  wire signed [34:0] add_signext_134; // sfix35_En32
  wire signed [34:0] add_signext_135; // sfix35_En32
  wire signed [35:0] add_temp_67; // sfix36_En32
  wire signed [34:0] add_signext_136; // sfix35_En32
  wire signed [34:0] add_signext_137; // sfix35_En32
  wire signed [35:0] add_temp_68; // sfix36_En32
  wire signed [34:0] add_signext_138; // sfix35_En32
  wire signed [34:0] add_signext_139; // sfix35_En32
  wire signed [35:0] add_temp_69; // sfix36_En32
  wire signed [34:0] add_signext_140; // sfix35_En32
  wire signed [34:0] add_signext_141; // sfix35_En32
  wire signed [35:0] add_temp_70; // sfix36_En32
  reg  signed [34:0] sumdelay_pipeline2 [0:23] ; // sfix35_En32
  wire signed [34:0] sumvector3 [0:11] ; // sfix35_En32
  wire signed [34:0] add_signext_142; // sfix35_En32
  wire signed [34:0] add_signext_143; // sfix35_En32
  wire signed [35:0] add_temp_71; // sfix36_En32
  wire signed [34:0] add_signext_144; // sfix35_En32
  wire signed [34:0] add_signext_145; // sfix35_En32
  wire signed [35:0] add_temp_72; // sfix36_En32
  wire signed [34:0] add_signext_146; // sfix35_En32
  wire signed [34:0] add_signext_147; // sfix35_En32
  wire signed [35:0] add_temp_73; // sfix36_En32
  wire signed [34:0] add_signext_148; // sfix35_En32
  wire signed [34:0] add_signext_149; // sfix35_En32
  wire signed [35:0] add_temp_74; // sfix36_En32
  wire signed [34:0] add_signext_150; // sfix35_En32
  wire signed [34:0] add_signext_151; // sfix35_En32
  wire signed [35:0] add_temp_75; // sfix36_En32
  wire signed [34:0] add_signext_152; // sfix35_En32
  wire signed [34:0] add_signext_153; // sfix35_En32
  wire signed [35:0] add_temp_76; // sfix36_En32
  wire signed [34:0] add_signext_154; // sfix35_En32
  wire signed [34:0] add_signext_155; // sfix35_En32
  wire signed [35:0] add_temp_77; // sfix36_En32
  wire signed [34:0] add_signext_156; // sfix35_En32
  wire signed [34:0] add_signext_157; // sfix35_En32
  wire signed [35:0] add_temp_78; // sfix36_En32
  wire signed [34:0] add_signext_158; // sfix35_En32
  wire signed [34:0] add_signext_159; // sfix35_En32
  wire signed [35:0] add_temp_79; // sfix36_En32
  wire signed [34:0] add_signext_160; // sfix35_En32
  wire signed [34:0] add_signext_161; // sfix35_En32
  wire signed [35:0] add_temp_80; // sfix36_En32
  wire signed [34:0] add_signext_162; // sfix35_En32
  wire signed [34:0] add_signext_163; // sfix35_En32
  wire signed [35:0] add_temp_81; // sfix36_En32
  wire signed [34:0] add_signext_164; // sfix35_En32
  wire signed [34:0] add_signext_165; // sfix35_En32
  wire signed [35:0] add_temp_82; // sfix36_En32
  reg  signed [34:0] sumdelay_pipeline3 [0:11] ; // sfix35_En32
  wire signed [34:0] sumvector4 [0:5] ; // sfix35_En32
  wire signed [34:0] add_signext_166; // sfix35_En32
  wire signed [34:0] add_signext_167; // sfix35_En32
  wire signed [35:0] add_temp_83; // sfix36_En32
  wire signed [34:0] add_signext_168; // sfix35_En32
  wire signed [34:0] add_signext_169; // sfix35_En32
  wire signed [35:0] add_temp_84; // sfix36_En32
  wire signed [34:0] add_signext_170; // sfix35_En32
  wire signed [34:0] add_signext_171; // sfix35_En32
  wire signed [35:0] add_temp_85; // sfix36_En32
  wire signed [34:0] add_signext_172; // sfix35_En32
  wire signed [34:0] add_signext_173; // sfix35_En32
  wire signed [35:0] add_temp_86; // sfix36_En32
  wire signed [34:0] add_signext_174; // sfix35_En32
  wire signed [34:0] add_signext_175; // sfix35_En32
  wire signed [35:0] add_temp_87; // sfix36_En32
  wire signed [34:0] add_signext_176; // sfix35_En32
  wire signed [34:0] add_signext_177; // sfix35_En32
  wire signed [35:0] add_temp_88; // sfix36_En32
  reg  signed [34:0] sumdelay_pipeline4 [0:5] ; // sfix35_En32
  wire signed [34:0] sumvector5 [0:2] ; // sfix35_En32
  wire signed [34:0] add_signext_178; // sfix35_En32
  wire signed [34:0] add_signext_179; // sfix35_En32
  wire signed [35:0] add_temp_89; // sfix36_En32
  wire signed [34:0] add_signext_180; // sfix35_En32
  wire signed [34:0] add_signext_181; // sfix35_En32
  wire signed [35:0] add_temp_90; // sfix36_En32
  wire signed [34:0] add_signext_182; // sfix35_En32
  wire signed [34:0] add_signext_183; // sfix35_En32
  wire signed [35:0] add_temp_91; // sfix36_En32
  reg  signed [34:0] sumdelay_pipeline5 [0:2] ; // sfix35_En32
  wire signed [34:0] sumvector6 [0:1] ; // sfix35_En32
  wire signed [34:0] add_signext_184; // sfix35_En32
  wire signed [34:0] add_signext_185; // sfix35_En32
  wire signed [35:0] add_temp_92; // sfix36_En32
  reg  signed [34:0] sumdelay_pipeline6 [0:1] ; // sfix35_En32
  wire signed [34:0] sum7; // sfix35_En32
  wire signed [34:0] add_signext_186; // sfix35_En32
  wire signed [34:0] add_signext_187; // sfix35_En32
  wire signed [35:0] add_temp_93; // sfix36_En32
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  reg  ce_delayline9; // boolean
  reg  ce_delayline10; // boolean
  reg  ce_delayline11; // boolean
  reg  ce_delayline12; // boolean
  reg  ce_delayline13; // boolean
  reg  ce_delayline14; // boolean
  wire ce_gated; // boolean
  reg  signed [34:0] output_register; // sfix35_En32

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
        input_pipeline_phase0[8] <= 0;
        input_pipeline_phase0[9] <= 0;
        input_pipeline_phase0[10] <= 0;
        input_pipeline_phase0[11] <= 0;
        input_pipeline_phase0[12] <= 0;
        input_pipeline_phase0[13] <= 0;
        input_pipeline_phase0[14] <= 0;
        input_pipeline_phase0[15] <= 0;
        input_pipeline_phase0[16] <= 0;
        input_pipeline_phase0[17] <= 0;
        input_pipeline_phase0[18] <= 0;
        input_pipeline_phase0[19] <= 0;
        input_pipeline_phase0[20] <= 0;
        input_pipeline_phase0[21] <= 0;
        input_pipeline_phase0[22] <= 0;
        input_pipeline_phase0[23] <= 0;
        input_pipeline_phase0[24] <= 0;
        input_pipeline_phase0[25] <= 0;
        input_pipeline_phase0[26] <= 0;
        input_pipeline_phase0[27] <= 0;
        input_pipeline_phase0[28] <= 0;
        input_pipeline_phase0[29] <= 0;
        input_pipeline_phase0[30] <= 0;
        input_pipeline_phase0[31] <= 0;
        input_pipeline_phase0[32] <= 0;
        input_pipeline_phase0[33] <= 0;
        input_pipeline_phase0[34] <= 0;
        input_pipeline_phase0[35] <= 0;
        input_pipeline_phase0[36] <= 0;
        input_pipeline_phase0[37] <= 0;
        input_pipeline_phase0[38] <= 0;
        input_pipeline_phase0[39] <= 0;
        input_pipeline_phase0[40] <= 0;
        input_pipeline_phase0[41] <= 0;
        input_pipeline_phase0[42] <= 0;
        input_pipeline_phase0[43] <= 0;
        input_pipeline_phase0[44] <= 0;
        input_pipeline_phase0[45] <= 0;
        input_pipeline_phase0[46] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
          input_pipeline_phase0[8] <= input_pipeline_phase0[7];
          input_pipeline_phase0[9] <= input_pipeline_phase0[8];
          input_pipeline_phase0[10] <= input_pipeline_phase0[9];
          input_pipeline_phase0[11] <= input_pipeline_phase0[10];
          input_pipeline_phase0[12] <= input_pipeline_phase0[11];
          input_pipeline_phase0[13] <= input_pipeline_phase0[12];
          input_pipeline_phase0[14] <= input_pipeline_phase0[13];
          input_pipeline_phase0[15] <= input_pipeline_phase0[14];
          input_pipeline_phase0[16] <= input_pipeline_phase0[15];
          input_pipeline_phase0[17] <= input_pipeline_phase0[16];
          input_pipeline_phase0[18] <= input_pipeline_phase0[17];
          input_pipeline_phase0[19] <= input_pipeline_phase0[18];
          input_pipeline_phase0[20] <= input_pipeline_phase0[19];
          input_pipeline_phase0[21] <= input_pipeline_phase0[20];
          input_pipeline_phase0[22] <= input_pipeline_phase0[21];
          input_pipeline_phase0[23] <= input_pipeline_phase0[22];
          input_pipeline_phase0[24] <= input_pipeline_phase0[23];
          input_pipeline_phase0[25] <= input_pipeline_phase0[24];
          input_pipeline_phase0[26] <= input_pipeline_phase0[25];
          input_pipeline_phase0[27] <= input_pipeline_phase0[26];
          input_pipeline_phase0[28] <= input_pipeline_phase0[27];
          input_pipeline_phase0[29] <= input_pipeline_phase0[28];
          input_pipeline_phase0[30] <= input_pipeline_phase0[29];
          input_pipeline_phase0[31] <= input_pipeline_phase0[30];
          input_pipeline_phase0[32] <= input_pipeline_phase0[31];
          input_pipeline_phase0[33] <= input_pipeline_phase0[32];
          input_pipeline_phase0[34] <= input_pipeline_phase0[33];
          input_pipeline_phase0[35] <= input_pipeline_phase0[34];
          input_pipeline_phase0[36] <= input_pipeline_phase0[35];
          input_pipeline_phase0[37] <= input_pipeline_phase0[36];
          input_pipeline_phase0[38] <= input_pipeline_phase0[37];
          input_pipeline_phase0[39] <= input_pipeline_phase0[38];
          input_pipeline_phase0[40] <= input_pipeline_phase0[39];
          input_pipeline_phase0[41] <= input_pipeline_phase0[40];
          input_pipeline_phase0[42] <= input_pipeline_phase0[41];
          input_pipeline_phase0[43] <= input_pipeline_phase0[42];
          input_pipeline_phase0[44] <= input_pipeline_phase0[43];
          input_pipeline_phase0[45] <= input_pipeline_phase0[44];
          input_pipeline_phase0[46] <= input_pipeline_phase0[45];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
        input_pipeline_phase1[10] <= 0;
        input_pipeline_phase1[11] <= 0;
        input_pipeline_phase1[12] <= 0;
        input_pipeline_phase1[13] <= 0;
        input_pipeline_phase1[14] <= 0;
        input_pipeline_phase1[15] <= 0;
        input_pipeline_phase1[16] <= 0;
        input_pipeline_phase1[17] <= 0;
        input_pipeline_phase1[18] <= 0;
        input_pipeline_phase1[19] <= 0;
        input_pipeline_phase1[20] <= 0;
        input_pipeline_phase1[21] <= 0;
        input_pipeline_phase1[22] <= 0;
        input_pipeline_phase1[23] <= 0;
        input_pipeline_phase1[24] <= 0;
        input_pipeline_phase1[25] <= 0;
        input_pipeline_phase1[26] <= 0;
        input_pipeline_phase1[27] <= 0;
        input_pipeline_phase1[28] <= 0;
        input_pipeline_phase1[29] <= 0;
        input_pipeline_phase1[30] <= 0;
        input_pipeline_phase1[31] <= 0;
        input_pipeline_phase1[32] <= 0;
        input_pipeline_phase1[33] <= 0;
        input_pipeline_phase1[34] <= 0;
        input_pipeline_phase1[35] <= 0;
        input_pipeline_phase1[36] <= 0;
        input_pipeline_phase1[37] <= 0;
        input_pipeline_phase1[38] <= 0;
        input_pipeline_phase1[39] <= 0;
        input_pipeline_phase1[40] <= 0;
        input_pipeline_phase1[41] <= 0;
        input_pipeline_phase1[42] <= 0;
        input_pipeline_phase1[43] <= 0;
        input_pipeline_phase1[44] <= 0;
        input_pipeline_phase1[45] <= 0;
        input_pipeline_phase1[46] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
          input_pipeline_phase1[10] <= input_pipeline_phase1[9];
          input_pipeline_phase1[11] <= input_pipeline_phase1[10];
          input_pipeline_phase1[12] <= input_pipeline_phase1[11];
          input_pipeline_phase1[13] <= input_pipeline_phase1[12];
          input_pipeline_phase1[14] <= input_pipeline_phase1[13];
          input_pipeline_phase1[15] <= input_pipeline_phase1[14];
          input_pipeline_phase1[16] <= input_pipeline_phase1[15];
          input_pipeline_phase1[17] <= input_pipeline_phase1[16];
          input_pipeline_phase1[18] <= input_pipeline_phase1[17];
          input_pipeline_phase1[19] <= input_pipeline_phase1[18];
          input_pipeline_phase1[20] <= input_pipeline_phase1[19];
          input_pipeline_phase1[21] <= input_pipeline_phase1[20];
          input_pipeline_phase1[22] <= input_pipeline_phase1[21];
          input_pipeline_phase1[23] <= input_pipeline_phase1[22];
          input_pipeline_phase1[24] <= input_pipeline_phase1[23];
          input_pipeline_phase1[25] <= input_pipeline_phase1[24];
          input_pipeline_phase1[26] <= input_pipeline_phase1[25];
          input_pipeline_phase1[27] <= input_pipeline_phase1[26];
          input_pipeline_phase1[28] <= input_pipeline_phase1[27];
          input_pipeline_phase1[29] <= input_pipeline_phase1[28];
          input_pipeline_phase1[30] <= input_pipeline_phase1[29];
          input_pipeline_phase1[31] <= input_pipeline_phase1[30];
          input_pipeline_phase1[32] <= input_pipeline_phase1[31];
          input_pipeline_phase1[33] <= input_pipeline_phase1[32];
          input_pipeline_phase1[34] <= input_pipeline_phase1[33];
          input_pipeline_phase1[35] <= input_pipeline_phase1[34];
          input_pipeline_phase1[36] <= input_pipeline_phase1[35];
          input_pipeline_phase1[37] <= input_pipeline_phase1[36];
          input_pipeline_phase1[38] <= input_pipeline_phase1[37];
          input_pipeline_phase1[39] <= input_pipeline_phase1[38];
          input_pipeline_phase1[40] <= input_pipeline_phase1[39];
          input_pipeline_phase1[41] <= input_pipeline_phase1[40];
          input_pipeline_phase1[42] <= input_pipeline_phase1[41];
          input_pipeline_phase1[43] <= input_pipeline_phase1[42];
          input_pipeline_phase1[44] <= input_pipeline_phase1[43];
          input_pipeline_phase1[45] <= input_pipeline_phase1[44];
          input_pipeline_phase1[46] <= input_pipeline_phase1[45];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mulcsd_temp = - (
        $signed({input_register, 3'b000}) -
        $signed({input_register, 1'b0}));
  assign product_phase0_1 = $signed({{13{mulcsd_temp[19]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[0], 5'b00000}) +
        $signed({input_pipeline_phase0[0], 2'b00}) +
        input_pipeline_phase0[0];
  assign product_phase0_2 = $signed({{11{mulcsd_temp_1[21]}}, mulcsd_temp_1});

  assign mulcsd_temp_2 = - (
        $signed({input_pipeline_phase0[1], 5'b00000}) +
        $signed({input_pipeline_phase0[1], 2'b00}) +
        input_pipeline_phase0[1]);
  assign product_phase0_3 = $signed({{11{mulcsd_temp_2[21]}}, mulcsd_temp_2});

  assign product_phase0_4 = $signed({input_pipeline_phase0[2][15:0], 6'b000000});

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase0[3], 7'b0000000}) -
        $signed({input_pipeline_phase0[3], 5'b00000}) +
        $signed({input_pipeline_phase0[3], 2'b00}) -
        input_pipeline_phase0[3]);
  assign product_phase0_5 = $signed({{9{mulcsd_temp_3[23]}}, mulcsd_temp_3});

  assign mulcsd_temp_4 = 
        $signed({input_pipeline_phase0[4], 7'b0000000}) +
        $signed({input_pipeline_phase0[4], 4'b0000}) +
        $signed({input_pipeline_phase0[4], 2'b00}) +
        input_pipeline_phase0[4];
  assign product_phase0_6 = $signed({{9{mulcsd_temp_4[23]}}, mulcsd_temp_4});

  assign mulcsd_temp_5 = - (
        $signed({input_pipeline_phase0[5], 8'b00000000}) -
        $signed({input_pipeline_phase0[5], 6'b000000}) +
        $signed({input_pipeline_phase0[5], 5'b00000}) -
        $signed({input_pipeline_phase0[5], 2'b00}));
  assign product_phase0_7 = $signed({{8{mulcsd_temp_5[24]}}, mulcsd_temp_5});

  assign mulcsd_temp_6 = 
        $signed({input_pipeline_phase0[6], 8'b00000000}) +
        $signed({input_pipeline_phase0[6], 6'b000000}) -
        $signed({input_pipeline_phase0[6], 2'b00}) +
        input_pipeline_phase0[6];
  assign product_phase0_8 = $signed({{8{mulcsd_temp_6[24]}}, mulcsd_temp_6});

  assign mulcsd_temp_7 = - (
        $signed({input_pipeline_phase0[7], 9'b000000000}) -
        $signed({input_pipeline_phase0[7], 7'b0000000}) +
        $signed({input_pipeline_phase0[7], 6'b000000}) -
        input_pipeline_phase0[7]);
  assign product_phase0_9 = $signed({{7{mulcsd_temp_7[25]}}, mulcsd_temp_7});

  assign mulcsd_temp_8 = 
        $signed({input_pipeline_phase0[8], 9'b000000000}) +
        $signed({input_pipeline_phase0[8], 7'b0000000}) -
        $signed({input_pipeline_phase0[8], 5'b00000}) +
        $signed({input_pipeline_phase0[8], 3'b000}) +
        $signed({input_pipeline_phase0[8], 1'b0});
  assign product_phase0_10 = $signed({{7{mulcsd_temp_8[25]}}, mulcsd_temp_8});

  assign mulcsd_temp_9 = - (
        $signed({input_pipeline_phase0[9], 10'b0000000000}) -
        $signed({input_pipeline_phase0[9], 8'b00000000}) +
        $signed({input_pipeline_phase0[9], 6'b000000}) +
        $signed({input_pipeline_phase0[9], 3'b000}) +
        input_pipeline_phase0[9]);
  assign product_phase0_11 = $signed({{6{mulcsd_temp_9[26]}}, mulcsd_temp_9});

  assign mulcsd_temp_10 = 
        $signed({input_pipeline_phase0[10], 10'b0000000000}) +
        $signed({input_pipeline_phase0[10], 7'b0000000}) -
        $signed({input_pipeline_phase0[10], 5'b00000}) +
        $signed({input_pipeline_phase0[10], 3'b000}) -
        input_pipeline_phase0[10];
  assign product_phase0_12 = $signed({{6{mulcsd_temp_10[26]}}, mulcsd_temp_10});

  assign mulcsd_temp_11 = - (
        $signed({input_pipeline_phase0[11], 10'b0000000000}) +
        $signed({input_pipeline_phase0[11], 9'b000000000}) -
        $signed({input_pipeline_phase0[11], 6'b000000}) +
        $signed({input_pipeline_phase0[11], 4'b0000}) +
        input_pipeline_phase0[11]);
  assign product_phase0_13 = $signed({{6{mulcsd_temp_11[26]}}, mulcsd_temp_11});

  assign mulcsd_temp_12 = 
        $signed({input_pipeline_phase0[12], 11'b00000000000}) -
        $signed({input_pipeline_phase0[12], 7'b0000000}) +
        $signed({input_pipeline_phase0[12], 5'b00000}) -
        $signed({input_pipeline_phase0[12], 3'b000}) +
        $signed({input_pipeline_phase0[12], 1'b0});
  assign product_phase0_14 = $signed({{5{mulcsd_temp_12[27]}}, mulcsd_temp_12});

  assign mulcsd_temp_13 = - (
        $signed({input_pipeline_phase0[13], 11'b00000000000}) +
        $signed({input_pipeline_phase0[13], 9'b000000000}) -
        $signed({input_pipeline_phase0[13], 6'b000000}) +
        $signed({input_pipeline_phase0[13], 4'b0000}) +
        $signed({input_pipeline_phase0[13], 3'b000}) -
        input_pipeline_phase0[13]);
  assign product_phase0_15 = $signed({{5{mulcsd_temp_13[27]}}, mulcsd_temp_13});

  assign mulcsd_temp_14 = 
        $signed({input_pipeline_phase0[14], 12'b000000000000}) -
        $signed({input_pipeline_phase0[14], 10'b0000000000}) +
        $signed({input_pipeline_phase0[14], 7'b0000000}) +
        $signed({input_pipeline_phase0[14], 5'b00000}) +
        $signed({input_pipeline_phase0[14], 3'b000}) -
        input_pipeline_phase0[14];
  assign product_phase0_16 = $signed({{4{mulcsd_temp_14[28]}}, mulcsd_temp_14});

  assign mulcsd_temp_15 = - (
        $signed({input_pipeline_phase0[15], 12'b000000000000}) +
        $signed({input_pipeline_phase0[15], 6'b000000}) -
        $signed({input_pipeline_phase0[15], 4'b0000}) +
        $signed({input_pipeline_phase0[15], 2'b00}) +
        input_pipeline_phase0[15]);
  assign product_phase0_17 = $signed({{4{mulcsd_temp_15[28]}}, mulcsd_temp_15});

  assign mulcsd_temp_16 = 
        $signed({input_pipeline_phase0[16], 12'b000000000000}) +
        $signed({input_pipeline_phase0[16], 10'b0000000000}) +
        $signed({input_pipeline_phase0[16], 8'b00000000}) -
        $signed({input_pipeline_phase0[16], 6'b000000}) +
        $signed({input_pipeline_phase0[16], 3'b000}) -
        $signed({input_pipeline_phase0[16], 1'b0});
  assign product_phase0_18 = $signed({{4{mulcsd_temp_16[28]}}, mulcsd_temp_16});

  assign mulcsd_temp_17 = - (
        $signed({input_pipeline_phase0[17], 13'b0000000000000}) -
        $signed({input_pipeline_phase0[17], 11'b00000000000}) +
        $signed({input_pipeline_phase0[17], 9'b000000000}) +
        $signed({input_pipeline_phase0[17], 8'b00000000}) -
        $signed({input_pipeline_phase0[17], 6'b000000}) +
        $signed({input_pipeline_phase0[17], 3'b000}) +
        $signed({input_pipeline_phase0[17], 2'b00}) -
        input_pipeline_phase0[17]);
  assign product_phase0_19 = $signed({{3{mulcsd_temp_17[29]}}, mulcsd_temp_17});

  assign mulcsd_temp_18 = 
        $signed({input_pipeline_phase0[18], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[18], 10'b0000000000}) -
        $signed({input_pipeline_phase0[18], 8'b00000000}) +
        $signed({input_pipeline_phase0[18], 4'b0000}) +
        $signed({input_pipeline_phase0[18], 2'b00}) -
        input_pipeline_phase0[18];
  assign product_phase0_20 = $signed({{3{mulcsd_temp_18[29]}}, mulcsd_temp_18});

  assign mulcsd_temp_19 = - (
        $signed({input_pipeline_phase0[19], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[19], 12'b000000000000}) -
        $signed({input_pipeline_phase0[19], 8'b00000000}) +
        $signed({input_pipeline_phase0[19], 6'b000000}) -
        $signed({input_pipeline_phase0[19], 2'b00}));
  assign product_phase0_21 = $signed({{3{mulcsd_temp_19[29]}}, mulcsd_temp_19});

  assign mulcsd_temp_20 = 
        $signed({input_pipeline_phase0[20], 14'b00000000000000}) +
        $signed({input_pipeline_phase0[20], 10'b0000000000}) -
        $signed({input_pipeline_phase0[20], 8'b00000000}) +
        $signed({input_pipeline_phase0[20], 3'b000}) +
        $signed({input_pipeline_phase0[20], 1'b0});
  assign product_phase0_22 = $signed({{2{mulcsd_temp_20[30]}}, mulcsd_temp_20});

  assign mulcsd_temp_21 = - (
        $signed({input_pipeline_phase0[21], 15'b000000000000000}) -
        $signed({input_pipeline_phase0[21], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[21], 11'b00000000000}) +
        $signed({input_pipeline_phase0[21], 8'b00000000}) -
        $signed({input_pipeline_phase0[21], 6'b000000}) +
        $signed({input_pipeline_phase0[21], 5'b00000}) -
        $signed({input_pipeline_phase0[21], 3'b000}) +
        $signed({input_pipeline_phase0[21], 2'b00}) -
        input_pipeline_phase0[21]);
  assign product_phase0_23 = $signed({{1{mulcsd_temp_21[31]}}, mulcsd_temp_21});

  assign mulcsd_temp_22 = 
        $signed({input_pipeline_phase0[22], 16'b0000000000000000}) -
        $signed({input_pipeline_phase0[22], 14'b00000000000000}) +
        $signed({input_pipeline_phase0[22], 8'b00000000}) +
        $signed({input_pipeline_phase0[22], 5'b00000}) -
        $signed({input_pipeline_phase0[22], 3'b000}) +
        input_pipeline_phase0[22];
  assign product_phase0_24 = mulcsd_temp_22;

  assign mulcsd_temp_23 = 
        $signed({input_pipeline_phase0[23], 16'b0000000000000000}) -
        $signed({input_pipeline_phase0[23], 14'b00000000000000}) +
        $signed({input_pipeline_phase0[23], 8'b00000000}) +
        $signed({input_pipeline_phase0[23], 5'b00000}) -
        $signed({input_pipeline_phase0[23], 3'b000}) +
        input_pipeline_phase0[23];
  assign product_phase0_25 = mulcsd_temp_23;

  assign mulcsd_temp_24 = - (
        $signed({input_pipeline_phase0[24], 15'b000000000000000}) -
        $signed({input_pipeline_phase0[24], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[24], 11'b00000000000}) +
        $signed({input_pipeline_phase0[24], 8'b00000000}) -
        $signed({input_pipeline_phase0[24], 6'b000000}) +
        $signed({input_pipeline_phase0[24], 5'b00000}) -
        $signed({input_pipeline_phase0[24], 3'b000}) +
        $signed({input_pipeline_phase0[24], 2'b00}) -
        input_pipeline_phase0[24]);
  assign product_phase0_26 = $signed({{1{mulcsd_temp_24[31]}}, mulcsd_temp_24});

  assign mulcsd_temp_25 = 
        $signed({input_pipeline_phase0[25], 14'b00000000000000}) +
        $signed({input_pipeline_phase0[25], 10'b0000000000}) -
        $signed({input_pipeline_phase0[25], 8'b00000000}) +
        $signed({input_pipeline_phase0[25], 3'b000}) +
        $signed({input_pipeline_phase0[25], 1'b0});
  assign product_phase0_27 = $signed({{2{mulcsd_temp_25[30]}}, mulcsd_temp_25});

  assign mulcsd_temp_26 = - (
        $signed({input_pipeline_phase0[26], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[26], 12'b000000000000}) -
        $signed({input_pipeline_phase0[26], 8'b00000000}) +
        $signed({input_pipeline_phase0[26], 6'b000000}) -
        $signed({input_pipeline_phase0[26], 2'b00}));
  assign product_phase0_28 = $signed({{3{mulcsd_temp_26[29]}}, mulcsd_temp_26});

  assign mulcsd_temp_27 = 
        $signed({input_pipeline_phase0[27], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[27], 10'b0000000000}) -
        $signed({input_pipeline_phase0[27], 8'b00000000}) +
        $signed({input_pipeline_phase0[27], 4'b0000}) +
        $signed({input_pipeline_phase0[27], 2'b00}) -
        input_pipeline_phase0[27];
  assign product_phase0_29 = $signed({{3{mulcsd_temp_27[29]}}, mulcsd_temp_27});

  assign mulcsd_temp_28 = - (
        $signed({input_pipeline_phase0[28], 13'b0000000000000}) -
        $signed({input_pipeline_phase0[28], 11'b00000000000}) +
        $signed({input_pipeline_phase0[28], 9'b000000000}) +
        $signed({input_pipeline_phase0[28], 8'b00000000}) -
        $signed({input_pipeline_phase0[28], 6'b000000}) +
        $signed({input_pipeline_phase0[28], 3'b000}) +
        $signed({input_pipeline_phase0[28], 2'b00}) -
        input_pipeline_phase0[28]);
  assign product_phase0_30 = $signed({{3{mulcsd_temp_28[29]}}, mulcsd_temp_28});

  assign mulcsd_temp_29 = 
        $signed({input_pipeline_phase0[29], 12'b000000000000}) +
        $signed({input_pipeline_phase0[29], 10'b0000000000}) +
        $signed({input_pipeline_phase0[29], 8'b00000000}) -
        $signed({input_pipeline_phase0[29], 6'b000000}) +
        $signed({input_pipeline_phase0[29], 3'b000}) -
        $signed({input_pipeline_phase0[29], 1'b0});
  assign product_phase0_31 = $signed({{4{mulcsd_temp_29[28]}}, mulcsd_temp_29});

  assign mulcsd_temp_30 = - (
        $signed({input_pipeline_phase0[30], 12'b000000000000}) +
        $signed({input_pipeline_phase0[30], 6'b000000}) -
        $signed({input_pipeline_phase0[30], 4'b0000}) +
        $signed({input_pipeline_phase0[30], 2'b00}) +
        input_pipeline_phase0[30]);
  assign product_phase0_32 = $signed({{4{mulcsd_temp_30[28]}}, mulcsd_temp_30});

  assign mulcsd_temp_31 = 
        $signed({input_pipeline_phase0[31], 12'b000000000000}) -
        $signed({input_pipeline_phase0[31], 10'b0000000000}) +
        $signed({input_pipeline_phase0[31], 7'b0000000}) +
        $signed({input_pipeline_phase0[31], 5'b00000}) +
        $signed({input_pipeline_phase0[31], 3'b000}) -
        input_pipeline_phase0[31];
  assign product_phase0_33 = $signed({{4{mulcsd_temp_31[28]}}, mulcsd_temp_31});

  assign mulcsd_temp_32 = - (
        $signed({input_pipeline_phase0[32], 11'b00000000000}) +
        $signed({input_pipeline_phase0[32], 9'b000000000}) -
        $signed({input_pipeline_phase0[32], 6'b000000}) +
        $signed({input_pipeline_phase0[32], 4'b0000}) +
        $signed({input_pipeline_phase0[32], 3'b000}) -
        input_pipeline_phase0[32]);
  assign product_phase0_34 = $signed({{5{mulcsd_temp_32[27]}}, mulcsd_temp_32});

  assign mulcsd_temp_33 = 
        $signed({input_pipeline_phase0[33], 11'b00000000000}) -
        $signed({input_pipeline_phase0[33], 7'b0000000}) +
        $signed({input_pipeline_phase0[33], 5'b00000}) -
        $signed({input_pipeline_phase0[33], 3'b000}) +
        $signed({input_pipeline_phase0[33], 1'b0});
  assign product_phase0_35 = $signed({{5{mulcsd_temp_33[27]}}, mulcsd_temp_33});

  assign mulcsd_temp_34 = - (
        $signed({input_pipeline_phase0[34], 10'b0000000000}) +
        $signed({input_pipeline_phase0[34], 9'b000000000}) -
        $signed({input_pipeline_phase0[34], 6'b000000}) +
        $signed({input_pipeline_phase0[34], 4'b0000}) +
        input_pipeline_phase0[34]);
  assign product_phase0_36 = $signed({{6{mulcsd_temp_34[26]}}, mulcsd_temp_34});

  assign mulcsd_temp_35 = 
        $signed({input_pipeline_phase0[35], 10'b0000000000}) +
        $signed({input_pipeline_phase0[35], 7'b0000000}) -
        $signed({input_pipeline_phase0[35], 5'b00000}) +
        $signed({input_pipeline_phase0[35], 3'b000}) -
        input_pipeline_phase0[35];
  assign product_phase0_37 = $signed({{6{mulcsd_temp_35[26]}}, mulcsd_temp_35});

  assign mulcsd_temp_36 = - (
        $signed({input_pipeline_phase0[36], 10'b0000000000}) -
        $signed({input_pipeline_phase0[36], 8'b00000000}) +
        $signed({input_pipeline_phase0[36], 6'b000000}) +
        $signed({input_pipeline_phase0[36], 3'b000}) +
        input_pipeline_phase0[36]);
  assign product_phase0_38 = $signed({{6{mulcsd_temp_36[26]}}, mulcsd_temp_36});

  assign mulcsd_temp_37 = 
        $signed({input_pipeline_phase0[37], 9'b000000000}) +
        $signed({input_pipeline_phase0[37], 7'b0000000}) -
        $signed({input_pipeline_phase0[37], 5'b00000}) +
        $signed({input_pipeline_phase0[37], 3'b000}) +
        $signed({input_pipeline_phase0[37], 1'b0});
  assign product_phase0_39 = $signed({{7{mulcsd_temp_37[25]}}, mulcsd_temp_37});

  assign mulcsd_temp_38 = - (
        $signed({input_pipeline_phase0[38], 9'b000000000}) -
        $signed({input_pipeline_phase0[38], 7'b0000000}) +
        $signed({input_pipeline_phase0[38], 6'b000000}) -
        input_pipeline_phase0[38]);
  assign product_phase0_40 = $signed({{7{mulcsd_temp_38[25]}}, mulcsd_temp_38});

  assign mulcsd_temp_39 = 
        $signed({input_pipeline_phase0[39], 8'b00000000}) +
        $signed({input_pipeline_phase0[39], 6'b000000}) -
        $signed({input_pipeline_phase0[39], 2'b00}) +
        input_pipeline_phase0[39];
  assign product_phase0_41 = $signed({{8{mulcsd_temp_39[24]}}, mulcsd_temp_39});

  assign mulcsd_temp_40 = - (
        $signed({input_pipeline_phase0[40], 8'b00000000}) -
        $signed({input_pipeline_phase0[40], 6'b000000}) +
        $signed({input_pipeline_phase0[40], 5'b00000}) -
        $signed({input_pipeline_phase0[40], 2'b00}));
  assign product_phase0_42 = $signed({{8{mulcsd_temp_40[24]}}, mulcsd_temp_40});

  assign mulcsd_temp_41 = 
        $signed({input_pipeline_phase0[41], 7'b0000000}) +
        $signed({input_pipeline_phase0[41], 4'b0000}) +
        $signed({input_pipeline_phase0[41], 2'b00}) +
        input_pipeline_phase0[41];
  assign product_phase0_43 = $signed({{9{mulcsd_temp_41[23]}}, mulcsd_temp_41});

  assign mulcsd_temp_42 = - (
        $signed({input_pipeline_phase0[42], 7'b0000000}) -
        $signed({input_pipeline_phase0[42], 5'b00000}) +
        $signed({input_pipeline_phase0[42], 2'b00}) -
        input_pipeline_phase0[42]);
  assign product_phase0_44 = $signed({{9{mulcsd_temp_42[23]}}, mulcsd_temp_42});

  assign product_phase0_45 = $signed({input_pipeline_phase0[43][15:0], 6'b000000});

  assign mulcsd_temp_43 = - (
        $signed({input_pipeline_phase0[44], 5'b00000}) +
        $signed({input_pipeline_phase0[44], 2'b00}) +
        input_pipeline_phase0[44]);
  assign product_phase0_46 = $signed({{11{mulcsd_temp_43[21]}}, mulcsd_temp_43});

  assign mulcsd_temp_44 = 
        $signed({input_pipeline_phase0[45], 5'b00000}) +
        $signed({input_pipeline_phase0[45], 2'b00}) +
        input_pipeline_phase0[45];
  assign product_phase0_47 = $signed({{11{mulcsd_temp_44[21]}}, mulcsd_temp_44});

  assign mulcsd_temp_45 = - (
        $signed({input_pipeline_phase0[46], 3'b000}) -
        $signed({input_pipeline_phase0[46], 1'b0}));
  assign product_phase0_48 = $signed({{13{mulcsd_temp_45[19]}}, mulcsd_temp_45});

  assign product_phase1_1 = $signed({input_pipeline_phase1[0][15:0], 1'b0});

  assign mulcsd_temp_46 = 
        $signed({input_pipeline_phase1[1], 5'b00000}) +
        $signed({input_pipeline_phase1[1], 2'b00}) -
        input_pipeline_phase1[1];
  assign product_phase1_2 = $signed({{11{mulcsd_temp_46[21]}}, mulcsd_temp_46});

  assign mulcsd_temp_47 = - (
        $signed({input_pipeline_phase1[2], 6'b000000}) -
        $signed({input_pipeline_phase1[2], 4'b0000}) +
        $signed({input_pipeline_phase1[2], 2'b00}) -
        input_pipeline_phase1[2]);
  assign product_phase1_3 = $signed({{10{mulcsd_temp_47[22]}}, mulcsd_temp_47});

  assign mulcsd_temp_48 = 
        $signed({input_pipeline_phase1[3], 6'b000000}) +
        $signed({input_pipeline_phase1[3], 4'b0000}) +
        $signed({input_pipeline_phase1[3], 2'b00}) +
        input_pipeline_phase1[3];
  assign product_phase1_4 = $signed({{10{mulcsd_temp_48[22]}}, mulcsd_temp_48});

  assign mulcsd_temp_49 = - (
        $signed({input_pipeline_phase1[4], 7'b0000000}) +
        $signed({input_pipeline_phase1[4], 2'b00}) -
        input_pipeline_phase1[4]);
  assign product_phase1_5 = $signed({{9{mulcsd_temp_49[23]}}, mulcsd_temp_49});

  assign mulcsd_temp_50 = 
        $signed({input_pipeline_phase1[5], 8'b00000000}) -
        $signed({input_pipeline_phase1[5], 6'b000000});
  assign product_phase1_6 = $signed({{8{mulcsd_temp_50[24]}}, mulcsd_temp_50});

  assign mulcsd_temp_51 = - (
        $signed({input_pipeline_phase1[6], 8'b00000000}) +
        $signed({input_pipeline_phase1[6], 4'b0000}) -
        $signed({input_pipeline_phase1[6], 2'b00}) +
        input_pipeline_phase1[6]);
  assign product_phase1_7 = $signed({{8{mulcsd_temp_51[24]}}, mulcsd_temp_51});

  assign mulcsd_temp_52 = 
        $signed({input_pipeline_phase1[7], 8'b00000000}) +
        $signed({input_pipeline_phase1[7], 7'b0000000}) -
        $signed({input_pipeline_phase1[7], 5'b00000}) +
        $signed({input_pipeline_phase1[7], 4'b0000}) -
        $signed({input_pipeline_phase1[7], 2'b00});
  assign product_phase1_8 = $signed({{8{mulcsd_temp_52[24]}}, mulcsd_temp_52});

  assign mulcsd_temp_53 = - (
        $signed({input_pipeline_phase1[8], 9'b000000000}) -
        $signed({input_pipeline_phase1[8], 6'b000000}) +
        $signed({input_pipeline_phase1[8], 5'b00000}) -
        input_pipeline_phase1[8]);
  assign product_phase1_9 = $signed({{7{mulcsd_temp_53[25]}}, mulcsd_temp_53});

  assign mulcsd_temp_54 = 
        $signed({input_pipeline_phase1[9], 9'b000000000}) +
        $signed({input_pipeline_phase1[9], 7'b0000000}) -
        $signed({input_pipeline_phase1[9], 5'b00000}) +
        $signed({input_pipeline_phase1[9], 3'b000}) -
        $signed({input_pipeline_phase1[9], 1'b0});
  assign product_phase1_10 = $signed({{7{mulcsd_temp_54[25]}}, mulcsd_temp_54});

  assign mulcsd_temp_55 = - (
        $signed({input_pipeline_phase1[10], 10'b0000000000}) -
        $signed({input_pipeline_phase1[10], 8'b00000000}) +
        $signed({input_pipeline_phase1[10], 2'b00}) -
        input_pipeline_phase1[10]);
  assign product_phase1_11 = $signed({{6{mulcsd_temp_55[26]}}, mulcsd_temp_55});

  assign mulcsd_temp_56 = 
        $signed({input_pipeline_phase1[11], 10'b0000000000}) -
        $signed({input_pipeline_phase1[11], 7'b0000000}) +
        $signed({input_pipeline_phase1[11], 6'b000000}) -
        $signed({input_pipeline_phase1[11], 4'b0000}) +
        $signed({input_pipeline_phase1[11], 2'b00});
  assign product_phase1_12 = $signed({{6{mulcsd_temp_56[26]}}, mulcsd_temp_56});

  assign mulcsd_temp_57 = - (
        $signed({input_pipeline_phase1[12], 10'b0000000000}) +
        $signed({input_pipeline_phase1[12], 7'b0000000}) -
        $signed({input_pipeline_phase1[12], 3'b000}) +
        input_pipeline_phase1[12]);
  assign product_phase1_13 = $signed({{6{mulcsd_temp_57[26]}}, mulcsd_temp_57});

  assign mulcsd_temp_58 = 
        $signed({input_pipeline_phase1[13], 10'b0000000000}) +
        $signed({input_pipeline_phase1[13], 8'b00000000}) +
        $signed({input_pipeline_phase1[13], 6'b000000}) +
        $signed({input_pipeline_phase1[13], 4'b0000}) +
        $signed({input_pipeline_phase1[13], 2'b00}) -
        input_pipeline_phase1[13];
  assign product_phase1_14 = $signed({{6{mulcsd_temp_58[26]}}, mulcsd_temp_58});

  assign mulcsd_temp_59 = - (
        $signed({input_pipeline_phase1[14], 11'b00000000000}) -
        $signed({input_pipeline_phase1[14], 9'b000000000}) +
        $signed({input_pipeline_phase1[14], 6'b000000}) +
        $signed({input_pipeline_phase1[14], 2'b00}) -
        input_pipeline_phase1[14]);
  assign product_phase1_15 = $signed({{5{mulcsd_temp_59[27]}}, mulcsd_temp_59});

  assign mulcsd_temp_60 = 
        $signed({input_pipeline_phase1[15], 11'b00000000000}) -
        $signed({input_pipeline_phase1[15], 8'b00000000}) +
        $signed({input_pipeline_phase1[15], 6'b000000}) +
        $signed({input_pipeline_phase1[15], 4'b0000}) -
        $signed({input_pipeline_phase1[15], 2'b00});
  assign product_phase1_16 = $signed({{5{mulcsd_temp_60[27]}}, mulcsd_temp_60});

  assign mulcsd_temp_61 = - (
        $signed({input_pipeline_phase1[16], 11'b00000000000}) +
        $signed({input_pipeline_phase1[16], 7'b0000000}) -
        $signed({input_pipeline_phase1[16], 4'b0000}) +
        $signed({input_pipeline_phase1[16], 3'b000}) -
        $signed({input_pipeline_phase1[16], 1'b0}));
  assign product_phase1_17 = $signed({{5{mulcsd_temp_61[27]}}, mulcsd_temp_61});

  assign mulcsd_temp_62 = 
        $signed({input_pipeline_phase1[17], 11'b00000000000}) +
        $signed({input_pipeline_phase1[17], 9'b000000000}) -
        $signed({input_pipeline_phase1[17], 6'b000000}) +
        $signed({input_pipeline_phase1[17], 5'b00000}) -
        $signed({input_pipeline_phase1[17], 3'b000});
  assign product_phase1_18 = $signed({{5{mulcsd_temp_62[27]}}, mulcsd_temp_62});

  assign mulcsd_temp_63 = - (
        $signed({input_pipeline_phase1[18], 11'b00000000000}) +
        $signed({input_pipeline_phase1[18], 10'b0000000000}) -
        $signed({input_pipeline_phase1[18], 7'b0000000}) +
        $signed({input_pipeline_phase1[18], 5'b00000}) +
        $signed({input_pipeline_phase1[18], 1'b0}));
  assign product_phase1_19 = $signed({{5{mulcsd_temp_63[27]}}, mulcsd_temp_63});

  assign mulcsd_temp_64 = 
        $signed({input_pipeline_phase1[19], 12'b000000000000}) -
        $signed({input_pipeline_phase1[19], 9'b000000000}) +
        $signed({input_pipeline_phase1[19], 6'b000000}) +
        $signed({input_pipeline_phase1[19], 3'b000});
  assign product_phase1_20 = $signed({{4{mulcsd_temp_64[28]}}, mulcsd_temp_64});

  assign mulcsd_temp_65 = - (
        $signed({input_pipeline_phase1[20], 12'b000000000000}) +
        $signed({input_pipeline_phase1[20], 10'b0000000000}) -
        $signed({input_pipeline_phase1[20], 8'b00000000}) +
        $signed({input_pipeline_phase1[20], 4'b0000}) +
        $signed({input_pipeline_phase1[20], 1'b0}));
  assign product_phase1_21 = $signed({{4{mulcsd_temp_65[28]}}, mulcsd_temp_65});

  assign mulcsd_temp_66 = 
        $signed({input_pipeline_phase1[21], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[21], 9'b000000000}) +
        $signed({input_pipeline_phase1[21], 7'b0000000}) -
        $signed({input_pipeline_phase1[21], 5'b00000}) +
        $signed({input_pipeline_phase1[21], 3'b000}) -
        $signed({input_pipeline_phase1[21], 1'b0});
  assign product_phase1_22 = $signed({{3{mulcsd_temp_66[29]}}, mulcsd_temp_66});

  assign mulcsd_temp_67 = - (
        $signed({input_pipeline_phase1[22], 14'b00000000000000}) +
        $signed({input_pipeline_phase1[22], 11'b00000000000}) -
        $signed({input_pipeline_phase1[22], 9'b000000000}) +
        $signed({input_pipeline_phase1[22], 7'b0000000}) -
        $signed({input_pipeline_phase1[22], 4'b0000}) +
        input_pipeline_phase1[22]);
  assign product_phase1_23 = $signed({{2{mulcsd_temp_67[30]}}, mulcsd_temp_67});

  assign mulcsd_temp_68 = 
        $signed({input_pipeline_phase1[23], 16'b0000000000000000}) +
        $signed({input_pipeline_phase1[23], 15'b000000000000000}) -
        $signed({input_pipeline_phase1[23], 13'b0000000000000}) +
        $signed({input_pipeline_phase1[23], 11'b00000000000}) -
        $signed({input_pipeline_phase1[23], 9'b000000000}) +
        $signed({input_pipeline_phase1[23], 6'b000000}) +
        $signed({input_pipeline_phase1[23], 4'b0000}) +
        $signed({input_pipeline_phase1[23], 1'b0});
  assign product_phase1_24 = mulcsd_temp_68;

  assign mulcsd_temp_69 = - (
        $signed({input_pipeline_phase1[24], 14'b00000000000000}) +
        $signed({input_pipeline_phase1[24], 11'b00000000000}) -
        $signed({input_pipeline_phase1[24], 9'b000000000}) +
        $signed({input_pipeline_phase1[24], 7'b0000000}) -
        $signed({input_pipeline_phase1[24], 4'b0000}) +
        input_pipeline_phase1[24]);
  assign product_phase1_25 = $signed({{2{mulcsd_temp_69[30]}}, mulcsd_temp_69});

  assign mulcsd_temp_70 = 
        $signed({input_pipeline_phase1[25], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[25], 9'b000000000}) +
        $signed({input_pipeline_phase1[25], 7'b0000000}) -
        $signed({input_pipeline_phase1[25], 5'b00000}) +
        $signed({input_pipeline_phase1[25], 3'b000}) -
        $signed({input_pipeline_phase1[25], 1'b0});
  assign product_phase1_26 = $signed({{3{mulcsd_temp_70[29]}}, mulcsd_temp_70});

  assign mulcsd_temp_71 = - (
        $signed({input_pipeline_phase1[26], 12'b000000000000}) +
        $signed({input_pipeline_phase1[26], 10'b0000000000}) -
        $signed({input_pipeline_phase1[26], 8'b00000000}) +
        $signed({input_pipeline_phase1[26], 4'b0000}) +
        $signed({input_pipeline_phase1[26], 1'b0}));
  assign product_phase1_27 = $signed({{4{mulcsd_temp_71[28]}}, mulcsd_temp_71});

  assign mulcsd_temp_72 = 
        $signed({input_pipeline_phase1[27], 12'b000000000000}) -
        $signed({input_pipeline_phase1[27], 9'b000000000}) +
        $signed({input_pipeline_phase1[27], 6'b000000}) +
        $signed({input_pipeline_phase1[27], 3'b000});
  assign product_phase1_28 = $signed({{4{mulcsd_temp_72[28]}}, mulcsd_temp_72});

  assign mulcsd_temp_73 = - (
        $signed({input_pipeline_phase1[28], 11'b00000000000}) +
        $signed({input_pipeline_phase1[28], 10'b0000000000}) -
        $signed({input_pipeline_phase1[28], 7'b0000000}) +
        $signed({input_pipeline_phase1[28], 5'b00000}) +
        $signed({input_pipeline_phase1[28], 1'b0}));
  assign product_phase1_29 = $signed({{5{mulcsd_temp_73[27]}}, mulcsd_temp_73});

  assign mulcsd_temp_74 = 
        $signed({input_pipeline_phase1[29], 11'b00000000000}) +
        $signed({input_pipeline_phase1[29], 9'b000000000}) -
        $signed({input_pipeline_phase1[29], 6'b000000}) +
        $signed({input_pipeline_phase1[29], 5'b00000}) -
        $signed({input_pipeline_phase1[29], 3'b000});
  assign product_phase1_30 = $signed({{5{mulcsd_temp_74[27]}}, mulcsd_temp_74});

  assign mulcsd_temp_75 = - (
        $signed({input_pipeline_phase1[30], 11'b00000000000}) +
        $signed({input_pipeline_phase1[30], 7'b0000000}) -
        $signed({input_pipeline_phase1[30], 4'b0000}) +
        $signed({input_pipeline_phase1[30], 3'b000}) -
        $signed({input_pipeline_phase1[30], 1'b0}));
  assign product_phase1_31 = $signed({{5{mulcsd_temp_75[27]}}, mulcsd_temp_75});

  assign mulcsd_temp_76 = 
        $signed({input_pipeline_phase1[31], 11'b00000000000}) -
        $signed({input_pipeline_phase1[31], 8'b00000000}) +
        $signed({input_pipeline_phase1[31], 6'b000000}) +
        $signed({input_pipeline_phase1[31], 4'b0000}) -
        $signed({input_pipeline_phase1[31], 2'b00});
  assign product_phase1_32 = $signed({{5{mulcsd_temp_76[27]}}, mulcsd_temp_76});

  assign mulcsd_temp_77 = - (
        $signed({input_pipeline_phase1[32], 11'b00000000000}) -
        $signed({input_pipeline_phase1[32], 9'b000000000}) +
        $signed({input_pipeline_phase1[32], 6'b000000}) +
        $signed({input_pipeline_phase1[32], 2'b00}) -
        input_pipeline_phase1[32]);
  assign product_phase1_33 = $signed({{5{mulcsd_temp_77[27]}}, mulcsd_temp_77});

  assign mulcsd_temp_78 = 
        $signed({input_pipeline_phase1[33], 10'b0000000000}) +
        $signed({input_pipeline_phase1[33], 8'b00000000}) +
        $signed({input_pipeline_phase1[33], 6'b000000}) +
        $signed({input_pipeline_phase1[33], 4'b0000}) +
        $signed({input_pipeline_phase1[33], 2'b00}) -
        input_pipeline_phase1[33];
  assign product_phase1_34 = $signed({{6{mulcsd_temp_78[26]}}, mulcsd_temp_78});

  assign mulcsd_temp_79 = - (
        $signed({input_pipeline_phase1[34], 10'b0000000000}) +
        $signed({input_pipeline_phase1[34], 7'b0000000}) -
        $signed({input_pipeline_phase1[34], 3'b000}) +
        input_pipeline_phase1[34]);
  assign product_phase1_35 = $signed({{6{mulcsd_temp_79[26]}}, mulcsd_temp_79});

  assign mulcsd_temp_80 = 
        $signed({input_pipeline_phase1[35], 10'b0000000000}) -
        $signed({input_pipeline_phase1[35], 7'b0000000}) +
        $signed({input_pipeline_phase1[35], 6'b000000}) -
        $signed({input_pipeline_phase1[35], 4'b0000}) +
        $signed({input_pipeline_phase1[35], 2'b00});
  assign product_phase1_36 = $signed({{6{mulcsd_temp_80[26]}}, mulcsd_temp_80});

  assign mulcsd_temp_81 = - (
        $signed({input_pipeline_phase1[36], 10'b0000000000}) -
        $signed({input_pipeline_phase1[36], 8'b00000000}) +
        $signed({input_pipeline_phase1[36], 2'b00}) -
        input_pipeline_phase1[36]);
  assign product_phase1_37 = $signed({{6{mulcsd_temp_81[26]}}, mulcsd_temp_81});

  assign mulcsd_temp_82 = 
        $signed({input_pipeline_phase1[37], 9'b000000000}) +
        $signed({input_pipeline_phase1[37], 7'b0000000}) -
        $signed({input_pipeline_phase1[37], 5'b00000}) +
        $signed({input_pipeline_phase1[37], 3'b000}) -
        $signed({input_pipeline_phase1[37], 1'b0});
  assign product_phase1_38 = $signed({{7{mulcsd_temp_82[25]}}, mulcsd_temp_82});

  assign mulcsd_temp_83 = - (
        $signed({input_pipeline_phase1[38], 9'b000000000}) -
        $signed({input_pipeline_phase1[38], 6'b000000}) +
        $signed({input_pipeline_phase1[38], 5'b00000}) -
        input_pipeline_phase1[38]);
  assign product_phase1_39 = $signed({{7{mulcsd_temp_83[25]}}, mulcsd_temp_83});

  assign mulcsd_temp_84 = 
        $signed({input_pipeline_phase1[39], 8'b00000000}) +
        $signed({input_pipeline_phase1[39], 7'b0000000}) -
        $signed({input_pipeline_phase1[39], 5'b00000}) +
        $signed({input_pipeline_phase1[39], 4'b0000}) -
        $signed({input_pipeline_phase1[39], 2'b00});
  assign product_phase1_40 = $signed({{8{mulcsd_temp_84[24]}}, mulcsd_temp_84});

  assign mulcsd_temp_85 = - (
        $signed({input_pipeline_phase1[40], 8'b00000000}) +
        $signed({input_pipeline_phase1[40], 4'b0000}) -
        $signed({input_pipeline_phase1[40], 2'b00}) +
        input_pipeline_phase1[40]);
  assign product_phase1_41 = $signed({{8{mulcsd_temp_85[24]}}, mulcsd_temp_85});

  assign mulcsd_temp_86 = 
        $signed({input_pipeline_phase1[41], 8'b00000000}) -
        $signed({input_pipeline_phase1[41], 6'b000000});
  assign product_phase1_42 = $signed({{8{mulcsd_temp_86[24]}}, mulcsd_temp_86});

  assign mulcsd_temp_87 = - (
        $signed({input_pipeline_phase1[42], 7'b0000000}) +
        $signed({input_pipeline_phase1[42], 2'b00}) -
        input_pipeline_phase1[42]);
  assign product_phase1_43 = $signed({{9{mulcsd_temp_87[23]}}, mulcsd_temp_87});

  assign mulcsd_temp_88 = 
        $signed({input_pipeline_phase1[43], 6'b000000}) +
        $signed({input_pipeline_phase1[43], 4'b0000}) +
        $signed({input_pipeline_phase1[43], 2'b00}) +
        input_pipeline_phase1[43];
  assign product_phase1_44 = $signed({{10{mulcsd_temp_88[22]}}, mulcsd_temp_88});

  assign mulcsd_temp_89 = - (
        $signed({input_pipeline_phase1[44], 6'b000000}) -
        $signed({input_pipeline_phase1[44], 4'b0000}) +
        $signed({input_pipeline_phase1[44], 2'b00}) -
        input_pipeline_phase1[44]);
  assign product_phase1_45 = $signed({{10{mulcsd_temp_89[22]}}, mulcsd_temp_89});

  assign mulcsd_temp_90 = 
        $signed({input_pipeline_phase1[45], 5'b00000}) +
        $signed({input_pipeline_phase1[45], 2'b00}) -
        input_pipeline_phase1[45];
  assign product_phase1_46 = $signed({{11{mulcsd_temp_90[21]}}, mulcsd_temp_90});

  assign product_phase1_47 = $signed({input_pipeline_phase1[46][15:0], 1'b0});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase1_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase1_3 <= 0;
        product_pipeline_phase0_4 <= 0;
        product_pipeline_phase1_4 <= 0;
        product_pipeline_phase0_5 <= 0;
        product_pipeline_phase1_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase1_6 <= 0;
        product_pipeline_phase0_7 <= 0;
        product_pipeline_phase1_7 <= 0;
        product_pipeline_phase0_8 <= 0;
        product_pipeline_phase1_8 <= 0;
        product_pipeline_phase0_9 <= 0;
        product_pipeline_phase1_9 <= 0;
        product_pipeline_phase0_10 <= 0;
        product_pipeline_phase1_10 <= 0;
        product_pipeline_phase0_11 <= 0;
        product_pipeline_phase1_11 <= 0;
        product_pipeline_phase0_12 <= 0;
        product_pipeline_phase1_12 <= 0;
        product_pipeline_phase0_13 <= 0;
        product_pipeline_phase1_13 <= 0;
        product_pipeline_phase0_14 <= 0;
        product_pipeline_phase1_14 <= 0;
        product_pipeline_phase0_15 <= 0;
        product_pipeline_phase1_15 <= 0;
        product_pipeline_phase0_16 <= 0;
        product_pipeline_phase1_16 <= 0;
        product_pipeline_phase0_17 <= 0;
        product_pipeline_phase1_17 <= 0;
        product_pipeline_phase0_18 <= 0;
        product_pipeline_phase1_18 <= 0;
        product_pipeline_phase0_19 <= 0;
        product_pipeline_phase1_19 <= 0;
        product_pipeline_phase0_20 <= 0;
        product_pipeline_phase1_20 <= 0;
        product_pipeline_phase0_21 <= 0;
        product_pipeline_phase1_21 <= 0;
        product_pipeline_phase0_22 <= 0;
        product_pipeline_phase1_22 <= 0;
        product_pipeline_phase0_23 <= 0;
        product_pipeline_phase1_23 <= 0;
        product_pipeline_phase0_24 <= 0;
        product_pipeline_phase1_24 <= 0;
        product_pipeline_phase0_25 <= 0;
        product_pipeline_phase1_25 <= 0;
        product_pipeline_phase0_26 <= 0;
        product_pipeline_phase1_26 <= 0;
        product_pipeline_phase0_27 <= 0;
        product_pipeline_phase1_27 <= 0;
        product_pipeline_phase0_28 <= 0;
        product_pipeline_phase1_28 <= 0;
        product_pipeline_phase0_29 <= 0;
        product_pipeline_phase1_29 <= 0;
        product_pipeline_phase0_30 <= 0;
        product_pipeline_phase1_30 <= 0;
        product_pipeline_phase0_31 <= 0;
        product_pipeline_phase1_31 <= 0;
        product_pipeline_phase0_32 <= 0;
        product_pipeline_phase1_32 <= 0;
        product_pipeline_phase0_33 <= 0;
        product_pipeline_phase1_33 <= 0;
        product_pipeline_phase0_34 <= 0;
        product_pipeline_phase1_34 <= 0;
        product_pipeline_phase0_35 <= 0;
        product_pipeline_phase1_35 <= 0;
        product_pipeline_phase0_36 <= 0;
        product_pipeline_phase1_36 <= 0;
        product_pipeline_phase0_37 <= 0;
        product_pipeline_phase1_37 <= 0;
        product_pipeline_phase0_38 <= 0;
        product_pipeline_phase1_38 <= 0;
        product_pipeline_phase0_39 <= 0;
        product_pipeline_phase1_39 <= 0;
        product_pipeline_phase0_40 <= 0;
        product_pipeline_phase1_40 <= 0;
        product_pipeline_phase0_41 <= 0;
        product_pipeline_phase1_41 <= 0;
        product_pipeline_phase0_42 <= 0;
        product_pipeline_phase1_42 <= 0;
        product_pipeline_phase0_43 <= 0;
        product_pipeline_phase1_43 <= 0;
        product_pipeline_phase0_44 <= 0;
        product_pipeline_phase1_44 <= 0;
        product_pipeline_phase0_45 <= 0;
        product_pipeline_phase1_45 <= 0;
        product_pipeline_phase0_46 <= 0;
        product_pipeline_phase1_46 <= 0;
        product_pipeline_phase0_47 <= 0;
        product_pipeline_phase1_47 <= 0;
        product_pipeline_phase0_48 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase1_1 <= product_phase1_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase1_3 <= product_phase1_3;
          product_pipeline_phase0_4 <= product_phase0_4;
          product_pipeline_phase1_4 <= product_phase1_4;
          product_pipeline_phase0_5 <= product_phase0_5;
          product_pipeline_phase1_5 <= product_phase1_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase1_6 <= product_phase1_6;
          product_pipeline_phase0_7 <= product_phase0_7;
          product_pipeline_phase1_7 <= product_phase1_7;
          product_pipeline_phase0_8 <= product_phase0_8;
          product_pipeline_phase1_8 <= product_phase1_8;
          product_pipeline_phase0_9 <= product_phase0_9;
          product_pipeline_phase1_9 <= product_phase1_9;
          product_pipeline_phase0_10 <= product_phase0_10;
          product_pipeline_phase1_10 <= product_phase1_10;
          product_pipeline_phase0_11 <= product_phase0_11;
          product_pipeline_phase1_11 <= product_phase1_11;
          product_pipeline_phase0_12 <= product_phase0_12;
          product_pipeline_phase1_12 <= product_phase1_12;
          product_pipeline_phase0_13 <= product_phase0_13;
          product_pipeline_phase1_13 <= product_phase1_13;
          product_pipeline_phase0_14 <= product_phase0_14;
          product_pipeline_phase1_14 <= product_phase1_14;
          product_pipeline_phase0_15 <= product_phase0_15;
          product_pipeline_phase1_15 <= product_phase1_15;
          product_pipeline_phase0_16 <= product_phase0_16;
          product_pipeline_phase1_16 <= product_phase1_16;
          product_pipeline_phase0_17 <= product_phase0_17;
          product_pipeline_phase1_17 <= product_phase1_17;
          product_pipeline_phase0_18 <= product_phase0_18;
          product_pipeline_phase1_18 <= product_phase1_18;
          product_pipeline_phase0_19 <= product_phase0_19;
          product_pipeline_phase1_19 <= product_phase1_19;
          product_pipeline_phase0_20 <= product_phase0_20;
          product_pipeline_phase1_20 <= product_phase1_20;
          product_pipeline_phase0_21 <= product_phase0_21;
          product_pipeline_phase1_21 <= product_phase1_21;
          product_pipeline_phase0_22 <= product_phase0_22;
          product_pipeline_phase1_22 <= product_phase1_22;
          product_pipeline_phase0_23 <= product_phase0_23;
          product_pipeline_phase1_23 <= product_phase1_23;
          product_pipeline_phase0_24 <= product_phase0_24;
          product_pipeline_phase1_24 <= product_phase1_24;
          product_pipeline_phase0_25 <= product_phase0_25;
          product_pipeline_phase1_25 <= product_phase1_25;
          product_pipeline_phase0_26 <= product_phase0_26;
          product_pipeline_phase1_26 <= product_phase1_26;
          product_pipeline_phase0_27 <= product_phase0_27;
          product_pipeline_phase1_27 <= product_phase1_27;
          product_pipeline_phase0_28 <= product_phase0_28;
          product_pipeline_phase1_28 <= product_phase1_28;
          product_pipeline_phase0_29 <= product_phase0_29;
          product_pipeline_phase1_29 <= product_phase1_29;
          product_pipeline_phase0_30 <= product_phase0_30;
          product_pipeline_phase1_30 <= product_phase1_30;
          product_pipeline_phase0_31 <= product_phase0_31;
          product_pipeline_phase1_31 <= product_phase1_31;
          product_pipeline_phase0_32 <= product_phase0_32;
          product_pipeline_phase1_32 <= product_phase1_32;
          product_pipeline_phase0_33 <= product_phase0_33;
          product_pipeline_phase1_33 <= product_phase1_33;
          product_pipeline_phase0_34 <= product_phase0_34;
          product_pipeline_phase1_34 <= product_phase1_34;
          product_pipeline_phase0_35 <= product_phase0_35;
          product_pipeline_phase1_35 <= product_phase1_35;
          product_pipeline_phase0_36 <= product_phase0_36;
          product_pipeline_phase1_36 <= product_phase1_36;
          product_pipeline_phase0_37 <= product_phase0_37;
          product_pipeline_phase1_37 <= product_phase1_37;
          product_pipeline_phase0_38 <= product_phase0_38;
          product_pipeline_phase1_38 <= product_phase1_38;
          product_pipeline_phase0_39 <= product_phase0_39;
          product_pipeline_phase1_39 <= product_phase1_39;
          product_pipeline_phase0_40 <= product_phase0_40;
          product_pipeline_phase1_40 <= product_phase1_40;
          product_pipeline_phase0_41 <= product_phase0_41;
          product_pipeline_phase1_41 <= product_phase1_41;
          product_pipeline_phase0_42 <= product_phase0_42;
          product_pipeline_phase1_42 <= product_phase1_42;
          product_pipeline_phase0_43 <= product_phase0_43;
          product_pipeline_phase1_43 <= product_phase1_43;
          product_pipeline_phase0_44 <= product_phase0_44;
          product_pipeline_phase1_44 <= product_phase1_44;
          product_pipeline_phase0_45 <= product_phase0_45;
          product_pipeline_phase1_45 <= product_phase1_45;
          product_pipeline_phase0_46 <= product_phase0_46;
          product_pipeline_phase1_46 <= product_phase1_46;
          product_pipeline_phase0_47 <= product_phase0_47;
          product_pipeline_phase1_47 <= product_phase1_47;
          product_pipeline_phase0_48 <= product_phase0_48;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{2{product_pipeline_phase1_1[32]}}, product_pipeline_phase1_1});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{2{product_pipeline_phase1_2[32]}}, product_pipeline_phase1_2});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[34:0];

  assign add_signext_2 = product_pipeline_phase1_3;
  assign add_signext_3 = product_pipeline_phase1_4;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{1{add_temp_1[33]}}, add_temp_1});

  assign add_signext_4 = product_pipeline_phase1_5;
  assign add_signext_5 = product_pipeline_phase1_6;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector1[2] = $signed({{1{add_temp_2[33]}}, add_temp_2});

  assign add_signext_6 = product_pipeline_phase1_7;
  assign add_signext_7 = product_pipeline_phase1_8;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector1[3] = $signed({{1{add_temp_3[33]}}, add_temp_3});

  assign add_signext_8 = product_pipeline_phase1_9;
  assign add_signext_9 = product_pipeline_phase1_10;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector1[4] = $signed({{1{add_temp_4[33]}}, add_temp_4});

  assign add_signext_10 = product_pipeline_phase1_11;
  assign add_signext_11 = product_pipeline_phase1_12;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector1[5] = $signed({{1{add_temp_5[33]}}, add_temp_5});

  assign add_signext_12 = product_pipeline_phase1_13;
  assign add_signext_13 = product_pipeline_phase1_14;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector1[6] = $signed({{1{add_temp_6[33]}}, add_temp_6});

  assign add_signext_14 = product_pipeline_phase1_15;
  assign add_signext_15 = product_pipeline_phase1_16;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector1[7] = $signed({{1{add_temp_7[33]}}, add_temp_7});

  assign add_signext_16 = product_pipeline_phase1_17;
  assign add_signext_17 = product_pipeline_phase1_18;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector1[8] = $signed({{1{add_temp_8[33]}}, add_temp_8});

  assign add_signext_18 = product_pipeline_phase1_19;
  assign add_signext_19 = product_pipeline_phase1_20;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector1[9] = $signed({{1{add_temp_9[33]}}, add_temp_9});

  assign add_signext_20 = product_pipeline_phase1_21;
  assign add_signext_21 = product_pipeline_phase1_22;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector1[10] = $signed({{1{add_temp_10[33]}}, add_temp_10});

  assign add_signext_22 = product_pipeline_phase1_23;
  assign add_signext_23 = product_pipeline_phase1_24;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector1[11] = $signed({{1{add_temp_11[33]}}, add_temp_11});

  assign add_signext_24 = product_pipeline_phase1_25;
  assign add_signext_25 = product_pipeline_phase1_26;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector1[12] = $signed({{1{add_temp_12[33]}}, add_temp_12});

  assign add_signext_26 = product_pipeline_phase1_27;
  assign add_signext_27 = product_pipeline_phase1_28;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector1[13] = $signed({{1{add_temp_13[33]}}, add_temp_13});

  assign add_signext_28 = product_pipeline_phase1_29;
  assign add_signext_29 = product_pipeline_phase1_30;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sumvector1[14] = $signed({{1{add_temp_14[33]}}, add_temp_14});

  assign add_signext_30 = product_pipeline_phase1_31;
  assign add_signext_31 = product_pipeline_phase1_32;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sumvector1[15] = $signed({{1{add_temp_15[33]}}, add_temp_15});

  assign add_signext_32 = product_pipeline_phase1_33;
  assign add_signext_33 = product_pipeline_phase1_34;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sumvector1[16] = $signed({{1{add_temp_16[33]}}, add_temp_16});

  assign add_signext_34 = product_pipeline_phase1_35;
  assign add_signext_35 = product_pipeline_phase1_36;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sumvector1[17] = $signed({{1{add_temp_17[33]}}, add_temp_17});

  assign add_signext_36 = product_pipeline_phase1_37;
  assign add_signext_37 = product_pipeline_phase1_38;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sumvector1[18] = $signed({{1{add_temp_18[33]}}, add_temp_18});

  assign add_signext_38 = product_pipeline_phase1_39;
  assign add_signext_39 = product_pipeline_phase1_40;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sumvector1[19] = $signed({{1{add_temp_19[33]}}, add_temp_19});

  assign add_signext_40 = product_pipeline_phase1_41;
  assign add_signext_41 = product_pipeline_phase1_42;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sumvector1[20] = $signed({{1{add_temp_20[33]}}, add_temp_20});

  assign add_signext_42 = product_pipeline_phase1_43;
  assign add_signext_43 = product_pipeline_phase1_44;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sumvector1[21] = $signed({{1{add_temp_21[33]}}, add_temp_21});

  assign add_signext_44 = product_pipeline_phase1_45;
  assign add_signext_45 = product_pipeline_phase1_46;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sumvector1[22] = $signed({{1{add_temp_22[33]}}, add_temp_22});

  assign add_signext_46 = product_pipeline_phase1_47;
  assign add_signext_47 = product_pipeline_phase0_1;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sumvector1[23] = $signed({{1{add_temp_23[33]}}, add_temp_23});

  assign add_signext_48 = product_pipeline_phase0_2;
  assign add_signext_49 = product_pipeline_phase0_3;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sumvector1[24] = $signed({{1{add_temp_24[33]}}, add_temp_24});

  assign add_signext_50 = product_pipeline_phase0_4;
  assign add_signext_51 = product_pipeline_phase0_5;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sumvector1[25] = $signed({{1{add_temp_25[33]}}, add_temp_25});

  assign add_signext_52 = product_pipeline_phase0_6;
  assign add_signext_53 = product_pipeline_phase0_7;
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sumvector1[26] = $signed({{1{add_temp_26[33]}}, add_temp_26});

  assign add_signext_54 = product_pipeline_phase0_8;
  assign add_signext_55 = product_pipeline_phase0_9;
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sumvector1[27] = $signed({{1{add_temp_27[33]}}, add_temp_27});

  assign add_signext_56 = product_pipeline_phase0_10;
  assign add_signext_57 = product_pipeline_phase0_11;
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sumvector1[28] = $signed({{1{add_temp_28[33]}}, add_temp_28});

  assign add_signext_58 = product_pipeline_phase0_12;
  assign add_signext_59 = product_pipeline_phase0_13;
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sumvector1[29] = $signed({{1{add_temp_29[33]}}, add_temp_29});

  assign add_signext_60 = product_pipeline_phase0_14;
  assign add_signext_61 = product_pipeline_phase0_15;
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sumvector1[30] = $signed({{1{add_temp_30[33]}}, add_temp_30});

  assign add_signext_62 = product_pipeline_phase0_16;
  assign add_signext_63 = product_pipeline_phase0_17;
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sumvector1[31] = $signed({{1{add_temp_31[33]}}, add_temp_31});

  assign add_signext_64 = product_pipeline_phase0_18;
  assign add_signext_65 = product_pipeline_phase0_19;
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sumvector1[32] = $signed({{1{add_temp_32[33]}}, add_temp_32});

  assign add_signext_66 = product_pipeline_phase0_20;
  assign add_signext_67 = product_pipeline_phase0_21;
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sumvector1[33] = $signed({{1{add_temp_33[33]}}, add_temp_33});

  assign add_signext_68 = product_pipeline_phase0_22;
  assign add_signext_69 = product_pipeline_phase0_23;
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sumvector1[34] = $signed({{1{add_temp_34[33]}}, add_temp_34});

  assign add_signext_70 = product_pipeline_phase0_24;
  assign add_signext_71 = product_pipeline_phase0_25;
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sumvector1[35] = $signed({{1{add_temp_35[33]}}, add_temp_35});

  assign add_signext_72 = product_pipeline_phase0_26;
  assign add_signext_73 = product_pipeline_phase0_27;
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sumvector1[36] = $signed({{1{add_temp_36[33]}}, add_temp_36});

  assign add_signext_74 = product_pipeline_phase0_28;
  assign add_signext_75 = product_pipeline_phase0_29;
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sumvector1[37] = $signed({{1{add_temp_37[33]}}, add_temp_37});

  assign add_signext_76 = product_pipeline_phase0_30;
  assign add_signext_77 = product_pipeline_phase0_31;
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sumvector1[38] = $signed({{1{add_temp_38[33]}}, add_temp_38});

  assign add_signext_78 = product_pipeline_phase0_32;
  assign add_signext_79 = product_pipeline_phase0_33;
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sumvector1[39] = $signed({{1{add_temp_39[33]}}, add_temp_39});

  assign add_signext_80 = product_pipeline_phase0_34;
  assign add_signext_81 = product_pipeline_phase0_35;
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sumvector1[40] = $signed({{1{add_temp_40[33]}}, add_temp_40});

  assign add_signext_82 = product_pipeline_phase0_36;
  assign add_signext_83 = product_pipeline_phase0_37;
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sumvector1[41] = $signed({{1{add_temp_41[33]}}, add_temp_41});

  assign add_signext_84 = product_pipeline_phase0_38;
  assign add_signext_85 = product_pipeline_phase0_39;
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sumvector1[42] = $signed({{1{add_temp_42[33]}}, add_temp_42});

  assign add_signext_86 = product_pipeline_phase0_40;
  assign add_signext_87 = product_pipeline_phase0_41;
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sumvector1[43] = $signed({{1{add_temp_43[33]}}, add_temp_43});

  assign add_signext_88 = product_pipeline_phase0_42;
  assign add_signext_89 = product_pipeline_phase0_43;
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sumvector1[44] = $signed({{1{add_temp_44[33]}}, add_temp_44});

  assign add_signext_90 = product_pipeline_phase0_44;
  assign add_signext_91 = product_pipeline_phase0_45;
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sumvector1[45] = $signed({{1{add_temp_45[33]}}, add_temp_45});

  assign add_signext_92 = product_pipeline_phase0_46;
  assign add_signext_93 = product_pipeline_phase0_47;
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sumvector1[46] = $signed({{1{add_temp_46[33]}}, add_temp_46});

  assign sumvector1[47] = $signed({{2{product_pipeline_phase0_48[32]}}, product_pipeline_phase0_48});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
        sumdelay_pipeline1[13] <= 0;
        sumdelay_pipeline1[14] <= 0;
        sumdelay_pipeline1[15] <= 0;
        sumdelay_pipeline1[16] <= 0;
        sumdelay_pipeline1[17] <= 0;
        sumdelay_pipeline1[18] <= 0;
        sumdelay_pipeline1[19] <= 0;
        sumdelay_pipeline1[20] <= 0;
        sumdelay_pipeline1[21] <= 0;
        sumdelay_pipeline1[22] <= 0;
        sumdelay_pipeline1[23] <= 0;
        sumdelay_pipeline1[24] <= 0;
        sumdelay_pipeline1[25] <= 0;
        sumdelay_pipeline1[26] <= 0;
        sumdelay_pipeline1[27] <= 0;
        sumdelay_pipeline1[28] <= 0;
        sumdelay_pipeline1[29] <= 0;
        sumdelay_pipeline1[30] <= 0;
        sumdelay_pipeline1[31] <= 0;
        sumdelay_pipeline1[32] <= 0;
        sumdelay_pipeline1[33] <= 0;
        sumdelay_pipeline1[34] <= 0;
        sumdelay_pipeline1[35] <= 0;
        sumdelay_pipeline1[36] <= 0;
        sumdelay_pipeline1[37] <= 0;
        sumdelay_pipeline1[38] <= 0;
        sumdelay_pipeline1[39] <= 0;
        sumdelay_pipeline1[40] <= 0;
        sumdelay_pipeline1[41] <= 0;
        sumdelay_pipeline1[42] <= 0;
        sumdelay_pipeline1[43] <= 0;
        sumdelay_pipeline1[44] <= 0;
        sumdelay_pipeline1[45] <= 0;
        sumdelay_pipeline1[46] <= 0;
        sumdelay_pipeline1[47] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
          sumdelay_pipeline1[13] <= sumvector1[13];
          sumdelay_pipeline1[14] <= sumvector1[14];
          sumdelay_pipeline1[15] <= sumvector1[15];
          sumdelay_pipeline1[16] <= sumvector1[16];
          sumdelay_pipeline1[17] <= sumvector1[17];
          sumdelay_pipeline1[18] <= sumvector1[18];
          sumdelay_pipeline1[19] <= sumvector1[19];
          sumdelay_pipeline1[20] <= sumvector1[20];
          sumdelay_pipeline1[21] <= sumvector1[21];
          sumdelay_pipeline1[22] <= sumvector1[22];
          sumdelay_pipeline1[23] <= sumvector1[23];
          sumdelay_pipeline1[24] <= sumvector1[24];
          sumdelay_pipeline1[25] <= sumvector1[25];
          sumdelay_pipeline1[26] <= sumvector1[26];
          sumdelay_pipeline1[27] <= sumvector1[27];
          sumdelay_pipeline1[28] <= sumvector1[28];
          sumdelay_pipeline1[29] <= sumvector1[29];
          sumdelay_pipeline1[30] <= sumvector1[30];
          sumdelay_pipeline1[31] <= sumvector1[31];
          sumdelay_pipeline1[32] <= sumvector1[32];
          sumdelay_pipeline1[33] <= sumvector1[33];
          sumdelay_pipeline1[34] <= sumvector1[34];
          sumdelay_pipeline1[35] <= sumvector1[35];
          sumdelay_pipeline1[36] <= sumvector1[36];
          sumdelay_pipeline1[37] <= sumvector1[37];
          sumdelay_pipeline1[38] <= sumvector1[38];
          sumdelay_pipeline1[39] <= sumvector1[39];
          sumdelay_pipeline1[40] <= sumvector1[40];
          sumdelay_pipeline1[41] <= sumvector1[41];
          sumdelay_pipeline1[42] <= sumvector1[42];
          sumdelay_pipeline1[43] <= sumvector1[43];
          sumdelay_pipeline1[44] <= sumvector1[44];
          sumdelay_pipeline1[45] <= sumvector1[45];
          sumdelay_pipeline1[46] <= sumvector1[46];
          sumdelay_pipeline1[47] <= sumvector1[47];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_94 = sumdelay_pipeline1[0];
  assign add_signext_95 = sumdelay_pipeline1[1];
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sumvector2[0] = add_temp_47[34:0];

  assign add_signext_96 = sumdelay_pipeline1[2];
  assign add_signext_97 = sumdelay_pipeline1[3];
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sumvector2[1] = add_temp_48[34:0];

  assign add_signext_98 = sumdelay_pipeline1[4];
  assign add_signext_99 = sumdelay_pipeline1[5];
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sumvector2[2] = add_temp_49[34:0];

  assign add_signext_100 = sumdelay_pipeline1[6];
  assign add_signext_101 = sumdelay_pipeline1[7];
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sumvector2[3] = add_temp_50[34:0];

  assign add_signext_102 = sumdelay_pipeline1[8];
  assign add_signext_103 = sumdelay_pipeline1[9];
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sumvector2[4] = add_temp_51[34:0];

  assign add_signext_104 = sumdelay_pipeline1[10];
  assign add_signext_105 = sumdelay_pipeline1[11];
  assign add_temp_52 = add_signext_104 + add_signext_105;
  assign sumvector2[5] = add_temp_52[34:0];

  assign add_signext_106 = sumdelay_pipeline1[12];
  assign add_signext_107 = sumdelay_pipeline1[13];
  assign add_temp_53 = add_signext_106 + add_signext_107;
  assign sumvector2[6] = add_temp_53[34:0];

  assign add_signext_108 = sumdelay_pipeline1[14];
  assign add_signext_109 = sumdelay_pipeline1[15];
  assign add_temp_54 = add_signext_108 + add_signext_109;
  assign sumvector2[7] = add_temp_54[34:0];

  assign add_signext_110 = sumdelay_pipeline1[16];
  assign add_signext_111 = sumdelay_pipeline1[17];
  assign add_temp_55 = add_signext_110 + add_signext_111;
  assign sumvector2[8] = add_temp_55[34:0];

  assign add_signext_112 = sumdelay_pipeline1[18];
  assign add_signext_113 = sumdelay_pipeline1[19];
  assign add_temp_56 = add_signext_112 + add_signext_113;
  assign sumvector2[9] = add_temp_56[34:0];

  assign add_signext_114 = sumdelay_pipeline1[20];
  assign add_signext_115 = sumdelay_pipeline1[21];
  assign add_temp_57 = add_signext_114 + add_signext_115;
  assign sumvector2[10] = add_temp_57[34:0];

  assign add_signext_116 = sumdelay_pipeline1[22];
  assign add_signext_117 = sumdelay_pipeline1[23];
  assign add_temp_58 = add_signext_116 + add_signext_117;
  assign sumvector2[11] = add_temp_58[34:0];

  assign add_signext_118 = sumdelay_pipeline1[24];
  assign add_signext_119 = sumdelay_pipeline1[25];
  assign add_temp_59 = add_signext_118 + add_signext_119;
  assign sumvector2[12] = add_temp_59[34:0];

  assign add_signext_120 = sumdelay_pipeline1[26];
  assign add_signext_121 = sumdelay_pipeline1[27];
  assign add_temp_60 = add_signext_120 + add_signext_121;
  assign sumvector2[13] = add_temp_60[34:0];

  assign add_signext_122 = sumdelay_pipeline1[28];
  assign add_signext_123 = sumdelay_pipeline1[29];
  assign add_temp_61 = add_signext_122 + add_signext_123;
  assign sumvector2[14] = add_temp_61[34:0];

  assign add_signext_124 = sumdelay_pipeline1[30];
  assign add_signext_125 = sumdelay_pipeline1[31];
  assign add_temp_62 = add_signext_124 + add_signext_125;
  assign sumvector2[15] = add_temp_62[34:0];

  assign add_signext_126 = sumdelay_pipeline1[32];
  assign add_signext_127 = sumdelay_pipeline1[33];
  assign add_temp_63 = add_signext_126 + add_signext_127;
  assign sumvector2[16] = add_temp_63[34:0];

  assign add_signext_128 = sumdelay_pipeline1[34];
  assign add_signext_129 = sumdelay_pipeline1[35];
  assign add_temp_64 = add_signext_128 + add_signext_129;
  assign sumvector2[17] = add_temp_64[34:0];

  assign add_signext_130 = sumdelay_pipeline1[36];
  assign add_signext_131 = sumdelay_pipeline1[37];
  assign add_temp_65 = add_signext_130 + add_signext_131;
  assign sumvector2[18] = add_temp_65[34:0];

  assign add_signext_132 = sumdelay_pipeline1[38];
  assign add_signext_133 = sumdelay_pipeline1[39];
  assign add_temp_66 = add_signext_132 + add_signext_133;
  assign sumvector2[19] = add_temp_66[34:0];

  assign add_signext_134 = sumdelay_pipeline1[40];
  assign add_signext_135 = sumdelay_pipeline1[41];
  assign add_temp_67 = add_signext_134 + add_signext_135;
  assign sumvector2[20] = add_temp_67[34:0];

  assign add_signext_136 = sumdelay_pipeline1[42];
  assign add_signext_137 = sumdelay_pipeline1[43];
  assign add_temp_68 = add_signext_136 + add_signext_137;
  assign sumvector2[21] = add_temp_68[34:0];

  assign add_signext_138 = sumdelay_pipeline1[44];
  assign add_signext_139 = sumdelay_pipeline1[45];
  assign add_temp_69 = add_signext_138 + add_signext_139;
  assign sumvector2[22] = add_temp_69[34:0];

  assign add_signext_140 = sumdelay_pipeline1[46];
  assign add_signext_141 = sumdelay_pipeline1[47];
  assign add_temp_70 = add_signext_140 + add_signext_141;
  assign sumvector2[23] = add_temp_70[34:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
        sumdelay_pipeline2[7] <= 0;
        sumdelay_pipeline2[8] <= 0;
        sumdelay_pipeline2[9] <= 0;
        sumdelay_pipeline2[10] <= 0;
        sumdelay_pipeline2[11] <= 0;
        sumdelay_pipeline2[12] <= 0;
        sumdelay_pipeline2[13] <= 0;
        sumdelay_pipeline2[14] <= 0;
        sumdelay_pipeline2[15] <= 0;
        sumdelay_pipeline2[16] <= 0;
        sumdelay_pipeline2[17] <= 0;
        sumdelay_pipeline2[18] <= 0;
        sumdelay_pipeline2[19] <= 0;
        sumdelay_pipeline2[20] <= 0;
        sumdelay_pipeline2[21] <= 0;
        sumdelay_pipeline2[22] <= 0;
        sumdelay_pipeline2[23] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
          sumdelay_pipeline2[7] <= sumvector2[7];
          sumdelay_pipeline2[8] <= sumvector2[8];
          sumdelay_pipeline2[9] <= sumvector2[9];
          sumdelay_pipeline2[10] <= sumvector2[10];
          sumdelay_pipeline2[11] <= sumvector2[11];
          sumdelay_pipeline2[12] <= sumvector2[12];
          sumdelay_pipeline2[13] <= sumvector2[13];
          sumdelay_pipeline2[14] <= sumvector2[14];
          sumdelay_pipeline2[15] <= sumvector2[15];
          sumdelay_pipeline2[16] <= sumvector2[16];
          sumdelay_pipeline2[17] <= sumvector2[17];
          sumdelay_pipeline2[18] <= sumvector2[18];
          sumdelay_pipeline2[19] <= sumvector2[19];
          sumdelay_pipeline2[20] <= sumvector2[20];
          sumdelay_pipeline2[21] <= sumvector2[21];
          sumdelay_pipeline2[22] <= sumvector2[22];
          sumdelay_pipeline2[23] <= sumvector2[23];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_142 = sumdelay_pipeline2[0];
  assign add_signext_143 = sumdelay_pipeline2[1];
  assign add_temp_71 = add_signext_142 + add_signext_143;
  assign sumvector3[0] = add_temp_71[34:0];

  assign add_signext_144 = sumdelay_pipeline2[2];
  assign add_signext_145 = sumdelay_pipeline2[3];
  assign add_temp_72 = add_signext_144 + add_signext_145;
  assign sumvector3[1] = add_temp_72[34:0];

  assign add_signext_146 = sumdelay_pipeline2[4];
  assign add_signext_147 = sumdelay_pipeline2[5];
  assign add_temp_73 = add_signext_146 + add_signext_147;
  assign sumvector3[2] = add_temp_73[34:0];

  assign add_signext_148 = sumdelay_pipeline2[6];
  assign add_signext_149 = sumdelay_pipeline2[7];
  assign add_temp_74 = add_signext_148 + add_signext_149;
  assign sumvector3[3] = add_temp_74[34:0];

  assign add_signext_150 = sumdelay_pipeline2[8];
  assign add_signext_151 = sumdelay_pipeline2[9];
  assign add_temp_75 = add_signext_150 + add_signext_151;
  assign sumvector3[4] = add_temp_75[34:0];

  assign add_signext_152 = sumdelay_pipeline2[10];
  assign add_signext_153 = sumdelay_pipeline2[11];
  assign add_temp_76 = add_signext_152 + add_signext_153;
  assign sumvector3[5] = add_temp_76[34:0];

  assign add_signext_154 = sumdelay_pipeline2[12];
  assign add_signext_155 = sumdelay_pipeline2[13];
  assign add_temp_77 = add_signext_154 + add_signext_155;
  assign sumvector3[6] = add_temp_77[34:0];

  assign add_signext_156 = sumdelay_pipeline2[14];
  assign add_signext_157 = sumdelay_pipeline2[15];
  assign add_temp_78 = add_signext_156 + add_signext_157;
  assign sumvector3[7] = add_temp_78[34:0];

  assign add_signext_158 = sumdelay_pipeline2[16];
  assign add_signext_159 = sumdelay_pipeline2[17];
  assign add_temp_79 = add_signext_158 + add_signext_159;
  assign sumvector3[8] = add_temp_79[34:0];

  assign add_signext_160 = sumdelay_pipeline2[18];
  assign add_signext_161 = sumdelay_pipeline2[19];
  assign add_temp_80 = add_signext_160 + add_signext_161;
  assign sumvector3[9] = add_temp_80[34:0];

  assign add_signext_162 = sumdelay_pipeline2[20];
  assign add_signext_163 = sumdelay_pipeline2[21];
  assign add_temp_81 = add_signext_162 + add_signext_163;
  assign sumvector3[10] = add_temp_81[34:0];

  assign add_signext_164 = sumdelay_pipeline2[22];
  assign add_signext_165 = sumdelay_pipeline2[23];
  assign add_temp_82 = add_signext_164 + add_signext_165;
  assign sumvector3[11] = add_temp_82[34:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
        sumdelay_pipeline3[4] <= 0;
        sumdelay_pipeline3[5] <= 0;
        sumdelay_pipeline3[6] <= 0;
        sumdelay_pipeline3[7] <= 0;
        sumdelay_pipeline3[8] <= 0;
        sumdelay_pipeline3[9] <= 0;
        sumdelay_pipeline3[10] <= 0;
        sumdelay_pipeline3[11] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
          sumdelay_pipeline3[4] <= sumvector3[4];
          sumdelay_pipeline3[5] <= sumvector3[5];
          sumdelay_pipeline3[6] <= sumvector3[6];
          sumdelay_pipeline3[7] <= sumvector3[7];
          sumdelay_pipeline3[8] <= sumvector3[8];
          sumdelay_pipeline3[9] <= sumvector3[9];
          sumdelay_pipeline3[10] <= sumvector3[10];
          sumdelay_pipeline3[11] <= sumvector3[11];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_166 = sumdelay_pipeline3[0];
  assign add_signext_167 = sumdelay_pipeline3[1];
  assign add_temp_83 = add_signext_166 + add_signext_167;
  assign sumvector4[0] = add_temp_83[34:0];

  assign add_signext_168 = sumdelay_pipeline3[2];
  assign add_signext_169 = sumdelay_pipeline3[3];
  assign add_temp_84 = add_signext_168 + add_signext_169;
  assign sumvector4[1] = add_temp_84[34:0];

  assign add_signext_170 = sumdelay_pipeline3[4];
  assign add_signext_171 = sumdelay_pipeline3[5];
  assign add_temp_85 = add_signext_170 + add_signext_171;
  assign sumvector4[2] = add_temp_85[34:0];

  assign add_signext_172 = sumdelay_pipeline3[6];
  assign add_signext_173 = sumdelay_pipeline3[7];
  assign add_temp_86 = add_signext_172 + add_signext_173;
  assign sumvector4[3] = add_temp_86[34:0];

  assign add_signext_174 = sumdelay_pipeline3[8];
  assign add_signext_175 = sumdelay_pipeline3[9];
  assign add_temp_87 = add_signext_174 + add_signext_175;
  assign sumvector4[4] = add_temp_87[34:0];

  assign add_signext_176 = sumdelay_pipeline3[10];
  assign add_signext_177 = sumdelay_pipeline3[11];
  assign add_temp_88 = add_signext_176 + add_signext_177;
  assign sumvector4[5] = add_temp_88[34:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
        sumdelay_pipeline4[2] <= 0;
        sumdelay_pipeline4[3] <= 0;
        sumdelay_pipeline4[4] <= 0;
        sumdelay_pipeline4[5] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
          sumdelay_pipeline4[2] <= sumvector4[2];
          sumdelay_pipeline4[3] <= sumvector4[3];
          sumdelay_pipeline4[4] <= sumvector4[4];
          sumdelay_pipeline4[5] <= sumvector4[5];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_178 = sumdelay_pipeline4[0];
  assign add_signext_179 = sumdelay_pipeline4[1];
  assign add_temp_89 = add_signext_178 + add_signext_179;
  assign sumvector5[0] = add_temp_89[34:0];

  assign add_signext_180 = sumdelay_pipeline4[2];
  assign add_signext_181 = sumdelay_pipeline4[3];
  assign add_temp_90 = add_signext_180 + add_signext_181;
  assign sumvector5[1] = add_temp_90[34:0];

  assign add_signext_182 = sumdelay_pipeline4[4];
  assign add_signext_183 = sumdelay_pipeline4[5];
  assign add_temp_91 = add_signext_182 + add_signext_183;
  assign sumvector5[2] = add_temp_91[34:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process5
      if (reset == 1'b1) begin
        sumdelay_pipeline5[0] <= 0;
        sumdelay_pipeline5[1] <= 0;
        sumdelay_pipeline5[2] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline5[0] <= sumvector5[0];
          sumdelay_pipeline5[1] <= sumvector5[1];
          sumdelay_pipeline5[2] <= sumvector5[2];
        end
      end
    end // sumdelay_pipeline_process5

  assign add_signext_184 = sumdelay_pipeline5[0];
  assign add_signext_185 = sumdelay_pipeline5[1];
  assign add_temp_92 = add_signext_184 + add_signext_185;
  assign sumvector6[0] = add_temp_92[34:0];

  assign sumvector6[1] = sumdelay_pipeline5[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process6
      if (reset == 1'b1) begin
        sumdelay_pipeline6[0] <= 0;
        sumdelay_pipeline6[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline6[0] <= sumvector6[0];
          sumdelay_pipeline6[1] <= sumvector6[1];
        end
      end
    end // sumdelay_pipeline_process6

  assign add_signext_186 = sumdelay_pipeline6[0];
  assign add_signext_187 = sumdelay_pipeline6[1];
  assign add_temp_93 = add_signext_186 + add_signext_187;
  assign sum7 = add_temp_93[34:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
        ce_delayline9 <= 1'b0;
        ce_delayline10 <= 1'b0;
        ce_delayline11 <= 1'b0;
        ce_delayline12 <= 1'b0;
        ce_delayline13 <= 1'b0;
        ce_delayline14 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_delayline1 <= clk_enable;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
          ce_delayline9 <= ce_delayline8;
          ce_delayline10 <= ce_delayline9;
          ce_delayline11 <= ce_delayline10;
          ce_delayline12 <= ce_delayline11;
          ce_delayline13 <= ce_delayline12;
          ce_delayline14 <= ce_delayline13;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline14 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= sum7;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_gated;
  assign filter_out = output_register;
endmodule  // CFIR
