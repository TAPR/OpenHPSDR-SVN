// -------------------------------------------------------------
//
// Module: cicint
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-11 10:40:00
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: cicint
// TargetDirectory: C:\DOCUME~1\phil\LOCALS~1\Temp\tp395924\hdlsrc
// SerialPartition: -1
// CastBeforeSum: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure        : Cascaded Integrator-Comb Interpolator
// Interpolation Factor    : 2048
// Differential Delay      : 1
// Number of Sections      : 5
// Stable                  : Yes
// Linear Phase            : Yes (Type 2)
//
// Input                   : s14,0
// Output                  : s14,-44
// Filter Internals        : Minimum Word Lengths
//   Integrator Section 1  : s15,0
//   Integrator Section 2  : s16,0
//   Integrator Section 3  : s17,0
//   Integrator Section 4  : s18,0
//   Integrator Section 5  : s18,0
//   Comb Section 1        : s18,0
//   Comb Section 2        : s28,0
//   Comb Section 3        : s38,0
//   Comb Section 4        : s48,0
//   Comb Section 5        : s58,0
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 10
// Number of States      : 10
// MultPerInputSample    : 0
// AddPerInputSample     : 10245
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cicint 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [13:0] filter_in; //sfix14
  output  signed [13:0] filter_out; //sfix14_E44
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: cicint
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [17:0] zeroconst = 18'b000000000000000000; //sfix18
  // Signals
  reg  [10:0] cur_count; // ufix11
  wire phase_0; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [13:0] input_register; // sfix14
  //   -- Section 1 Signals 
  wire signed [13:0] section_in1; // sfix14
  wire signed [14:0] section_cast1; // sfix15
  reg  signed [14:0] diff1; // sfix15
  wire signed [14:0] section_out1; // sfix15
  wire signed [14:0] sub_cast; // sfix15
  wire signed [14:0] sub_cast_1; // sfix15
  wire signed [15:0] sub_temp; // sfix16
  //   -- Section 2 Signals 
  wire signed [14:0] section_in2; // sfix15
  wire signed [15:0] section_cast2; // sfix16
  reg  signed [15:0] diff2; // sfix16
  wire signed [15:0] section_out2; // sfix16
  wire signed [15:0] sub_cast_2; // sfix16
  wire signed [15:0] sub_cast_3; // sfix16
  wire signed [16:0] sub_temp_1; // sfix17
  //   -- Section 3 Signals 
  wire signed [15:0] section_in3; // sfix16
  wire signed [16:0] section_cast3; // sfix17
  reg  signed [16:0] diff3; // sfix17
  wire signed [16:0] section_out3; // sfix17
  wire signed [16:0] sub_cast_4; // sfix17
  wire signed [16:0] sub_cast_5; // sfix17
  wire signed [17:0] sub_temp_2; // sfix18
  //   -- Section 4 Signals 
  wire signed [16:0] section_in4; // sfix17
  wire signed [17:0] section_cast4; // sfix18
  reg  signed [17:0] diff4; // sfix18
  wire signed [17:0] section_out4; // sfix18
  wire signed [17:0] sub_cast_6; // sfix18
  wire signed [17:0] sub_cast_7; // sfix18
  wire signed [18:0] sub_temp_3; // sfix19
  //   -- Section 5 Signals 
  wire signed [17:0] section_in5; // sfix18
  reg  signed [17:0] diff5; // sfix18
  wire signed [17:0] section_out5; // sfix18
  wire signed [17:0] sub_cast_8; // sfix18
  wire signed [17:0] sub_cast_9; // sfix18
  wire signed [18:0] sub_temp_4; // sfix19
  wire signed [17:0] upsampling; // sfix18
  //   -- Section 6 Signals 
  wire signed [17:0] section_in6; // sfix18
  wire signed [17:0] sum1; // sfix18
  reg  signed [17:0] section_out6; // sfix18
  wire signed [17:0] add_cast; // sfix18
  wire signed [17:0] add_cast_1; // sfix18
  wire signed [18:0] add_temp; // sfix19
  //   -- Section 7 Signals 
  wire signed [17:0] section_in7; // sfix18
  wire signed [27:0] section_cast7; // sfix28
  wire signed [27:0] sum2; // sfix28
  reg  signed [27:0] section_out7; // sfix28
  wire signed [27:0] add_cast_2; // sfix28
  wire signed [27:0] add_cast_3; // sfix28
  wire signed [28:0] add_temp_1; // sfix29
  //   -- Section 8 Signals 
  wire signed [27:0] section_in8; // sfix28
  wire signed [37:0] section_cast8; // sfix38
  wire signed [37:0] sum3; // sfix38
  reg  signed [37:0] section_out8; // sfix38
  wire signed [37:0] add_cast_4; // sfix38
  wire signed [37:0] add_cast_5; // sfix38
  wire signed [38:0] add_temp_2; // sfix39
  //   -- Section 9 Signals 
  wire signed [37:0] section_in9; // sfix38
  wire signed [47:0] section_cast9; // sfix48
  wire signed [47:0] sum4; // sfix48
  reg  signed [47:0] section_out9; // sfix48
  wire signed [47:0] add_cast_6; // sfix48
  wire signed [47:0] add_cast_7; // sfix48
  wire signed [48:0] add_temp_3; // sfix49
  //   -- Section 10 Signals 
  wire signed [47:0] section_in10; // sfix48
  wire signed [57:0] section_cast10; // sfix58
  wire signed [57:0] sum5; // sfix58
  reg  signed [57:0] section_out10; // sfix58
  wire signed [57:0] add_cast_8; // sfix58
  wire signed [57:0] add_cast_9; // sfix58
  wire signed [58:0] add_temp_4; // sfix59
  wire signed [13:0] output_typeconvert; // sfix14_E44
  //   
  reg  signed [13:0] output_register; // sfix14_E44

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 11'b00000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 11'b11111111111) begin
            cur_count <= 11'b00000000000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_0 = (cur_count == 11'b00000000000 && clk_enable == 1'b1)? 1 : 0;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_0;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Comb ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({{1{section_in1[13]}}, section_in1});

  assign sub_cast = section_cast1;
  assign sub_cast_1 = diff1;
  assign sub_temp = sub_cast - sub_cast_1;
  assign section_out1 = sub_temp[14:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section1
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff1 <= section_cast1;
        end
      end
    end // comb_delay_section1

  //   ------------------ Section # 2 : Comb ------------------

  assign section_in2 = section_out1;

  assign section_cast2 = $signed({{1{section_in2[14]}}, section_in2});

  assign sub_cast_2 = section_cast2;
  assign sub_cast_3 = diff2;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign section_out2 = sub_temp_1[15:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section2
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff2 <= section_cast2;
        end
      end
    end // comb_delay_section2

  //   ------------------ Section # 3 : Comb ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = $signed({{1{section_in3[15]}}, section_in3});

  assign sub_cast_4 = section_cast3;
  assign sub_cast_5 = diff3;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign section_out3 = sub_temp_2[16:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section3
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff3 <= section_cast3;
        end
      end
    end // comb_delay_section3

  //   ------------------ Section # 4 : Comb ------------------

  assign section_in4 = section_out3;

  assign section_cast4 = $signed({{1{section_in4[16]}}, section_in4});

  assign sub_cast_6 = section_cast4;
  assign sub_cast_7 = diff4;
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign section_out4 = sub_temp_3[17:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section4
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff4 <= section_cast4;
        end
      end
    end // comb_delay_section4

  //   ------------------ Section # 5 : Comb ------------------

  assign section_in5 = section_out4;

  assign sub_cast_8 = section_in5;
  assign sub_cast_9 = diff5;
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign section_out5 = sub_temp_4[17:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section5
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff5 <= section_in5;
        end
      end
    end // comb_delay_section5

  assign upsampling = (phase_0 == 1'b1) ? section_out5 : zeroconst;
  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = upsampling;

  assign add_cast = section_in6;
  assign add_cast_1 = section_out6;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[17:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out6 <= sum1;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Integrator ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = $signed({{10{section_in7[17]}}, section_in7});

  assign add_cast_2 = section_cast7;
  assign add_cast_3 = section_out7;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[27:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section7
      if (reset == 1'b1) begin
        section_out7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out7 <= sum2;
        end
      end
    end // integrator_delay_section7

  //   ------------------ Section # 8 : Integrator ------------------

  assign section_in8 = section_out7;

  assign section_cast8 = $signed({{10{section_in8[27]}}, section_in8});

  assign add_cast_4 = section_cast8;
  assign add_cast_5 = section_out8;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[37:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section8
      if (reset == 1'b1) begin
        section_out8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out8 <= sum3;
        end
      end
    end // integrator_delay_section8

  //   ------------------ Section # 9 : Integrator ------------------

  assign section_in9 = section_out8;

  assign section_cast9 = $signed({{10{section_in9[37]}}, section_in9});

  assign add_cast_6 = section_cast9;
  assign add_cast_7 = section_out9;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[47:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section9
      if (reset == 1'b1) begin
        section_out9 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out9 <= sum4;
        end
      end
    end // integrator_delay_section9

  //   ------------------ Section # 10 : Integrator ------------------

  assign section_in10 = section_out9;

  assign section_cast10 = $signed({{10{section_in10[47]}}, section_in10});

  assign add_cast_8 = section_cast10;
  assign add_cast_9 = section_out10;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[57:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section10
      if (reset == 1'b1) begin
        section_out10 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out10 <= sum5;
        end
      end
    end // integrator_delay_section10

  assign output_typeconvert = section_out10[57:44];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // cicint
