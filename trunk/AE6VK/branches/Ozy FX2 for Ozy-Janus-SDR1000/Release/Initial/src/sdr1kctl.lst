                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Mar 22 2009) (MINGW32)
                              4 ; This file was generated Mon Jan 04 09:33:56 2010
                              5 ;--------------------------------------------------------
                              6 	.module sdr1kctl
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _SDR1k_Control_Read_Version_PARM_2
                             13 	.globl _byteToHex_PARM_2
                             14 	.globl _SDR1k_ControlIn
                             15 	.globl _SDR1k_Control_Read_Version
                             16 	.globl _SDR1k_Control_Read_Status
                             17 	.globl _SDR1k_ControlOut
                             18 	.globl _SDR1k_Control_SR_Load
                             19 	.globl _SDR1k_Control_DDS_Write
                             20 	.globl _SDR1k_Control_DDS_Reset
                             21 	.globl _SDR1k_Control_Latch
                             22 	.globl _SDR1k_Control_delay
                             23 	.globl _SDR1k_Control_setDataReg
                             24 	.globl _byteToHex
                             25 	.globl _bitALTERA_DCLK
                             26 	.globl _bitALTERA_DATA0
                             27 	.globl _bitS_IN
                             28 	.globl _bitS_OUT
                             29 	.globl _bitS_CLK
                             30 	.globl _EIPX6
                             31 	.globl _EIPX5
                             32 	.globl _EIPX4
                             33 	.globl _PI2C
                             34 	.globl _PUSB
                             35 	.globl _EIEX6
                             36 	.globl _EIEX5
                             37 	.globl _EIEX4
                             38 	.globl _EI2C
                             39 	.globl _EIUSB
                             40 	.globl _SMOD1
                             41 	.globl _ERESI
                             42 	.globl _RESI
                             43 	.globl _INT6
                             44 	.globl _CY
                             45 	.globl _AC
                             46 	.globl _F0
                             47 	.globl _RS1
                             48 	.globl _RS0
                             49 	.globl _OV
                             50 	.globl _FL
                             51 	.globl _P
                             52 	.globl _TF2
                             53 	.globl _EXF2
                             54 	.globl _RCLK
                             55 	.globl _TCLK
                             56 	.globl _EXEN2
                             57 	.globl _TR2
                             58 	.globl _C_T2
                             59 	.globl _CP_RL2
                             60 	.globl _SM01
                             61 	.globl _SM11
                             62 	.globl _SM21
                             63 	.globl _REN1
                             64 	.globl _TB81
                             65 	.globl _RB81
                             66 	.globl _TI1
                             67 	.globl _RI1
                             68 	.globl _PS1
                             69 	.globl _PT2
                             70 	.globl _PS0
                             71 	.globl _PT1
                             72 	.globl _PX1
                             73 	.globl _PT0
                             74 	.globl _PX0
                             75 	.globl _EA
                             76 	.globl _ES1
                             77 	.globl _ET2
                             78 	.globl _ES0
                             79 	.globl _ET1
                             80 	.globl _EX1
                             81 	.globl _ET0
                             82 	.globl _EX0
                             83 	.globl _SM0
                             84 	.globl _SM1
                             85 	.globl _SM2
                             86 	.globl _REN
                             87 	.globl _TB8
                             88 	.globl _RB8
                             89 	.globl _TI
                             90 	.globl _RI
                             91 	.globl _TF1
                             92 	.globl _TR1
                             93 	.globl _TF0
                             94 	.globl _TR0
                             95 	.globl _IE1
                             96 	.globl _IT1
                             97 	.globl _IE0
                             98 	.globl _IT0
                             99 	.globl _SEL
                            100 	.globl _EIP
                            101 	.globl _B
                            102 	.globl _EIE
                            103 	.globl _ACC
                            104 	.globl _EICON
                            105 	.globl _PSW
                            106 	.globl _TH2
                            107 	.globl _TL2
                            108 	.globl _RCAP2H
                            109 	.globl _RCAP2L
                            110 	.globl _T2CON
                            111 	.globl _SBUF1
                            112 	.globl _SCON1
                            113 	.globl _GPIFSGLDATLNOX
                            114 	.globl _GPIFSGLDATLX
                            115 	.globl _GPIFSGLDATH
                            116 	.globl _GPIFTRIG
                            117 	.globl _EP01STAT
                            118 	.globl _IP
                            119 	.globl _OEE
                            120 	.globl _OED
                            121 	.globl _OEC
                            122 	.globl _OEB
                            123 	.globl _OEA
                            124 	.globl _IOE
                            125 	.globl _IOD
                            126 	.globl _AUTOPTRSETUP
                            127 	.globl _EP68FIFOFLGS
                            128 	.globl _EP24FIFOFLGS
                            129 	.globl _EP2468STAT
                            130 	.globl _IE
                            131 	.globl _INT4CLR
                            132 	.globl _INT2CLR
                            133 	.globl _IOC
                            134 	.globl _AUTODAT2
                            135 	.globl _AUTOPTRL2
                            136 	.globl _AUTOPTRH2
                            137 	.globl _AUTODAT1
                            138 	.globl _APTR1L
                            139 	.globl _APTR1H
                            140 	.globl _SBUF0
                            141 	.globl _SCON0
                            142 	.globl _MPAGE
                            143 	.globl _EXIF
                            144 	.globl _IOB
                            145 	.globl _CKCON
                            146 	.globl _TH1
                            147 	.globl _TH0
                            148 	.globl _TL1
                            149 	.globl _TL0
                            150 	.globl _TMOD
                            151 	.globl _TCON
                            152 	.globl _PCON
                            153 	.globl _DPS
                            154 	.globl _DPH1
                            155 	.globl _DPL1
                            156 	.globl _DPH
                            157 	.globl _DPL
                            158 	.globl _SP
                            159 	.globl _IOA
                            160 	.globl _EP8FIFOBUF
                            161 	.globl _EP6FIFOBUF
                            162 	.globl _EP4FIFOBUF
                            163 	.globl _EP2FIFOBUF
                            164 	.globl _EP1INBUF
                            165 	.globl _EP1OUTBUF
                            166 	.globl _EP0BUF
                            167 	.globl _CT4
                            168 	.globl _CT3
                            169 	.globl _CT2
                            170 	.globl _CT1
                            171 	.globl _USBTEST
                            172 	.globl _TESTCFG
                            173 	.globl _DBUG
                            174 	.globl _UDMACRCQUAL
                            175 	.globl _UDMACRCL
                            176 	.globl _UDMACRCH
                            177 	.globl _GPIFHOLDAMOUNT
                            178 	.globl _FLOWSTBHPERIOD
                            179 	.globl _FLOWSTBEDGE
                            180 	.globl _FLOWSTB
                            181 	.globl _FLOWHOLDOFF
                            182 	.globl _FLOWEQ1CTL
                            183 	.globl _FLOWEQ0CTL
                            184 	.globl _FLOWLOGIC
                            185 	.globl _FLOWSTATE
                            186 	.globl _GPIFABORT
                            187 	.globl _GPIFREADYSTAT
                            188 	.globl _GPIFREADYCFG
                            189 	.globl _XGPIFSGLDATLNOX
                            190 	.globl _XGPIFSGLDATLX
                            191 	.globl _XGPIFSGLDATH
                            192 	.globl _EP8GPIFTRIG
                            193 	.globl _EP8GPIFPFSTOP
                            194 	.globl _EP8GPIFFLGSEL
                            195 	.globl _EP6GPIFTRIG
                            196 	.globl _EP6GPIFPFSTOP
                            197 	.globl _EP6GPIFFLGSEL
                            198 	.globl _EP4GPIFTRIG
                            199 	.globl _EP4GPIFPFSTOP
                            200 	.globl _EP4GPIFFLGSEL
                            201 	.globl _EP2GPIFTRIG
                            202 	.globl _EP2GPIFPFSTOP
                            203 	.globl _EP2GPIFFLGSEL
                            204 	.globl _GPIFTCB0
                            205 	.globl _GPIFTCB1
                            206 	.globl _GPIFTCB2
                            207 	.globl _GPIFTCB3
                            208 	.globl _GPIFADRL
                            209 	.globl _GPIFADRH
                            210 	.globl _GPIFCTLCFG
                            211 	.globl _GPIFIDLECTL
                            212 	.globl _GPIFIDLECS
                            213 	.globl _GPIFWFSELECT
                            214 	.globl _SETUPDAT
                            215 	.globl _SUDPTRCTL
                            216 	.globl _SUDPTRL
                            217 	.globl _SUDPTRH
                            218 	.globl _EP8FIFOBCL
                            219 	.globl _EP8FIFOBCH
                            220 	.globl _EP6FIFOBCL
                            221 	.globl _EP6FIFOBCH
                            222 	.globl _EP4FIFOBCL
                            223 	.globl _EP4FIFOBCH
                            224 	.globl _EP2FIFOBCL
                            225 	.globl _EP2FIFOBCH
                            226 	.globl _EP8FIFOFLGS
                            227 	.globl _EP6FIFOFLGS
                            228 	.globl _EP4FIFOFLGS
                            229 	.globl _EP2FIFOFLGS
                            230 	.globl _EP8CS
                            231 	.globl _EP6CS
                            232 	.globl _EP4CS
                            233 	.globl _EP2CS
                            234 	.globl _EP1INCS
                            235 	.globl _EP1OUTCS
                            236 	.globl _EP0CS
                            237 	.globl _EP8BCL
                            238 	.globl _EP8BCH
                            239 	.globl _EP6BCL
                            240 	.globl _EP6BCH
                            241 	.globl _EP4BCL
                            242 	.globl _EP4BCH
                            243 	.globl _EP2BCL
                            244 	.globl _EP2BCH
                            245 	.globl _EP1INBC
                            246 	.globl _EP1OUTBC
                            247 	.globl _EP0BCL
                            248 	.globl _EP0BCH
                            249 	.globl _FNADDR
                            250 	.globl _MICROFRAME
                            251 	.globl _USBFRAMEL
                            252 	.globl _USBFRAMEH
                            253 	.globl _TOGCTL
                            254 	.globl _WAKEUPCS
                            255 	.globl _SUSPEND
                            256 	.globl _USBCS
                            257 	.globl _XAUTODAT2
                            258 	.globl _XAUTODAT1
                            259 	.globl _I2CTL
                            260 	.globl _I2DAT
                            261 	.globl _I2CS
                            262 	.globl _PORTECFG
                            263 	.globl _PORTCCFG
                            264 	.globl _PORTACFG
                            265 	.globl _INTSETUP
                            266 	.globl _INT4IVEC
                            267 	.globl _INT2IVEC
                            268 	.globl _CLRERRCNT
                            269 	.globl _ERRCNTLIM
                            270 	.globl _USBERRIRQ
                            271 	.globl _USBERRIE
                            272 	.globl _GPIFIRQ
                            273 	.globl _GPIFIE
                            274 	.globl _EPIRQ
                            275 	.globl _EPIE
                            276 	.globl _USBIRQ
                            277 	.globl _USBIE
                            278 	.globl _NAKIRQ
                            279 	.globl _NAKIE
                            280 	.globl _IBNIRQ
                            281 	.globl _IBNIE
                            282 	.globl _EP8FIFOIRQ
                            283 	.globl _EP8FIFOIE
                            284 	.globl _EP6FIFOIRQ
                            285 	.globl _EP6FIFOIE
                            286 	.globl _EP4FIFOIRQ
                            287 	.globl _EP4FIFOIE
                            288 	.globl _EP2FIFOIRQ
                            289 	.globl _EP2FIFOIE
                            290 	.globl _OUTPKTEND
                            291 	.globl _INPKTEND
                            292 	.globl _EP8ISOINPKTS
                            293 	.globl _EP6ISOINPKTS
                            294 	.globl _EP4ISOINPKTS
                            295 	.globl _EP2ISOINPKTS
                            296 	.globl _EP8FIFOPFL
                            297 	.globl _EP8FIFOPFH
                            298 	.globl _EP6FIFOPFL
                            299 	.globl _EP6FIFOPFH
                            300 	.globl _EP4FIFOPFL
                            301 	.globl _EP4FIFOPFH
                            302 	.globl _EP2FIFOPFL
                            303 	.globl _EP2FIFOPFH
                            304 	.globl _EP8AUTOINLENL
                            305 	.globl _EP8AUTOINLENH
                            306 	.globl _EP6AUTOINLENL
                            307 	.globl _EP6AUTOINLENH
                            308 	.globl _EP4AUTOINLENL
                            309 	.globl _EP4AUTOINLENH
                            310 	.globl _EP2AUTOINLENL
                            311 	.globl _EP2AUTOINLENH
                            312 	.globl _EP8FIFOCFG
                            313 	.globl _EP6FIFOCFG
                            314 	.globl _EP4FIFOCFG
                            315 	.globl _EP2FIFOCFG
                            316 	.globl _EP8CFG
                            317 	.globl _EP6CFG
                            318 	.globl _EP4CFG
                            319 	.globl _EP2CFG
                            320 	.globl _EP1INCFG
                            321 	.globl _EP1OUTCFG
                            322 	.globl _REVCTL
                            323 	.globl _REVID
                            324 	.globl _FIFOPINPOLAR
                            325 	.globl _UART230
                            326 	.globl _BPADDRL
                            327 	.globl _BPADDRH
                            328 	.globl _BREAKPT
                            329 	.globl _FIFORESET
                            330 	.globl _PINFLAGSCD
                            331 	.globl _PINFLAGSAB
                            332 	.globl _IFCONFIG
                            333 	.globl _CPUCS
                            334 	.globl _RES_WAVEDATA_END
                            335 	.globl _GPIF_WAVE_DATA
                            336 	.globl _SDR1k_ControlIn_PARM_6
                            337 	.globl _SDR1k_ControlIn_PARM_5
                            338 	.globl _SDR1k_ControlIn_PARM_4
                            339 	.globl _SDR1k_ControlIn_PARM_3
                            340 	.globl _SDR1k_ControlIn_PARM_2
                            341 	.globl _SDR1k_Control_Read_Status_PARM_2
                            342 	.globl _SDR1k_ControlOut_PARM_6
                            343 	.globl _SDR1k_ControlOut_PARM_5
                            344 	.globl _SDR1k_ControlOut_PARM_4
                            345 	.globl _SDR1k_ControlOut_PARM_3
                            346 	.globl _SDR1k_ControlOut_PARM_2
                            347 	.globl _SDR1k_Control_SR_Load_PARM_2
                            348 	.globl _SDR1k_Control_DDS_Write_PARM_2
                            349 	.globl _SDR1k_Control_Latch_PARM_2
                            350 	.globl _LastBPF_Value
                            351 ;--------------------------------------------------------
                            352 ; special function registers
                            353 ;--------------------------------------------------------
                            354 	.area RSEG    (DATA)
                    0080    355 _IOA	=	0x0080
                    0081    356 _SP	=	0x0081
                    0082    357 _DPL	=	0x0082
                    0083    358 _DPH	=	0x0083
                    0084    359 _DPL1	=	0x0084
                    0085    360 _DPH1	=	0x0085
                    0086    361 _DPS	=	0x0086
                    0087    362 _PCON	=	0x0087
                    0088    363 _TCON	=	0x0088
                    0089    364 _TMOD	=	0x0089
                    008A    365 _TL0	=	0x008a
                    008B    366 _TL1	=	0x008b
                    008C    367 _TH0	=	0x008c
                    008D    368 _TH1	=	0x008d
                    008E    369 _CKCON	=	0x008e
                    0090    370 _IOB	=	0x0090
                    0091    371 _EXIF	=	0x0091
                    0092    372 _MPAGE	=	0x0092
                    0098    373 _SCON0	=	0x0098
                    0099    374 _SBUF0	=	0x0099
                    009A    375 _APTR1H	=	0x009a
                    009B    376 _APTR1L	=	0x009b
                    009C    377 _AUTODAT1	=	0x009c
                    009D    378 _AUTOPTRH2	=	0x009d
                    009E    379 _AUTOPTRL2	=	0x009e
                    009F    380 _AUTODAT2	=	0x009f
                    00A0    381 _IOC	=	0x00a0
                    00A1    382 _INT2CLR	=	0x00a1
                    00A2    383 _INT4CLR	=	0x00a2
                    00A8    384 _IE	=	0x00a8
                    00AA    385 _EP2468STAT	=	0x00aa
                    00AB    386 _EP24FIFOFLGS	=	0x00ab
                    00AC    387 _EP68FIFOFLGS	=	0x00ac
                    00AF    388 _AUTOPTRSETUP	=	0x00af
                    00B0    389 _IOD	=	0x00b0
                    00B1    390 _IOE	=	0x00b1
                    00B2    391 _OEA	=	0x00b2
                    00B3    392 _OEB	=	0x00b3
                    00B4    393 _OEC	=	0x00b4
                    00B5    394 _OED	=	0x00b5
                    00B6    395 _OEE	=	0x00b6
                    00B8    396 _IP	=	0x00b8
                    00BA    397 _EP01STAT	=	0x00ba
                    00BB    398 _GPIFTRIG	=	0x00bb
                    00BD    399 _GPIFSGLDATH	=	0x00bd
                    00BE    400 _GPIFSGLDATLX	=	0x00be
                    00BF    401 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    402 _SCON1	=	0x00c0
                    00C1    403 _SBUF1	=	0x00c1
                    00C8    404 _T2CON	=	0x00c8
                    00CA    405 _RCAP2L	=	0x00ca
                    00CB    406 _RCAP2H	=	0x00cb
                    00CC    407 _TL2	=	0x00cc
                    00CD    408 _TH2	=	0x00cd
                    00D0    409 _PSW	=	0x00d0
                    00D8    410 _EICON	=	0x00d8
                    00E0    411 _ACC	=	0x00e0
                    00E8    412 _EIE	=	0x00e8
                    00F0    413 _B	=	0x00f0
                    00F8    414 _EIP	=	0x00f8
                            415 ;--------------------------------------------------------
                            416 ; special function bits
                            417 ;--------------------------------------------------------
                            418 	.area RSEG    (DATA)
                    0086    419 _SEL	=	0x0086
                    0088    420 _IT0	=	0x0088
                    0089    421 _IE0	=	0x0089
                    008A    422 _IT1	=	0x008a
                    008B    423 _IE1	=	0x008b
                    008C    424 _TR0	=	0x008c
                    008D    425 _TF0	=	0x008d
                    008E    426 _TR1	=	0x008e
                    008F    427 _TF1	=	0x008f
                    0098    428 _RI	=	0x0098
                    0099    429 _TI	=	0x0099
                    009A    430 _RB8	=	0x009a
                    009B    431 _TB8	=	0x009b
                    009C    432 _REN	=	0x009c
                    009D    433 _SM2	=	0x009d
                    009E    434 _SM1	=	0x009e
                    009F    435 _SM0	=	0x009f
                    00A8    436 _EX0	=	0x00a8
                    00A9    437 _ET0	=	0x00a9
                    00AA    438 _EX1	=	0x00aa
                    00AB    439 _ET1	=	0x00ab
                    00AC    440 _ES0	=	0x00ac
                    00AD    441 _ET2	=	0x00ad
                    00AE    442 _ES1	=	0x00ae
                    00AF    443 _EA	=	0x00af
                    00B8    444 _PX0	=	0x00b8
                    00B9    445 _PT0	=	0x00b9
                    00BA    446 _PX1	=	0x00ba
                    00BB    447 _PT1	=	0x00bb
                    00BC    448 _PS0	=	0x00bc
                    00BD    449 _PT2	=	0x00bd
                    00BE    450 _PS1	=	0x00be
                    00C0    451 _RI1	=	0x00c0
                    00C1    452 _TI1	=	0x00c1
                    00C2    453 _RB81	=	0x00c2
                    00C3    454 _TB81	=	0x00c3
                    00C4    455 _REN1	=	0x00c4
                    00C5    456 _SM21	=	0x00c5
                    00C6    457 _SM11	=	0x00c6
                    00C7    458 _SM01	=	0x00c7
                    00C8    459 _CP_RL2	=	0x00c8
                    00C9    460 _C_T2	=	0x00c9
                    00CA    461 _TR2	=	0x00ca
                    00CB    462 _EXEN2	=	0x00cb
                    00CC    463 _TCLK	=	0x00cc
                    00CD    464 _RCLK	=	0x00cd
                    00CE    465 _EXF2	=	0x00ce
                    00CF    466 _TF2	=	0x00cf
                    00D0    467 _P	=	0x00d0
                    00D1    468 _FL	=	0x00d1
                    00D2    469 _OV	=	0x00d2
                    00D3    470 _RS0	=	0x00d3
                    00D4    471 _RS1	=	0x00d4
                    00D5    472 _F0	=	0x00d5
                    00D6    473 _AC	=	0x00d6
                    00D7    474 _CY	=	0x00d7
                    00DB    475 _INT6	=	0x00db
                    00DC    476 _RESI	=	0x00dc
                    00DD    477 _ERESI	=	0x00dd
                    00DF    478 _SMOD1	=	0x00df
                    00E8    479 _EIUSB	=	0x00e8
                    00E9    480 _EI2C	=	0x00e9
                    00EA    481 _EIEX4	=	0x00ea
                    00EB    482 _EIEX5	=	0x00eb
                    00EC    483 _EIEX6	=	0x00ec
                    00F8    484 _PUSB	=	0x00f8
                    00F9    485 _PI2C	=	0x00f9
                    00FA    486 _EIPX4	=	0x00fa
                    00FB    487 _EIPX5	=	0x00fb
                    00FC    488 _EIPX6	=	0x00fc
                    0080    489 _bitS_CLK	=	0x0080
                    0081    490 _bitS_OUT	=	0x0081
                    0083    491 _bitS_IN	=	0x0083
                    00A0    492 _bitALTERA_DATA0	=	0x00a0
                    00A2    493 _bitALTERA_DCLK	=	0x00a2
                            494 ;--------------------------------------------------------
                            495 ; overlayable register banks
                            496 ;--------------------------------------------------------
                            497 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     498 	.ds 8
                            499 ;--------------------------------------------------------
                            500 ; internal ram data
                            501 ;--------------------------------------------------------
                            502 	.area DSEG    (DATA)
   0000                     503 _SDR1k_Control_setDataReg_bbuf_1_1:
   0000                     504 	.ds 3
   0003                     505 _LastBPF_Value::
   0003                     506 	.ds 1
   0004                     507 _SDR1k_Control_Latch_PARM_2:
   0004                     508 	.ds 1
   0005                     509 _SDR1k_Control_DDS_Write_PARM_2:
   0005                     510 	.ds 1
   0006                     511 _SDR1k_Control_SR_Load_PARM_2:
   0006                     512 	.ds 1
   0007                     513 _SDR1k_ControlOut_PARM_2:
   0007                     514 	.ds 1
   0008                     515 _SDR1k_ControlOut_PARM_3:
   0008                     516 	.ds 1
   0009                     517 _SDR1k_ControlOut_PARM_4:
   0009                     518 	.ds 1
   000A                     519 _SDR1k_ControlOut_PARM_5:
   000A                     520 	.ds 2
   000C                     521 _SDR1k_ControlOut_PARM_6:
   000C                     522 	.ds 1
   000D                     523 _SDR1k_Control_Read_Status_PARM_2:
   000D                     524 	.ds 1
   000E                     525 _SDR1k_ControlIn_PARM_2:
   000E                     526 	.ds 1
   000F                     527 _SDR1k_ControlIn_PARM_3:
   000F                     528 	.ds 1
   0010                     529 _SDR1k_ControlIn_PARM_4:
   0010                     530 	.ds 1
   0011                     531 _SDR1k_ControlIn_PARM_5:
   0011                     532 	.ds 2
   0013                     533 _SDR1k_ControlIn_PARM_6:
   0013                     534 	.ds 1
                            535 ;--------------------------------------------------------
                            536 ; overlayable items in internal ram 
                            537 ;--------------------------------------------------------
                            538 	.area	OSEG    (OVR,DATA)
   0000                     539 _byteToHex_PARM_2::
   0000                     540 	.ds 3
                            541 	.area	OSEG    (OVR,DATA)
   0000                     542 _SDR1k_Control_Read_Version_PARM_2::
   0000                     543 	.ds 1
   0001                     544 _SDR1k_Control_Read_Version_bbuf_1_1::
   0001                     545 	.ds 3
   0004                     546 _SDR1k_Control_Read_Version_ver_string_1_1::
   0004                     547 	.ds 9
                            548 ;--------------------------------------------------------
                            549 ; indirectly addressable internal ram data
                            550 ;--------------------------------------------------------
                            551 	.area ISEG    (DATA)
                            552 ;--------------------------------------------------------
                            553 ; absolute internal ram data
                            554 ;--------------------------------------------------------
                            555 	.area IABS    (ABS,DATA)
                            556 	.area IABS    (ABS,DATA)
                            557 ;--------------------------------------------------------
                            558 ; bit data
                            559 ;--------------------------------------------------------
                            560 	.area BSEG    (BIT)
                            561 ;--------------------------------------------------------
                            562 ; paged external ram data
                            563 ;--------------------------------------------------------
                            564 	.area PSEG    (PAG,XDATA)
                            565 ;--------------------------------------------------------
                            566 ; external ram data
                            567 ;--------------------------------------------------------
                            568 	.area XSEG    (XDATA)
                    E400    569 _GPIF_WAVE_DATA	=	0xe400
                    E480    570 _RES_WAVEDATA_END	=	0xe480
                    E600    571 _CPUCS	=	0xe600
                    E601    572 _IFCONFIG	=	0xe601
                    E602    573 _PINFLAGSAB	=	0xe602
                    E603    574 _PINFLAGSCD	=	0xe603
                    E604    575 _FIFORESET	=	0xe604
                    E605    576 _BREAKPT	=	0xe605
                    E606    577 _BPADDRH	=	0xe606
                    E607    578 _BPADDRL	=	0xe607
                    E608    579 _UART230	=	0xe608
                    E609    580 _FIFOPINPOLAR	=	0xe609
                    E60A    581 _REVID	=	0xe60a
                    E60B    582 _REVCTL	=	0xe60b
                    E610    583 _EP1OUTCFG	=	0xe610
                    E611    584 _EP1INCFG	=	0xe611
                    E612    585 _EP2CFG	=	0xe612
                    E613    586 _EP4CFG	=	0xe613
                    E614    587 _EP6CFG	=	0xe614
                    E615    588 _EP8CFG	=	0xe615
                    E618    589 _EP2FIFOCFG	=	0xe618
                    E619    590 _EP4FIFOCFG	=	0xe619
                    E61A    591 _EP6FIFOCFG	=	0xe61a
                    E61B    592 _EP8FIFOCFG	=	0xe61b
                    E620    593 _EP2AUTOINLENH	=	0xe620
                    E621    594 _EP2AUTOINLENL	=	0xe621
                    E622    595 _EP4AUTOINLENH	=	0xe622
                    E623    596 _EP4AUTOINLENL	=	0xe623
                    E624    597 _EP6AUTOINLENH	=	0xe624
                    E625    598 _EP6AUTOINLENL	=	0xe625
                    E626    599 _EP8AUTOINLENH	=	0xe626
                    E627    600 _EP8AUTOINLENL	=	0xe627
                    E630    601 _EP2FIFOPFH	=	0xe630
                    E631    602 _EP2FIFOPFL	=	0xe631
                    E632    603 _EP4FIFOPFH	=	0xe632
                    E633    604 _EP4FIFOPFL	=	0xe633
                    E634    605 _EP6FIFOPFH	=	0xe634
                    E635    606 _EP6FIFOPFL	=	0xe635
                    E636    607 _EP8FIFOPFH	=	0xe636
                    E637    608 _EP8FIFOPFL	=	0xe637
                    E640    609 _EP2ISOINPKTS	=	0xe640
                    E641    610 _EP4ISOINPKTS	=	0xe641
                    E642    611 _EP6ISOINPKTS	=	0xe642
                    E643    612 _EP8ISOINPKTS	=	0xe643
                    E648    613 _INPKTEND	=	0xe648
                    E649    614 _OUTPKTEND	=	0xe649
                    E650    615 _EP2FIFOIE	=	0xe650
                    E651    616 _EP2FIFOIRQ	=	0xe651
                    E652    617 _EP4FIFOIE	=	0xe652
                    E653    618 _EP4FIFOIRQ	=	0xe653
                    E654    619 _EP6FIFOIE	=	0xe654
                    E655    620 _EP6FIFOIRQ	=	0xe655
                    E656    621 _EP8FIFOIE	=	0xe656
                    E657    622 _EP8FIFOIRQ	=	0xe657
                    E658    623 _IBNIE	=	0xe658
                    E659    624 _IBNIRQ	=	0xe659
                    E65A    625 _NAKIE	=	0xe65a
                    E65B    626 _NAKIRQ	=	0xe65b
                    E65C    627 _USBIE	=	0xe65c
                    E65D    628 _USBIRQ	=	0xe65d
                    E65E    629 _EPIE	=	0xe65e
                    E65F    630 _EPIRQ	=	0xe65f
                    E660    631 _GPIFIE	=	0xe660
                    E661    632 _GPIFIRQ	=	0xe661
                    E662    633 _USBERRIE	=	0xe662
                    E663    634 _USBERRIRQ	=	0xe663
                    E664    635 _ERRCNTLIM	=	0xe664
                    E665    636 _CLRERRCNT	=	0xe665
                    E666    637 _INT2IVEC	=	0xe666
                    E667    638 _INT4IVEC	=	0xe667
                    E668    639 _INTSETUP	=	0xe668
                    E670    640 _PORTACFG	=	0xe670
                    E671    641 _PORTCCFG	=	0xe671
                    E672    642 _PORTECFG	=	0xe672
                    E678    643 _I2CS	=	0xe678
                    E679    644 _I2DAT	=	0xe679
                    E67A    645 _I2CTL	=	0xe67a
                    E67B    646 _XAUTODAT1	=	0xe67b
                    E67C    647 _XAUTODAT2	=	0xe67c
                    E680    648 _USBCS	=	0xe680
                    E681    649 _SUSPEND	=	0xe681
                    E682    650 _WAKEUPCS	=	0xe682
                    E683    651 _TOGCTL	=	0xe683
                    E684    652 _USBFRAMEH	=	0xe684
                    E685    653 _USBFRAMEL	=	0xe685
                    E686    654 _MICROFRAME	=	0xe686
                    E687    655 _FNADDR	=	0xe687
                    E68A    656 _EP0BCH	=	0xe68a
                    E68B    657 _EP0BCL	=	0xe68b
                    E68D    658 _EP1OUTBC	=	0xe68d
                    E68F    659 _EP1INBC	=	0xe68f
                    E690    660 _EP2BCH	=	0xe690
                    E691    661 _EP2BCL	=	0xe691
                    E694    662 _EP4BCH	=	0xe694
                    E695    663 _EP4BCL	=	0xe695
                    E698    664 _EP6BCH	=	0xe698
                    E699    665 _EP6BCL	=	0xe699
                    E69C    666 _EP8BCH	=	0xe69c
                    E69D    667 _EP8BCL	=	0xe69d
                    E6A0    668 _EP0CS	=	0xe6a0
                    E6A1    669 _EP1OUTCS	=	0xe6a1
                    E6A2    670 _EP1INCS	=	0xe6a2
                    E6A3    671 _EP2CS	=	0xe6a3
                    E6A4    672 _EP4CS	=	0xe6a4
                    E6A5    673 _EP6CS	=	0xe6a5
                    E6A6    674 _EP8CS	=	0xe6a6
                    E6A7    675 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    676 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    677 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    678 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    679 _EP2FIFOBCH	=	0xe6ab
                    E6AC    680 _EP2FIFOBCL	=	0xe6ac
                    E6AD    681 _EP4FIFOBCH	=	0xe6ad
                    E6AE    682 _EP4FIFOBCL	=	0xe6ae
                    E6AF    683 _EP6FIFOBCH	=	0xe6af
                    E6B0    684 _EP6FIFOBCL	=	0xe6b0
                    E6B1    685 _EP8FIFOBCH	=	0xe6b1
                    E6B2    686 _EP8FIFOBCL	=	0xe6b2
                    E6B3    687 _SUDPTRH	=	0xe6b3
                    E6B4    688 _SUDPTRL	=	0xe6b4
                    E6B5    689 _SUDPTRCTL	=	0xe6b5
                    E6B8    690 _SETUPDAT	=	0xe6b8
                    E6C0    691 _GPIFWFSELECT	=	0xe6c0
                    E6C1    692 _GPIFIDLECS	=	0xe6c1
                    E6C2    693 _GPIFIDLECTL	=	0xe6c2
                    E6C3    694 _GPIFCTLCFG	=	0xe6c3
                    E6C4    695 _GPIFADRH	=	0xe6c4
                    E6C5    696 _GPIFADRL	=	0xe6c5
                    E6CE    697 _GPIFTCB3	=	0xe6ce
                    E6CF    698 _GPIFTCB2	=	0xe6cf
                    E6D0    699 _GPIFTCB1	=	0xe6d0
                    E6D1    700 _GPIFTCB0	=	0xe6d1
                    E6D2    701 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    702 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    703 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    704 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    705 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    706 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    707 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    708 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    709 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    710 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    711 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    712 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    713 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    714 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    715 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    716 _GPIFREADYCFG	=	0xe6f3
                    E6F4    717 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    718 _GPIFABORT	=	0xe6f5
                    E6C6    719 _FLOWSTATE	=	0xe6c6
                    E6C7    720 _FLOWLOGIC	=	0xe6c7
                    E6C8    721 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    722 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    723 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    724 _FLOWSTB	=	0xe6cb
                    E6CC    725 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    726 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    727 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    728 _UDMACRCH	=	0xe67d
                    E67E    729 _UDMACRCL	=	0xe67e
                    E67F    730 _UDMACRCQUAL	=	0xe67f
                    E6F8    731 _DBUG	=	0xe6f8
                    E6F9    732 _TESTCFG	=	0xe6f9
                    E6FA    733 _USBTEST	=	0xe6fa
                    E6FB    734 _CT1	=	0xe6fb
                    E6FC    735 _CT2	=	0xe6fc
                    E6FD    736 _CT3	=	0xe6fd
                    E6FE    737 _CT4	=	0xe6fe
                    E740    738 _EP0BUF	=	0xe740
                    E780    739 _EP1OUTBUF	=	0xe780
                    E7C0    740 _EP1INBUF	=	0xe7c0
                    F000    741 _EP2FIFOBUF	=	0xf000
                    F400    742 _EP4FIFOBUF	=	0xf400
                    F800    743 _EP6FIFOBUF	=	0xf800
                    FC00    744 _EP8FIFOBUF	=	0xfc00
   0000                     745 _SDR1k_Control_setDataReg_databuf_1_1:
   0000                     746 	.ds 1
   0001                     747 _SDR1k_Control_Latch_databuf_1_1:
   0001                     748 	.ds 1
                            749 ;--------------------------------------------------------
                            750 ; absolute external ram data
                            751 ;--------------------------------------------------------
                            752 	.area XABS    (ABS,XDATA)
                            753 ;--------------------------------------------------------
                            754 ; external initialized ram data
                            755 ;--------------------------------------------------------
                            756 	.area HOME    (CODE)
                            757 	.area GSINIT0 (CODE)
                            758 	.area GSINIT1 (CODE)
                            759 	.area GSINIT2 (CODE)
                            760 	.area GSINIT3 (CODE)
                            761 	.area GSINIT4 (CODE)
                            762 	.area GSINIT5 (CODE)
                            763 	.area GSINIT  (CODE)
                            764 	.area GSFINAL (CODE)
                            765 	.area CSEG    (CODE)
                            766 ;--------------------------------------------------------
                            767 ; global & static initialisations
                            768 ;--------------------------------------------------------
                            769 	.area HOME    (CODE)
                            770 	.area GSINIT  (CODE)
                            771 	.area GSFINAL (CODE)
                            772 	.area GSINIT  (CODE)
                            773 ;	../Initial/src/sdr1kctl.c:125: unsigned char LastBPF_Value = 0; 
   0000 75*03 00            774 	mov	_LastBPF_Value,#0x00
                            775 ;--------------------------------------------------------
                            776 ; Home
                            777 ;--------------------------------------------------------
                            778 	.area HOME    (CODE)
                            779 	.area HOME    (CODE)
                            780 ;--------------------------------------------------------
                            781 ; code
                            782 ;--------------------------------------------------------
                            783 	.area CSEG    (CODE)
                            784 ;------------------------------------------------------------
                            785 ;Allocation info for local variables in function 'byteToHex'
                            786 ;------------------------------------------------------------
                            787 ;bufp                      Allocated with name '_byteToHex_PARM_2'
                            788 ;b                         Allocated to registers r2 
                            789 ;hi                        Allocated to registers r3 
                            790 ;lo                        Allocated to registers r2 
                            791 ;------------------------------------------------------------
                            792 ;	../Initial/src/sdr1kctl.c:74: void byteToHex(unsigned char b, unsigned char *bufp) {
                            793 ;	-----------------------------------------
                            794 ;	 function byteToHex
                            795 ;	-----------------------------------------
   0000                     796 _byteToHex:
                    0002    797 	ar2 = 0x02
                    0003    798 	ar3 = 0x03
                    0004    799 	ar4 = 0x04
                    0005    800 	ar5 = 0x05
                    0006    801 	ar6 = 0x06
                    0007    802 	ar7 = 0x07
                    0000    803 	ar0 = 0x00
                    0001    804 	ar1 = 0x01
                            805 ;	../Initial/src/sdr1kctl.c:75: unsigned char hi = (b >> 4) & 0xf;
   0000 E5 82               806 	mov	a,dpl
   0002 FA                  807 	mov	r2,a
   0003 C4                  808 	swap	a
   0004 54 0F               809 	anl	a,#0x0f
   0006 FB                  810 	mov	r3,a
   0007 53 03 0F            811 	anl	ar3,#0x0F
                            812 ;	../Initial/src/sdr1kctl.c:76: unsigned char lo = ( b & 0xf );
   000A 53 02 0F            813 	anl	ar2,#0x0F
                            814 ;	../Initial/src/sdr1kctl.c:77: if ( hi >= 10 ) {
   000D BB 0A 00            815 	cjne	r3,#0x0A,00111$
   0010                     816 00111$:
   0010 40 15               817 	jc	00102$
                            818 ;	../Initial/src/sdr1kctl.c:78: bufp[0] = 'a' + hi - 10;    
   0012 AC*00               819 	mov	r4,_byteToHex_PARM_2
   0014 AD*01               820 	mov	r5,(_byteToHex_PARM_2 + 1)
   0016 AE*02               821 	mov	r6,(_byteToHex_PARM_2 + 2)
   0018 74 57               822 	mov	a,#0x57
   001A 2B                  823 	add	a,r3
   001B FF                  824 	mov	r7,a
   001C 8C 82               825 	mov	dpl,r4
   001E 8D 83               826 	mov	dph,r5
   0020 8E F0               827 	mov	b,r6
   0022 12s00r00            828 	lcall	__gptrput
   0025 80 13               829 	sjmp	00103$
   0027                     830 00102$:
                            831 ;	../Initial/src/sdr1kctl.c:81: bufp[0] = '0' + hi;  
   0027 AC*00               832 	mov	r4,_byteToHex_PARM_2
   0029 AD*01               833 	mov	r5,(_byteToHex_PARM_2 + 1)
   002B AE*02               834 	mov	r6,(_byteToHex_PARM_2 + 2)
   002D 74 30               835 	mov	a,#0x30
   002F 2B                  836 	add	a,r3
   0030 FB                  837 	mov	r3,a
   0031 8C 82               838 	mov	dpl,r4
   0033 8D 83               839 	mov	dph,r5
   0035 8E F0               840 	mov	b,r6
   0037 12s00r00            841 	lcall	__gptrput
   003A                     842 00103$:
                            843 ;	../Initial/src/sdr1kctl.c:83: if ( lo >= 10 ) {
   003A BA 0A 00            844 	cjne	r2,#0x0A,00113$
   003D                     845 00113$:
   003D 40 1A               846 	jc	00105$
                            847 ;	../Initial/src/sdr1kctl.c:84: bufp[1] = 'a' + lo - 10;    
   003F 74 01               848 	mov	a,#0x01
   0041 25*00               849 	add	a,_byteToHex_PARM_2
   0043 FB                  850 	mov	r3,a
   0044 E4                  851 	clr	a
   0045 35*01               852 	addc	a,(_byteToHex_PARM_2 + 1)
   0047 FC                  853 	mov	r4,a
   0048 AD*02               854 	mov	r5,(_byteToHex_PARM_2 + 2)
   004A 74 57               855 	mov	a,#0x57
   004C 2A                  856 	add	a,r2
   004D FE                  857 	mov	r6,a
   004E 8B 82               858 	mov	dpl,r3
   0050 8C 83               859 	mov	dph,r4
   0052 8D F0               860 	mov	b,r5
   0054 12s00r00            861 	lcall	__gptrput
   0057 80 18               862 	sjmp	00106$
   0059                     863 00105$:
                            864 ;	../Initial/src/sdr1kctl.c:87: bufp[1] = '0' + lo;  
   0059 74 01               865 	mov	a,#0x01
   005B 25*00               866 	add	a,_byteToHex_PARM_2
   005D FB                  867 	mov	r3,a
   005E E4                  868 	clr	a
   005F 35*01               869 	addc	a,(_byteToHex_PARM_2 + 1)
   0061 FC                  870 	mov	r4,a
   0062 AD*02               871 	mov	r5,(_byteToHex_PARM_2 + 2)
   0064 74 30               872 	mov	a,#0x30
   0066 2A                  873 	add	a,r2
   0067 FA                  874 	mov	r2,a
   0068 8B 82               875 	mov	dpl,r3
   006A 8C 83               876 	mov	dph,r4
   006C 8D F0               877 	mov	b,r5
   006E 12s00r00            878 	lcall	__gptrput
   0071                     879 00106$:
                            880 ;	../Initial/src/sdr1kctl.c:89: bufp[2] = 0;
   0071 74 02               881 	mov	a,#0x02
   0073 25*00               882 	add	a,_byteToHex_PARM_2
   0075 FA                  883 	mov	r2,a
   0076 E4                  884 	clr	a
   0077 35*01               885 	addc	a,(_byteToHex_PARM_2 + 1)
   0079 FB                  886 	mov	r3,a
   007A AC*02               887 	mov	r4,(_byteToHex_PARM_2 + 2)
   007C 8A 82               888 	mov	dpl,r2
   007E 8B 83               889 	mov	dph,r3
   0080 8C F0               890 	mov	b,r4
   0082 E4                  891 	clr	a
                            892 ;	../Initial/src/sdr1kctl.c:91: return;
   0083 02s00r00            893 	ljmp	__gptrput
                            894 ;------------------------------------------------------------
                            895 ;Allocation info for local variables in function 'SDR1k_Control_setDataReg'
                            896 ;------------------------------------------------------------
                            897 ;val                       Allocated to registers r2 
                            898 ;bbuf                      Allocated with name '_SDR1k_Control_setDataReg_bbuf_1_1'
                            899 ;databuf                   Allocated with name '_SDR1k_Control_setDataReg_databuf_1_1'
                            900 ;------------------------------------------------------------
                            901 ;	../Initial/src/sdr1kctl.c:96: unsigned char SDR1k_Control_setDataReg(unsigned char val) {
                            902 ;	-----------------------------------------
                            903 ;	 function SDR1k_Control_setDataReg
                            904 ;	-----------------------------------------
   0086                     905 _SDR1k_Control_setDataReg:
   0086 AA 82               906 	mov	r2,dpl
                            907 ;	../Initial/src/sdr1kctl.c:99: databuf[0] = val;
   0088 90s00r00            908 	mov	dptr,#_SDR1k_Control_setDataReg_databuf_1_1
   008B EA                  909 	mov	a,r2
   008C F0                  910 	movx	@dptr,a
                            911 ;	../Initial/src/sdr1kctl.c:100: putstr("setDataReg val=0x"); 
   008D 90s00r00            912 	mov	dptr,#__str_0
   0090 75 F0 80            913 	mov	b,#0x80
   0093 C0 02               914 	push	ar2
   0095 12s00r00            915 	lcall	_putstr
   0098 D0 02               916 	pop	ar2
                            917 ;	../Initial/src/sdr1kctl.c:101: byteToHex(val, bbuf); 
   009A 75*00r00            918 	mov	_byteToHex_PARM_2,#_SDR1k_Control_setDataReg_bbuf_1_1
   009D 75*01 00            919 	mov	(_byteToHex_PARM_2 + 1),#0x00
   00A0 75*02 40            920 	mov	(_byteToHex_PARM_2 + 2),#0x40
   00A3 8A 82               921 	mov	dpl,r2
   00A5 12s00r00            922 	lcall	_byteToHex
                            923 ;	../Initial/src/sdr1kctl.c:102: putstr(bbuf); 
   00A8 90s00r00            924 	mov	dptr,#_SDR1k_Control_setDataReg_bbuf_1_1
   00AB 75 F0 40            925 	mov	b,#0x40
   00AE 12s00r00            926 	lcall	_putstr
                            927 ;	../Initial/src/sdr1kctl.c:103: putstr("\n");  
   00B1 90s00r12            928 	mov	dptr,#__str_1
   00B4 75 F0 80            929 	mov	b,#0x80
   00B7 12s00r00            930 	lcall	_putstr
                            931 ;	../Initial/src/sdr1kctl.c:106: if (!spi_write (0, ADDR_DATA, SPI_EN_FPGA, SPI_FMT_HDR_1 | SPI_FMT_MSB , (const xdata unsigned char *)databuf, 1)) {
   00BA 75*00 01            932 	mov	_spi_write_PARM_2,#0x01
   00BD 75*00 80            933 	mov	_spi_write_PARM_3,#0x80
   00C0 75*00 20            934 	mov	_spi_write_PARM_4,#0x20
   00C3 75*00r00            935 	mov	_spi_write_PARM_5,#_SDR1k_Control_setDataReg_databuf_1_1
   00C6 75*01s00            936 	mov	(_spi_write_PARM_5 + 1),#(_SDR1k_Control_setDataReg_databuf_1_1 >> 8)
   00C9 75*00 01            937 	mov	_spi_write_PARM_6,#0x01
   00CC 75 82 00            938 	mov	dpl,#0x00
   00CF 12s00r00            939 	lcall	_spi_write
   00D2 E5 82               940 	mov	a,dpl
   00D4 70 0D               941 	jnz	00102$
                            942 ;	../Initial/src/sdr1kctl.c:107: putstr("setDataReg bailout\n"); 
   00D6 90s00r14            943 	mov	dptr,#__str_2
   00D9 75 F0 80            944 	mov	b,#0x80
   00DC 12s00r00            945 	lcall	_putstr
                            946 ;	../Initial/src/sdr1kctl.c:108: return 0;  
   00DF 75 82 00            947 	mov	dpl,#0x00
   00E2 22                  948 	ret
   00E3                     949 00102$:
                            950 ;	../Initial/src/sdr1kctl.c:111: putstr("setDataReg good rc\n");  
   00E3 90s00r28            951 	mov	dptr,#__str_3
   00E6 75 F0 80            952 	mov	b,#0x80
   00E9 12s00r00            953 	lcall	_putstr
                            954 ;	../Initial/src/sdr1kctl.c:112: return 1; 	 
   00EC 75 82 01            955 	mov	dpl,#0x01
   00EF 22                  956 	ret
                            957 ;------------------------------------------------------------
                            958 ;Allocation info for local variables in function 'SDR1k_Control_delay'
                            959 ;------------------------------------------------------------
                            960 ;------------------------------------------------------------
                            961 ;	../Initial/src/sdr1kctl.c:116: void SDR1k_Control_delay() {
                            962 ;	-----------------------------------------
                            963 ;	 function SDR1k_Control_delay
                            964 ;	-----------------------------------------
   00F0                     965 _SDR1k_Control_delay:
                            966 ;	../Initial/src/sdr1kctl.c:117: return;  
   00F0 22                  967 	ret
                            968 ;------------------------------------------------------------
                            969 ;Allocation info for local variables in function 'SDR1k_Control_Latch'
                            970 ;------------------------------------------------------------
                            971 ;wIndexL                   Allocated with name '_SDR1k_Control_Latch_PARM_2'
                            972 ;wIndexH                   Allocated to registers r2 
                            973 ;rc                        Allocated to registers r3 
                            974 ;databuf                   Allocated with name '_SDR1k_Control_Latch_databuf_1_1'
                            975 ;------------------------------------------------------------
                            976 ;	../Initial/src/sdr1kctl.c:127: unsigned char SDR1k_Control_Latch(unsigned char wIndexH, unsigned char wIndexL)  {
                            977 ;	-----------------------------------------
                            978 ;	 function SDR1k_Control_Latch
                            979 ;	-----------------------------------------
   00F1                     980 _SDR1k_Control_Latch:
   00F1 AA 82               981 	mov	r2,dpl
                            982 ;	../Initial/src/sdr1kctl.c:134: if ( wIndexH == LATCH_BPF ) { // we need to remember last value written to bpf to be able to support writing to the rfe regs
   00F3 BA 02 03            983 	cjne	r2,#0x02,00109$
                            984 ;	../Initial/src/sdr1kctl.c:136: LastBPF_Value = wIndexL;  
   00F6 85*04*03            985 	mov	_LastBPF_Value,_SDR1k_Control_Latch_PARM_2
                            986 ;	../Initial/src/sdr1kctl.c:142: do {  /* once */
   00F9                     987 00109$:
                            988 ;	../Initial/src/sdr1kctl.c:143: databuf[0] = wIndexL; 
   00F9 90s00r01            989 	mov	dptr,#_SDR1k_Control_Latch_databuf_1_1
   00FC E5*04               990 	mov	a,_SDR1k_Control_Latch_PARM_2
   00FE F0                  991 	movx	@dptr,a
                            992 ;	../Initial/src/sdr1kctl.c:144: rc = spi_write(0, ADDR_DATA, SPI_EN_FPGA, SPI_FMT_HDR_1 | SPI_FMT_MSB , (const xdata unsigned char *)databuf, 1); 
   00FF 75*00 01            993 	mov	_spi_write_PARM_2,#0x01
   0102 75*00 80            994 	mov	_spi_write_PARM_3,#0x80
   0105 75*00 20            995 	mov	_spi_write_PARM_4,#0x20
   0108 75*00r01            996 	mov	_spi_write_PARM_5,#_SDR1k_Control_Latch_databuf_1_1
   010B 75*01s00            997 	mov	(_spi_write_PARM_5 + 1),#(_SDR1k_Control_Latch_databuf_1_1 >> 8)
   010E 75*00 01            998 	mov	_spi_write_PARM_6,#0x01
   0111 75 82 00            999 	mov	dpl,#0x00
   0114 C0 02              1000 	push	ar2
   0116 12s00r00           1001 	lcall	_spi_write
   0119 AB 82              1002 	mov	r3,dpl
   011B D0 02              1003 	pop	ar2
                           1004 ;	../Initial/src/sdr1kctl.c:145: if ( rc == 0 ) {
   011D EB                 1005 	mov	a,r3
   011E 70 10              1006 	jnz	00104$
                           1007 ;	../Initial/src/sdr1kctl.c:146: putstr("latch bail out spi write 1\n");  
   0120 90s00r3C           1008 	mov	dptr,#__str_4
   0123 75 F0 80           1009 	mov	b,#0x80
   0126 C0 03              1010 	push	ar3
   0128 12s00r00           1011 	lcall	_putstr
   012B D0 03              1012 	pop	ar3
                           1013 ;	../Initial/src/sdr1kctl.c:147: break;
   012D 02s01rAC           1014 	ljmp	00111$
   0130                    1015 00104$:
                           1016 ;	../Initial/src/sdr1kctl.c:149: udelay(LATCH_INTEROP_DELAY_MICROS); 
   0130 75 82 02           1017 	mov	dpl,#0x02
   0133 C0 02              1018 	push	ar2
   0135 12s00r00           1019 	lcall	_udelay
   0138 D0 02              1020 	pop	ar2
                           1021 ;	../Initial/src/sdr1kctl.c:154: databuf[0] = wIndexH; 
   013A 90s00r01           1022 	mov	dptr,#_SDR1k_Control_Latch_databuf_1_1
   013D EA                 1023 	mov	a,r2
   013E F0                 1024 	movx	@dptr,a
                           1025 ;	../Initial/src/sdr1kctl.c:155: rc = spi_write(0, ADDR_CTRL, SPI_EN_FPGA, SPI_FMT_HDR_1 | SPI_FMT_MSB , (const xdata unsigned char *)databuf, 1);
   013F 75*00 02           1026 	mov	_spi_write_PARM_2,#0x02
   0142 75*00 80           1027 	mov	_spi_write_PARM_3,#0x80
   0145 75*00 20           1028 	mov	_spi_write_PARM_4,#0x20
   0148 75*00r01           1029 	mov	_spi_write_PARM_5,#_SDR1k_Control_Latch_databuf_1_1
   014B 75*01s00           1030 	mov	(_spi_write_PARM_5 + 1),#(_SDR1k_Control_Latch_databuf_1_1 >> 8)
   014E 75*00 01           1031 	mov	_spi_write_PARM_6,#0x01
   0151 75 82 00           1032 	mov	dpl,#0x00
   0154 12s00r00           1033 	lcall	_spi_write
                           1034 ;	../Initial/src/sdr1kctl.c:156: if ( rc == 0 ) { 
   0157 E5 82              1035 	mov	a,dpl
   0159 FB                 1036 	mov	r3,a
   015A 70 0F              1037 	jnz	00106$
                           1038 ;	../Initial/src/sdr1kctl.c:157: putstr("latch bail out spi write 2\n");
   015C 90s00r58           1039 	mov	dptr,#__str_5
   015F 75 F0 80           1040 	mov	b,#0x80
   0162 C0 03              1041 	push	ar3
   0164 12s00r00           1042 	lcall	_putstr
   0167 D0 03              1043 	pop	ar3
                           1044 ;	../Initial/src/sdr1kctl.c:158: break;
   0169 80 41              1045 	sjmp	00111$
   016B                    1046 00106$:
                           1047 ;	../Initial/src/sdr1kctl.c:160: udelay(LATCH_INTEROP_DELAY_MICROS);
   016B 75 82 02           1048 	mov	dpl,#0x02
   016E 12s00r00           1049 	lcall	_udelay
                           1050 ;	../Initial/src/sdr1kctl.c:163: databuf[0] = 0; 
   0171 90s00r01           1051 	mov	dptr,#_SDR1k_Control_Latch_databuf_1_1
   0174 E4                 1052 	clr	a
   0175 F0                 1053 	movx	@dptr,a
                           1054 ;	../Initial/src/sdr1kctl.c:164: rc = spi_write(0, ADDR_CTRL, SPI_EN_FPGA, SPI_FMT_HDR_1 | SPI_FMT_MSB , (const xdata unsigned char *)databuf, 1);
   0176 75*00 02           1055 	mov	_spi_write_PARM_2,#0x02
   0179 75*00 80           1056 	mov	_spi_write_PARM_3,#0x80
   017C 75*00 20           1057 	mov	_spi_write_PARM_4,#0x20
   017F 75*00r01           1058 	mov	_spi_write_PARM_5,#_SDR1k_Control_Latch_databuf_1_1
   0182 75*01s00           1059 	mov	(_spi_write_PARM_5 + 1),#(_SDR1k_Control_Latch_databuf_1_1 >> 8)
   0185 75*00 01           1060 	mov	_spi_write_PARM_6,#0x01
   0188 75 82 00           1061 	mov	dpl,#0x00
   018B 12s00r00           1062 	lcall	_spi_write
                           1063 ;	../Initial/src/sdr1kctl.c:165: if ( rc == 0 ) { 
   018E E5 82              1064 	mov	a,dpl
   0190 FB                 1065 	mov	r3,a
   0191 70 0F              1066 	jnz	00108$
                           1067 ;	../Initial/src/sdr1kctl.c:166: putstr("latch bail out spi write 3\n");
   0193 90s00r74           1068 	mov	dptr,#__str_6
   0196 75 F0 80           1069 	mov	b,#0x80
   0199 C0 03              1070 	push	ar3
   019B 12s00r00           1071 	lcall	_putstr
   019E D0 03              1072 	pop	ar3
                           1073 ;	../Initial/src/sdr1kctl.c:167: break;
   01A0 80 0A              1074 	sjmp	00111$
   01A2                    1075 00108$:
                           1076 ;	../Initial/src/sdr1kctl.c:169: udelay(LATCH_INTEROP_DELAY_MICROS); 
   01A2 75 82 02           1077 	mov	dpl,#0x02
   01A5 C0 03              1078 	push	ar3
   01A7 12s00r00           1079 	lcall	_udelay
   01AA D0 03              1080 	pop	ar3
                           1081 ;	../Initial/src/sdr1kctl.c:171: } while ( 0 ); 
   01AC                    1082 00111$:
                           1083 ;	../Initial/src/sdr1kctl.c:173: return rc; 	
   01AC 8B 82              1084 	mov	dpl,r3
   01AE 22                 1085 	ret
                           1086 ;------------------------------------------------------------
                           1087 ;Allocation info for local variables in function 'SDR1k_Control_DDS_Reset'
                           1088 ;------------------------------------------------------------
                           1089 ;rc                        Allocated to registers r2 
                           1090 ;------------------------------------------------------------
                           1091 ;	../Initial/src/sdr1kctl.c:179: unsigned char SDR1k_Control_DDS_Reset() {
                           1092 ;	-----------------------------------------
                           1093 ;	 function SDR1k_Control_DDS_Reset
                           1094 ;	-----------------------------------------
   01AF                    1095 _SDR1k_Control_DDS_Reset:
                           1096 ;	../Initial/src/sdr1kctl.c:182: rc = SDR1k_Control_Latch(LATCH_ADR, 0x40);
   01AF 75*04 40           1097 	mov	_SDR1k_Control_Latch_PARM_2,#0x40
   01B2 75 82 08           1098 	mov	dpl,#0x08
   01B5 12s00rF1           1099 	lcall	_SDR1k_Control_Latch
                           1100 ;	../Initial/src/sdr1kctl.c:183: if ( rc == 0 ) {
   01B8 E5 82              1101 	mov	a,dpl
   01BA FA                 1102 	mov	r2,a
   01BB 70 0F              1103 	jnz	00102$
                           1104 ;	../Initial/src/sdr1kctl.c:184: putstr("DDS Reset bail out 1\n");  
   01BD 90s00r90           1105 	mov	dptr,#__str_7
   01C0 75 F0 80           1106 	mov	b,#0x80
   01C3 C0 02              1107 	push	ar2
   01C5 12s00r00           1108 	lcall	_putstr
   01C8 D0 02              1109 	pop	ar2
                           1110 ;	../Initial/src/sdr1kctl.c:185: break;
   01CA 80 50              1111 	sjmp	00109$
   01CC                    1112 00102$:
                           1113 ;	../Initial/src/sdr1kctl.c:187: udelay(DDS_RESET_INTEROP_DELAY_MICROS);   
   01CC 75 82 02           1114 	mov	dpl,#0x02
   01CF 12s00r00           1115 	lcall	_udelay
                           1116 ;	../Initial/src/sdr1kctl.c:188: rc = SDR1k_Control_Latch(LATCH_ADR, 0xc0);
   01D2 75*04 C0           1117 	mov	_SDR1k_Control_Latch_PARM_2,#0xC0
   01D5 75 82 08           1118 	mov	dpl,#0x08
   01D8 12s00rF1           1119 	lcall	_SDR1k_Control_Latch
                           1120 ;	../Initial/src/sdr1kctl.c:189: if ( rc == 0 ) {
   01DB E5 82              1121 	mov	a,dpl
   01DD FA                 1122 	mov	r2,a
   01DE 70 0F              1123 	jnz	00104$
                           1124 ;	../Initial/src/sdr1kctl.c:190: putstr("DDS Reset bail out 2\n"); 
   01E0 90s00rA6           1125 	mov	dptr,#__str_8
   01E3 75 F0 80           1126 	mov	b,#0x80
   01E6 C0 02              1127 	push	ar2
   01E8 12s00r00           1128 	lcall	_putstr
   01EB D0 02              1129 	pop	ar2
                           1130 ;	../Initial/src/sdr1kctl.c:191: break; 
   01ED 80 2D              1131 	sjmp	00109$
   01EF                    1132 00104$:
                           1133 ;	../Initial/src/sdr1kctl.c:193: udelay(DDS_RESET_INTEROP_DELAY_MICROS);
   01EF 75 82 02           1134 	mov	dpl,#0x02
   01F2 12s00r00           1135 	lcall	_udelay
                           1136 ;	../Initial/src/sdr1kctl.c:194: rc = SDR1k_Control_Latch(LATCH_ADR, 0x40);
   01F5 75*04 40           1137 	mov	_SDR1k_Control_Latch_PARM_2,#0x40
   01F8 75 82 08           1138 	mov	dpl,#0x08
   01FB 12s00rF1           1139 	lcall	_SDR1k_Control_Latch
                           1140 ;	../Initial/src/sdr1kctl.c:195: if ( rc == 0 ) {
   01FE E5 82              1141 	mov	a,dpl
   0200 FA                 1142 	mov	r2,a
   0201 70 0F              1143 	jnz	00106$
                           1144 ;	../Initial/src/sdr1kctl.c:196: putstr("DDS Reset bail out 3\n"); 
   0203 90s00rBC           1145 	mov	dptr,#__str_9
   0206 75 F0 80           1146 	mov	b,#0x80
   0209 C0 02              1147 	push	ar2
   020B 12s00r00           1148 	lcall	_putstr
   020E D0 02              1149 	pop	ar2
                           1150 ;	../Initial/src/sdr1kctl.c:197: break; 
   0210 80 0A              1151 	sjmp	00109$
   0212                    1152 00106$:
                           1153 ;	../Initial/src/sdr1kctl.c:199: udelay(DDS_RESET_INTEROP_DELAY_MICROS);
   0212 75 82 02           1154 	mov	dpl,#0x02
   0215 C0 02              1155 	push	ar2
   0217 12s00r00           1156 	lcall	_udelay
   021A D0 02              1157 	pop	ar2
                           1158 ;	../Initial/src/sdr1kctl.c:200: } while ( 0 ); 
   021C                    1159 00109$:
                           1160 ;	../Initial/src/sdr1kctl.c:201: return rc; 	
   021C 8A 82              1161 	mov	dpl,r2
   021E 22                 1162 	ret
                           1163 ;------------------------------------------------------------
                           1164 ;Allocation info for local variables in function 'SDR1k_Control_DDS_Write'
                           1165 ;------------------------------------------------------------
                           1166 ;wIndexL                   Allocated with name '_SDR1k_Control_DDS_Write_PARM_2'
                           1167 ;wIndexH                   Allocated to registers r2 
                           1168 ;rc                        Allocated to registers r3 r4 
                           1169 ;------------------------------------------------------------
                           1170 ;	../Initial/src/sdr1kctl.c:205: unsigned char SDR1k_Control_DDS_Write(unsigned char wIndexH, unsigned char wIndexL) {
                           1171 ;	-----------------------------------------
                           1172 ;	 function SDR1k_Control_DDS_Write
                           1173 ;	-----------------------------------------
   021F                    1174 _SDR1k_Control_DDS_Write:
   021F AA 82              1175 	mov	r2,dpl
                           1176 ;	../Initial/src/sdr1kctl.c:208: rc = SDR1k_Control_Latch(LATCH_DAT, wIndexL);
   0221 85*05*04           1177 	mov	_SDR1k_Control_Latch_PARM_2,_SDR1k_Control_DDS_Write_PARM_2
   0224 75 82 04           1178 	mov	dpl,#0x04
   0227 C0 02              1179 	push	ar2
   0229 12s00rF1           1180 	lcall	_SDR1k_Control_Latch
   022C AB 82              1181 	mov	r3,dpl
   022E D0 02              1182 	pop	ar2
   0230 7C 00              1183 	mov	r4,#0x00
                           1184 ;	../Initial/src/sdr1kctl.c:209: if ( rc == 0 ) { 
   0232 EB                 1185 	mov	a,r3
   0233 4C                 1186 	orl	a,r4
   0234 70 14              1187 	jnz	00102$
                           1188 ;	../Initial/src/sdr1kctl.c:210: putstr("DDS Write bail out 1\n");
   0236 90s00rD2           1189 	mov	dptr,#__str_10
   0239 75 F0 80           1190 	mov	b,#0x80
   023C C0 03              1191 	push	ar3
   023E C0 04              1192 	push	ar4
   0240 12s00r00           1193 	lcall	_putstr
   0243 D0 04              1194 	pop	ar4
   0245 D0 03              1195 	pop	ar3
                           1196 ;	../Initial/src/sdr1kctl.c:211: break;
   0247 02s02rF3           1197 	ljmp	00111$
   024A                    1198 00102$:
                           1199 ;	../Initial/src/sdr1kctl.c:213: udelay(DDS_WRITE_INTEROP_DELAY_MICROS);
   024A 75 82 02           1200 	mov	dpl,#0x02
   024D C0 02              1201 	push	ar2
   024F 12s00r00           1202 	lcall	_udelay
   0252 D0 02              1203 	pop	ar2
                           1204 ;	../Initial/src/sdr1kctl.c:214: rc = SDR1k_Control_Latch(LATCH_ADR, 0x40 | wIndexH);
   0254 74 40              1205 	mov	a,#0x40
   0256 4A                 1206 	orl	a,r2
   0257 F5*04              1207 	mov	_SDR1k_Control_Latch_PARM_2,a
   0259 75 82 08           1208 	mov	dpl,#0x08
   025C C0 02              1209 	push	ar2
   025E 12s00rF1           1210 	lcall	_SDR1k_Control_Latch
   0261 AD 82              1211 	mov	r5,dpl
   0263 D0 02              1212 	pop	ar2
   0265 8D 03              1213 	mov	ar3,r5
   0267 7C 00              1214 	mov	r4,#0x00
                           1215 ;	../Initial/src/sdr1kctl.c:215: if ( rc == 0 ) { 
   0269 EB                 1216 	mov	a,r3
   026A 4C                 1217 	orl	a,r4
   026B 70 13              1218 	jnz	00104$
                           1219 ;	../Initial/src/sdr1kctl.c:216: putstr("DDS Write bail out 2\n");
   026D 90s00rE8           1220 	mov	dptr,#__str_11
   0270 75 F0 80           1221 	mov	b,#0x80
   0273 C0 03              1222 	push	ar3
   0275 C0 04              1223 	push	ar4
   0277 12s00r00           1224 	lcall	_putstr
   027A D0 04              1225 	pop	ar4
   027C D0 03              1226 	pop	ar3
                           1227 ;	../Initial/src/sdr1kctl.c:217: break;
   027E 80 73              1228 	sjmp	00111$
   0280                    1229 00104$:
                           1230 ;	../Initial/src/sdr1kctl.c:219: udelay(DDS_WRITE_INTEROP_DELAY_MICROS);
   0280 75 82 02           1231 	mov	dpl,#0x02
   0283 C0 02              1232 	push	ar2
   0285 12s00r00           1233 	lcall	_udelay
   0288 D0 02              1234 	pop	ar2
                           1235 ;	../Initial/src/sdr1kctl.c:220: rc = SDR1k_Control_Latch(LATCH_ADR, wIndexH);
   028A 8A*04              1236 	mov	_SDR1k_Control_Latch_PARM_2,r2
   028C 75 82 08           1237 	mov	dpl,#0x08
   028F C0 02              1238 	push	ar2
   0291 12s00rF1           1239 	lcall	_SDR1k_Control_Latch
   0294 AD 82              1240 	mov	r5,dpl
   0296 D0 02              1241 	pop	ar2
   0298 8D 03              1242 	mov	ar3,r5
   029A 7C 00              1243 	mov	r4,#0x00
                           1244 ;	../Initial/src/sdr1kctl.c:221: if ( rc == 0 ) { 
   029C EB                 1245 	mov	a,r3
   029D 4C                 1246 	orl	a,r4
   029E 70 13              1247 	jnz	00106$
                           1248 ;	../Initial/src/sdr1kctl.c:222: putstr("DDS Write bail out 3\n");
   02A0 90s00rFE           1249 	mov	dptr,#__str_12
   02A3 75 F0 80           1250 	mov	b,#0x80
   02A6 C0 03              1251 	push	ar3
   02A8 C0 04              1252 	push	ar4
   02AA 12s00r00           1253 	lcall	_putstr
   02AD D0 04              1254 	pop	ar4
   02AF D0 03              1255 	pop	ar3
                           1256 ;	../Initial/src/sdr1kctl.c:223: break;
   02B1 80 40              1257 	sjmp	00111$
   02B3                    1258 00106$:
                           1259 ;	../Initial/src/sdr1kctl.c:225: udelay(DDS_WRITE_INTEROP_DELAY_MICROS);
   02B3 75 82 02           1260 	mov	dpl,#0x02
   02B6 C0 02              1261 	push	ar2
   02B8 12s00r00           1262 	lcall	_udelay
   02BB D0 02              1263 	pop	ar2
                           1264 ;	../Initial/src/sdr1kctl.c:226: rc = SDR1k_Control_Latch(LATCH_ADR, 0x40 | wIndexH);
   02BD 74 40              1265 	mov	a,#0x40
   02BF 4A                 1266 	orl	a,r2
   02C0 F5*04              1267 	mov	_SDR1k_Control_Latch_PARM_2,a
   02C2 75 82 08           1268 	mov	dpl,#0x08
   02C5 12s00rF1           1269 	lcall	_SDR1k_Control_Latch
   02C8 AA 82              1270 	mov	r2,dpl
   02CA 8A 03              1271 	mov	ar3,r2
   02CC 7C 00              1272 	mov	r4,#0x00
                           1273 ;	../Initial/src/sdr1kctl.c:227: if ( rc == 0 ) {
   02CE EB                 1274 	mov	a,r3
   02CF 4C                 1275 	orl	a,r4
   02D0 70 13              1276 	jnz	00108$
                           1277 ;	../Initial/src/sdr1kctl.c:228: putstr("DDS Write bail out 4\n"); 
   02D2 90s01r14           1278 	mov	dptr,#__str_13
   02D5 75 F0 80           1279 	mov	b,#0x80
   02D8 C0 03              1280 	push	ar3
   02DA C0 04              1281 	push	ar4
   02DC 12s00r00           1282 	lcall	_putstr
   02DF D0 04              1283 	pop	ar4
   02E1 D0 03              1284 	pop	ar3
                           1285 ;	../Initial/src/sdr1kctl.c:229: break;
   02E3 80 0E              1286 	sjmp	00111$
   02E5                    1287 00108$:
                           1288 ;	../Initial/src/sdr1kctl.c:231: udelay(DDS_WRITE_INTEROP_DELAY_MICROS);
   02E5 75 82 02           1289 	mov	dpl,#0x02
   02E8 C0 03              1290 	push	ar3
   02EA C0 04              1291 	push	ar4
   02EC 12s00r00           1292 	lcall	_udelay
   02EF D0 04              1293 	pop	ar4
   02F1 D0 03              1294 	pop	ar3
                           1295 ;	../Initial/src/sdr1kctl.c:233: } while ( 0 ); 
   02F3                    1296 00111$:
                           1297 ;	../Initial/src/sdr1kctl.c:235: return rc;
   02F3 8B 82              1298 	mov	dpl,r3
   02F5 22                 1299 	ret
                           1300 ;------------------------------------------------------------
                           1301 ;Allocation info for local variables in function 'SDR1k_Control_SR_Load'
                           1302 ;------------------------------------------------------------
                           1303 ;wIndexL                   Allocated with name '_SDR1k_Control_SR_Load_PARM_2'
                           1304 ;wIndexH                   Allocated to registers r2 
                           1305 ;i                         Allocated to registers r2 r4 
                           1306 ;rc                        Allocated to registers 
                           1307 ;bpfbits                   Allocated to registers r3 
                           1308 ;------------------------------------------------------------
                           1309 ;	../Initial/src/sdr1kctl.c:244: unsigned char SDR1k_Control_SR_Load(unsigned char wIndexH, unsigned char wIndexL) {
                           1310 ;	-----------------------------------------
                           1311 ;	 function SDR1k_Control_SR_Load
                           1312 ;	-----------------------------------------
   02F6                    1313 _SDR1k_Control_SR_Load:
   02F6 AA 82              1314 	mov	r2,dpl
                           1315 ;	../Initial/src/sdr1kctl.c:250: unsigned char bpfbits = LastBPF_Value;
   02F8 AB*03              1316 	mov	r3,_LastBPF_Value
                           1317 ;	../Initial/src/sdr1kctl.c:251: SET_BIT(bpfbits, 5);  // srload=1 
   02FA 43 03 20           1318 	orl	ar3,#0x20
                           1319 ;	../Initial/src/sdr1kctl.c:252: if ( IS_BIT_SET(wIndexH, 4) ) {
   02FD EA                 1320 	mov	a,r2
   02FE 30 E4 05           1321 	jnb	acc.4,00102$
                           1322 ;	../Initial/src/sdr1kctl.c:253: SET_BIT(bpfbits, 4);  
   0301 43 03 10           1323 	orl	ar3,#0x10
   0304 80 03              1324 	sjmp	00103$
   0306                    1325 00102$:
                           1326 ;	../Initial/src/sdr1kctl.c:256: CLEAR_BIT(bpfbits, 4); 
   0306 53 03 EF           1327 	anl	ar3,#0xEF
   0309                    1328 00103$:
                           1329 ;	../Initial/src/sdr1kctl.c:258: if ( IS_BIT_SET(wIndexH, 3) ) {
   0309 EA                 1330 	mov	a,r2
   030A 30 E3 05           1331 	jnb	acc.3,00105$
                           1332 ;	../Initial/src/sdr1kctl.c:259: SET_BIT(bpfbits, 3);  
   030D 43 03 08           1333 	orl	ar3,#0x08
   0310 80 03              1334 	sjmp	00106$
   0312                    1335 00105$:
                           1336 ;	../Initial/src/sdr1kctl.c:262: CLEAR_BIT(bpfbits, 3); 
   0312 53 03 F7           1337 	anl	ar3,#0xF7
   0315                    1338 00106$:
                           1339 ;	../Initial/src/sdr1kctl.c:264: SET_BIT(bpfbits, 2);  // xsclr = 1
   0315 43 03 04           1340 	orl	ar3,#0x04
                           1341 ;	../Initial/src/sdr1kctl.c:265: CLEAR_BIT(bpfbits, 1);  // sclk = 0 
   0318 53 03 FD           1342 	anl	ar3,#0xFD
                           1343 ;	../Initial/src/sdr1kctl.c:267: if ( wIndexL != 0 ) {
   031B E5*06              1344 	mov	a,_SDR1k_Control_SR_Load_PARM_2
   031D 60 62              1345 	jz	00111$
                           1346 ;	../Initial/src/sdr1kctl.c:268: for ( i = 7; i >= 0; i-- ) { 
   031F 7A 07              1347 	mov	r2,#0x07
   0321 7C 00              1348 	mov	r4,#0x00
   0323                    1349 00113$:
   0323 EC                 1350 	mov	a,r4
   0324 20 E7 69           1351 	jb	acc.7,00112$
                           1352 ;	../Initial/src/sdr1kctl.c:269: if ( IS_BIT_SET(wIndexL, i) ) {
   0327 8A F0              1353 	mov	b,r2
   0329 05 F0              1354 	inc	b
   032B 7D 01              1355 	mov	r5,#0x01
   032D 7E 00              1356 	mov	r6,#0x00
   032F 80 06              1357 	sjmp	00131$
   0331                    1358 00130$:
   0331 ED                 1359 	mov	a,r5
   0332 2D                 1360 	add	a,r5
   0333 FD                 1361 	mov	r5,a
   0334 EE                 1362 	mov	a,r6
   0335 33                 1363 	rlc	a
   0336 FE                 1364 	mov	r6,a
   0337                    1365 00131$:
   0337 D5 F0 F7           1366 	djnz	b,00130$
   033A AF*06              1367 	mov	r7,_SDR1k_Control_SR_Load_PARM_2
   033C 78 00              1368 	mov	r0,#0x00
   033E EF                 1369 	mov	a,r7
   033F 52 05              1370 	anl	ar5,a
   0341 E8                 1371 	mov	a,r0
   0342 52 06              1372 	anl	ar6,a
   0344 ED                 1373 	mov	a,r5
   0345 4E                 1374 	orl	a,r6
   0346 60 05              1375 	jz	00108$
                           1376 ;	../Initial/src/sdr1kctl.c:270: SET_BIT(bpfbits, 0);  
   0348 43 03 01           1377 	orl	ar3,#0x01
   034B 80 03              1378 	sjmp	00109$
   034D                    1379 00108$:
                           1380 ;	../Initial/src/sdr1kctl.c:273: CLEAR_BIT(bpfbits, 0);  
   034D 53 03 FE           1381 	anl	ar3,#0xFE
   0350                    1382 00109$:
                           1383 ;	../Initial/src/sdr1kctl.c:275: rc = SDR1k_Control_Latch(LATCH_BPF, bpfbits); // load data 
   0350 8B*04              1384 	mov	_SDR1k_Control_Latch_PARM_2,r3
   0352 75 82 02           1385 	mov	dpl,#0x02
   0355 C0 02              1386 	push	ar2
   0357 C0 03              1387 	push	ar3
   0359 C0 04              1388 	push	ar4
   035B 12s00rF1           1389 	lcall	_SDR1k_Control_Latch
   035E D0 04              1390 	pop	ar4
   0360 D0 03              1391 	pop	ar3
                           1392 ;	../Initial/src/sdr1kctl.c:276: SET_BIT(bpfbits, 1);   // sclk = hi 
   0362 43 03 02           1393 	orl	ar3,#0x02
                           1394 ;	../Initial/src/sdr1kctl.c:277: rc = SDR1k_Control_Latch(LATCH_BPF, bpfbits); // clock it 
   0365 8B*04              1395 	mov	_SDR1k_Control_Latch_PARM_2,r3
   0367 75 82 02           1396 	mov	dpl,#0x02
   036A C0 03              1397 	push	ar3
   036C C0 04              1398 	push	ar4
   036E 12s00rF1           1399 	lcall	_SDR1k_Control_Latch
   0371 D0 04              1400 	pop	ar4
   0373 D0 03              1401 	pop	ar3
   0375 D0 02              1402 	pop	ar2
                           1403 ;	../Initial/src/sdr1kctl.c:278: CLEAR_BIT(bpfbits, 1); // sclk = lo 	 		 	 		
   0377 53 03 FD           1404 	anl	ar3,#0xFD
                           1405 ;	../Initial/src/sdr1kctl.c:268: for ( i = 7; i >= 0; i-- ) { 
   037A 1A                 1406 	dec	r2
   037B BA FF 01           1407 	cjne	r2,#0xff,00133$
   037E 1C                 1408 	dec	r4
   037F                    1409 00133$:
   037F 80 A2              1410 	sjmp	00113$
   0381                    1411 00111$:
                           1412 ;	../Initial/src/sdr1kctl.c:282: CLEAR_BIT(bpfbits, 2); 
   0381 53 03 FB           1413 	anl	ar3,#0xFB
                           1414 ;	../Initial/src/sdr1kctl.c:283: rc = SDR1k_Control_Latch(LATCH_BPF, bpfbits); 
   0384 8B*04              1415 	mov	_SDR1k_Control_Latch_PARM_2,r3
   0386 75 82 02           1416 	mov	dpl,#0x02
   0389 C0 03              1417 	push	ar3
   038B 12s00rF1           1418 	lcall	_SDR1k_Control_Latch
   038E D0 03              1419 	pop	ar3
   0390                    1420 00112$:
                           1421 ;	../Initial/src/sdr1kctl.c:286: CLEAR_BIT(bpfbits, 5); // srload=0 
   0390 53 03 DF           1422 	anl	ar3,#0xDF
                           1423 ;	../Initial/src/sdr1kctl.c:287: rc = SDR1k_Control_Latch(LATCH_BPF, bpfbits); 
   0393 8B*04              1424 	mov	_SDR1k_Control_Latch_PARM_2,r3
   0395 75 82 02           1425 	mov	dpl,#0x02
   0398 C0 03              1426 	push	ar3
   039A 12s00rF1           1427 	lcall	_SDR1k_Control_Latch
   039D D0 03              1428 	pop	ar3
                           1429 ;	../Initial/src/sdr1kctl.c:288: SET_BIT(bpfbits, 5); // srload=1
   039F 74 20              1430 	mov	a,#0x20
   03A1 4B                 1431 	orl	a,r3
   03A2 F5*04              1432 	mov	_SDR1k_Control_Latch_PARM_2,a
                           1433 ;	../Initial/src/sdr1kctl.c:289: rc = SDR1k_Control_Latch(LATCH_BPF, bpfbits);  
   03A4 75 82 02           1434 	mov	dpl,#0x02
                           1435 ;	../Initial/src/sdr1kctl.c:290: return rc; 
   03A7 02s00rF1           1436 	ljmp	_SDR1k_Control_Latch
                           1437 ;------------------------------------------------------------
                           1438 ;Allocation info for local variables in function 'SDR1k_ControlOut'
                           1439 ;------------------------------------------------------------
                           1440 ;wValueL                   Allocated with name '_SDR1k_ControlOut_PARM_2'
                           1441 ;wIndexH                   Allocated with name '_SDR1k_ControlOut_PARM_3'
                           1442 ;wIndexL                   Allocated with name '_SDR1k_ControlOut_PARM_4'
                           1443 ;bufp                      Allocated with name '_SDR1k_ControlOut_PARM_5'
                           1444 ;buflen                    Allocated with name '_SDR1k_ControlOut_PARM_6'
                           1445 ;wValueH                   Allocated to registers 
                           1446 ;------------------------------------------------------------
                           1447 ;	../Initial/src/sdr1kctl.c:298: unsigned char SDR1k_ControlOut(unsigned char wValueH, unsigned char wValueL,
                           1448 ;	-----------------------------------------
                           1449 ;	 function SDR1k_ControlOut
                           1450 ;	-----------------------------------------
   03AA                    1451 _SDR1k_ControlOut:
                           1452 ;	../Initial/src/sdr1kctl.c:309: switch ( wValueL ) {			
   03AA E5*07              1453 	mov	a,_SDR1k_ControlOut_PARM_2
   03AC 24 FA              1454 	add	a,#0xff - 0x05
   03AE 40 40              1455 	jc	00106$
   03B0 E5*07              1456 	mov	a,_SDR1k_ControlOut_PARM_2
   03B2 25*07              1457 	add	a,_SDR1k_ControlOut_PARM_2
   03B4 25*07              1458 	add	a,_SDR1k_ControlOut_PARM_2
   03B6 90s03rBA           1459 	mov	dptr,#00111$
   03B9 73                 1460 	jmp	@a+dptr
   03BA                    1461 00111$:
   03BA 02s03rF0           1462 	ljmp	00106$
   03BD 02s03rEA           1463 	ljmp	00105$
   03C0 02s03rCC           1464 	ljmp	00101$
   03C3 02s03rD5           1465 	ljmp	00102$
   03C6 02s03rD8           1466 	ljmp	00103$
   03C9 02s03rE1           1467 	ljmp	00104$
                           1468 ;	../Initial/src/sdr1kctl.c:310: case SDR1KCTRL_LATCH:    
   03CC                    1469 00101$:
                           1470 ;	../Initial/src/sdr1kctl.c:311: return SDR1k_Control_Latch(wIndexH, wIndexL); 
   03CC 85*09*04           1471 	mov	_SDR1k_Control_Latch_PARM_2,_SDR1k_ControlOut_PARM_4
   03CF 85*08 82           1472 	mov	dpl,_SDR1k_ControlOut_PARM_3
                           1473 ;	../Initial/src/sdr1kctl.c:314: case SDR1KCTRL_DDS_RESET:
   03D2 02s00rF1           1474 	ljmp	_SDR1k_Control_Latch
   03D5                    1475 00102$:
                           1476 ;	../Initial/src/sdr1kctl.c:315: return SDR1k_Control_DDS_Reset(); 
                           1477 ;	../Initial/src/sdr1kctl.c:318: case SDR1KCTRL_DDS_WRITE:
   03D5 02s01rAF           1478 	ljmp	_SDR1k_Control_DDS_Reset
   03D8                    1479 00103$:
                           1480 ;	../Initial/src/sdr1kctl.c:319: return SDR1k_Control_DDS_Write(wIndexH, wIndexL); 
   03D8 85*09*05           1481 	mov	_SDR1k_Control_DDS_Write_PARM_2,_SDR1k_ControlOut_PARM_4
   03DB 85*08 82           1482 	mov	dpl,_SDR1k_ControlOut_PARM_3
                           1483 ;	../Initial/src/sdr1kctl.c:322: case SDR1KCTRL_SR_LOAD:     
   03DE 02s02r1F           1484 	ljmp	_SDR1k_Control_DDS_Write
   03E1                    1485 00104$:
                           1486 ;	../Initial/src/sdr1kctl.c:323: return SDR1k_Control_SR_Load(wIndexH, wIndexL); 
   03E1 85*09*06           1487 	mov	_SDR1k_Control_SR_Load_PARM_2,_SDR1k_ControlOut_PARM_4
   03E4 85*08 82           1488 	mov	dpl,_SDR1k_ControlOut_PARM_3
                           1489 ;	../Initial/src/sdr1kctl.c:326: case SDR1KCTRL_SET_DATA_REG: 
   03E7 02s02rF6           1490 	ljmp	_SDR1k_Control_SR_Load
   03EA                    1491 00105$:
                           1492 ;	../Initial/src/sdr1kctl.c:327: return SDR1k_Control_setDataReg(wIndexL); 
   03EA 85*09 82           1493 	mov	dpl,_SDR1k_ControlOut_PARM_4
                           1494 ;	../Initial/src/sdr1kctl.c:329: }
                           1495 ;	../Initial/src/sdr1kctl.c:330: return 0;	 
   03ED 02s00r86           1496 	ljmp	_SDR1k_Control_setDataReg
   03F0                    1497 00106$:
   03F0 75 82 00           1498 	mov	dpl,#0x00
   03F3 22                 1499 	ret
                           1500 ;------------------------------------------------------------
                           1501 ;Allocation info for local variables in function 'SDR1k_Control_Read_Status'
                           1502 ;------------------------------------------------------------
                           1503 ;buflen                    Allocated with name '_SDR1k_Control_Read_Status_PARM_2'
                           1504 ;bufp                      Allocated to registers 
                           1505 ;rc                        Allocated to registers 
                           1506 ;------------------------------------------------------------
                           1507 ;	../Initial/src/sdr1kctl.c:333: unsigned char SDR1k_Control_Read_Status(const xdata unsigned char *bufp, unsigned char buflen) {
                           1508 ;	-----------------------------------------
                           1509 ;	 function SDR1k_Control_Read_Status
                           1510 ;	-----------------------------------------
   03F4                    1511 _SDR1k_Control_Read_Status:
   03F4 85 82*00           1512 	mov	_spi_read_PARM_5,dpl
   03F7 85 83*01           1513 	mov	(_spi_read_PARM_5 + 1),dph
                           1514 ;	../Initial/src/sdr1kctl.c:339: rc = spi_read(0, ADDR_STATUS | 0x40, SPI_EN_FPGA, SPI_FMT_HDR_1 | SPI_FMT_MSB, bufp, buflen);
   03FA 75*00 43           1515 	mov	_spi_read_PARM_2,#0x43
   03FD 75*00 80           1516 	mov	_spi_read_PARM_3,#0x80
   0400 75*00 20           1517 	mov	_spi_read_PARM_4,#0x20
   0403 85*0D*00           1518 	mov	_spi_read_PARM_6,_SDR1k_Control_Read_Status_PARM_2
   0406 75 82 00           1519 	mov	dpl,#0x00
                           1520 ;	../Initial/src/sdr1kctl.c:349: return rc; 
   0409 02s00r00           1521 	ljmp	_spi_read
                           1522 ;------------------------------------------------------------
                           1523 ;Allocation info for local variables in function 'SDR1k_Control_Read_Version'
                           1524 ;------------------------------------------------------------
                           1525 ;buflen                    Allocated with name '_SDR1k_Control_Read_Version_PARM_2'
                           1526 ;bufp                      Allocated to registers r2 r3 
                           1527 ;rc                        Allocated with name '_SDR1k_Control_Read_Version_rc_1_1'
                           1528 ;bbuf                      Allocated with name '_SDR1k_Control_Read_Version_bbuf_1_1'
                           1529 ;srcp                      Allocated to registers 
                           1530 ;destp                     Allocated to registers r2 r3 
                           1531 ;i                         Allocated with name '_SDR1k_Control_Read_Version_i_1_1'
                           1532 ;ver_string                Allocated with name '_SDR1k_Control_Read_Version_ver_string_1_1'
                           1533 ;------------------------------------------------------------
                           1534 ;	../Initial/src/sdr1kctl.c:353: unsigned char SDR1k_Control_Read_Version(const xdata unsigned char *bufp, unsigned char buflen) {
                           1535 ;	-----------------------------------------
                           1536 ;	 function SDR1k_Control_Read_Version
                           1537 ;	-----------------------------------------
   040C                    1538 _SDR1k_Control_Read_Version:
   040C AA 82              1539 	mov	r2,dpl
   040E AB 83              1540 	mov	r3,dph
                           1541 ;	../Initial/src/sdr1kctl.c:359: unsigned char ver_string[] = "20090201"; /* this must be eight bytes  - is what pc side is looking for */    
   0410 75*04 32           1542 	mov	_SDR1k_Control_Read_Version_ver_string_1_1,#0x32
   0413 75*05 30           1543 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0001),#0x30
   0416 75*06 30           1544 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0002),#0x30
   0419 75*07 39           1545 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0003),#0x39
   041C 75*08 30           1546 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0004),#0x30
   041F 75*09 32           1547 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0005),#0x32
   0422 75*0A 30           1548 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0006),#0x30
   0425 75*0B 31           1549 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0007),#0x31
   0428 75*0C 00           1550 	mov	(_SDR1k_Control_Read_Version_ver_string_1_1 + 0x0008),#0x00
                           1551 ;	../Initial/src/sdr1kctl.c:367: srcp = ver_string; 
                           1552 ;	../Initial/src/sdr1kctl.c:369: while ( *srcp != 0 ) {
   042B 7Cr04              1553 	mov	r4,#_SDR1k_Control_Read_Version_ver_string_1_1
   042D 7Ds00              1554 	mov	r5,#(_SDR1k_Control_Read_Version_ver_string_1_1 >> 8)
   042F 7E 40              1555 	mov	r6,#0x40
   0431                    1556 00101$:
   0431 8C 82              1557 	mov	dpl,r4
   0433 8D 83              1558 	mov	dph,r5
   0435 8E F0              1559 	mov	b,r6
   0437 12s00r00           1560 	lcall	__gptrget
   043A FF                 1561 	mov	r7,a
   043B 60 12              1562 	jz	00103$
                           1563 ;	../Initial/src/sdr1kctl.c:370: *destp = *srcp; 
   043D 8A 82              1564 	mov	dpl,r2
   043F 8B 83              1565 	mov	dph,r3
   0441 EF                 1566 	mov	a,r7
   0442 F0                 1567 	movx	@dptr,a
   0443 A3                 1568 	inc	dptr
   0444 AA 82              1569 	mov	r2,dpl
   0446 AB 83              1570 	mov	r3,dph
                           1571 ;	../Initial/src/sdr1kctl.c:371: ++destp; 
                           1572 ;	../Initial/src/sdr1kctl.c:372: ++srcp; 
   0448 0C                 1573 	inc	r4
   0449 BC 00 E5           1574 	cjne	r4,#0x00,00101$
   044C 0D                 1575 	inc	r5
   044D 80 E2              1576 	sjmp	00101$
   044F                    1577 00103$:
                           1578 ;	../Initial/src/sdr1kctl.c:375: return 1;
   044F 75 82 01           1579 	mov	dpl,#0x01
   0452 22                 1580 	ret
                           1581 ;------------------------------------------------------------
                           1582 ;Allocation info for local variables in function 'SDR1k_ControlIn'
                           1583 ;------------------------------------------------------------
                           1584 ;wValueL                   Allocated with name '_SDR1k_ControlIn_PARM_2'
                           1585 ;wIndexH                   Allocated with name '_SDR1k_ControlIn_PARM_3'
                           1586 ;wIndexL                   Allocated with name '_SDR1k_ControlIn_PARM_4'
                           1587 ;bufp                      Allocated with name '_SDR1k_ControlIn_PARM_5'
                           1588 ;buflen                    Allocated with name '_SDR1k_ControlIn_PARM_6'
                           1589 ;wValueH                   Allocated to registers 
                           1590 ;------------------------------------------------------------
                           1591 ;	../Initial/src/sdr1kctl.c:396: unsigned char SDR1k_ControlIn(unsigned char wValueH, unsigned char wValueL,
                           1592 ;	-----------------------------------------
                           1593 ;	 function SDR1k_ControlIn
                           1594 ;	-----------------------------------------
   0453                    1595 _SDR1k_ControlIn:
                           1596 ;	../Initial/src/sdr1kctl.c:400: switch ( wValueL ) {
   0453 74 06              1597 	mov	a,#0x06
   0455 B5*0E 02           1598 	cjne	a,_SDR1k_ControlIn_PARM_2,00109$
   0458 80 07              1599 	sjmp	00101$
   045A                    1600 00109$:
   045A 74 07              1601 	mov	a,#0x07
                           1602 ;	../Initial/src/sdr1kctl.c:402: case SDR1KCTRL_READ_STATUS: 
   045C B5*0E 1A           1603 	cjne	a,_SDR1k_ControlIn_PARM_2,00103$
   045F 80 0C              1604 	sjmp	00102$
   0461                    1605 00101$:
                           1606 ;	../Initial/src/sdr1kctl.c:403: return SDR1k_Control_Read_Status(bufp, buflen);
   0461 85*13*0D           1607 	mov	_SDR1k_Control_Read_Status_PARM_2,_SDR1k_ControlIn_PARM_6
   0464 85*11 82           1608 	mov	dpl,_SDR1k_ControlIn_PARM_5
   0467 85*12 83           1609 	mov	dph,(_SDR1k_ControlIn_PARM_5 + 1)
                           1610 ;	../Initial/src/sdr1kctl.c:406: case SDR1KCTRL_READ_VERSION: 
   046A 02s03rF4           1611 	ljmp	_SDR1k_Control_Read_Status
   046D                    1612 00102$:
                           1613 ;	../Initial/src/sdr1kctl.c:407: return SDR1k_Control_Read_Version(bufp, buflen);
   046D 85*13*00           1614 	mov	_SDR1k_Control_Read_Version_PARM_2,_SDR1k_ControlIn_PARM_6
   0470 85*11 82           1615 	mov	dpl,_SDR1k_ControlIn_PARM_5
   0473 85*12 83           1616 	mov	dph,(_SDR1k_ControlIn_PARM_5 + 1)
                           1617 ;	../Initial/src/sdr1kctl.c:410: default:
   0476 02s04r0C           1618 	ljmp	_SDR1k_Control_Read_Version
   0479                    1619 00103$:
                           1620 ;	../Initial/src/sdr1kctl.c:411: putstr("Sdr1k_ControlIn: not implementd!\n"); 
   0479 90s01r2A           1621 	mov	dptr,#__str_15
   047C 75 F0 80           1622 	mov	b,#0x80
   047F 12s00r00           1623 	lcall	_putstr
                           1624 ;	../Initial/src/sdr1kctl.c:414: return 0;  							   	
   0482 75 82 00           1625 	mov	dpl,#0x00
   0485 22                 1626 	ret
                           1627 	.area CSEG    (CODE)
                           1628 	.area CONST   (CODE)
   0000                    1629 __str_0:
   0000 73 65 74 44 61 74  1630 	.ascii "setDataReg val=0x"
        61 52 65 67 20 76
        61 6C 3D 30 78
   0011 00                 1631 	.db 0x00
   0012                    1632 __str_1:
   0012 0A                 1633 	.db 0x0A
   0013 00                 1634 	.db 0x00
   0014                    1635 __str_2:
   0014 73 65 74 44 61 74  1636 	.ascii "setDataReg bailout"
        61 52 65 67 20 62
        61 69 6C 6F 75 74
   0026 0A                 1637 	.db 0x0A
   0027 00                 1638 	.db 0x00
   0028                    1639 __str_3:
   0028 73 65 74 44 61 74  1640 	.ascii "setDataReg good rc"
        61 52 65 67 20 67
        6F 6F 64 20 72 63
   003A 0A                 1641 	.db 0x0A
   003B 00                 1642 	.db 0x00
   003C                    1643 __str_4:
   003C 6C 61 74 63 68 20  1644 	.ascii "latch bail out spi write 1"
        62 61 69 6C 20 6F
        75 74 20 73 70 69
        20 77 72 69 74 65
        20 31
   0056 0A                 1645 	.db 0x0A
   0057 00                 1646 	.db 0x00
   0058                    1647 __str_5:
   0058 6C 61 74 63 68 20  1648 	.ascii "latch bail out spi write 2"
        62 61 69 6C 20 6F
        75 74 20 73 70 69
        20 77 72 69 74 65
        20 32
   0072 0A                 1649 	.db 0x0A
   0073 00                 1650 	.db 0x00
   0074                    1651 __str_6:
   0074 6C 61 74 63 68 20  1652 	.ascii "latch bail out spi write 3"
        62 61 69 6C 20 6F
        75 74 20 73 70 69
        20 77 72 69 74 65
        20 33
   008E 0A                 1653 	.db 0x0A
   008F 00                 1654 	.db 0x00
   0090                    1655 __str_7:
   0090 44 44 53 20 52 65  1656 	.ascii "DDS Reset bail out 1"
        73 65 74 20 62 61
        69 6C 20 6F 75 74
        20 31
   00A4 0A                 1657 	.db 0x0A
   00A5 00                 1658 	.db 0x00
   00A6                    1659 __str_8:
   00A6 44 44 53 20 52 65  1660 	.ascii "DDS Reset bail out 2"
        73 65 74 20 62 61
        69 6C 20 6F 75 74
        20 32
   00BA 0A                 1661 	.db 0x0A
   00BB 00                 1662 	.db 0x00
   00BC                    1663 __str_9:
   00BC 44 44 53 20 52 65  1664 	.ascii "DDS Reset bail out 3"
        73 65 74 20 62 61
        69 6C 20 6F 75 74
        20 33
   00D0 0A                 1665 	.db 0x0A
   00D1 00                 1666 	.db 0x00
   00D2                    1667 __str_10:
   00D2 44 44 53 20 57 72  1668 	.ascii "DDS Write bail out 1"
        69 74 65 20 62 61
        69 6C 20 6F 75 74
        20 31
   00E6 0A                 1669 	.db 0x0A
   00E7 00                 1670 	.db 0x00
   00E8                    1671 __str_11:
   00E8 44 44 53 20 57 72  1672 	.ascii "DDS Write bail out 2"
        69 74 65 20 62 61
        69 6C 20 6F 75 74
        20 32
   00FC 0A                 1673 	.db 0x0A
   00FD 00                 1674 	.db 0x00
   00FE                    1675 __str_12:
   00FE 44 44 53 20 57 72  1676 	.ascii "DDS Write bail out 3"
        69 74 65 20 62 61
        69 6C 20 6F 75 74
        20 33
   0112 0A                 1677 	.db 0x0A
   0113 00                 1678 	.db 0x00
   0114                    1679 __str_13:
   0114 44 44 53 20 57 72  1680 	.ascii "DDS Write bail out 4"
        69 74 65 20 62 61
        69 6C 20 6F 75 74
        20 34
   0128 0A                 1681 	.db 0x0A
   0129 00                 1682 	.db 0x00
   012A                    1683 __str_15:
   012A 53 64 72 31 6B 5F  1684 	.ascii "Sdr1k_ControlIn: not implementd!"
        43 6F 6E 74 72 6F
        6C 49 6E 3A 20 6E
        6F 74 20 69 6D 70
        6C 65 6D 65 6E 74
        64 21
   014A 0A                 1685 	.db 0x0A
   014B 00                 1686 	.db 0x00
                           1687 	.area CABS    (ABS,CODE)
