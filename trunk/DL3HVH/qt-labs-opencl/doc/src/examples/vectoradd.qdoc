/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** No Commercial Usage
** This file contains pre-release code and may not be distributed.
** You may use this file in accordance with the terms and conditions
** contained in the Technology Preview License Agreement accompanying
** this package.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example vectoradd
    \title Vector Addition Example

    The Vector Addition example shows how to use Qt to add two vectors
    using OpenCL.

    We start by creating a QCLContext object and initializing it for
    the default OpenCL computing device (usually the GPU):

    \snippet vectoradd/vectoradd.cpp 1

    Next we need some input data.  We are going to add two 2048-element
    vectors of integers together.  The first vector will hold the
    numbers 0..2047 and the second vector will hold the numbers
    2048..1.  The following code creates and initializes our vectors:

    \snippet vectoradd/vectoradd.cpp 2

    At this point, the data is still in the CPU's address space,
    but by creating the vectors as QCLVector instances, they will be
    automatically transferred to the GPU when we execute the OpenCL
    program later.  We also need somewhere for the GPU to store the results:

    \snippet vectoradd/vectoradd.cpp 3

    Next, we build the program and locate the \c vectorAdd entry point,
    or "kernel" in OpenCL terminology:

    \snippet vectoradd/vectoradd.cpp 4

    The OpenCL source code for our program has been supplied as a
    Qt resource file called \c{vectoradd.cl}.  Before we continue
    with the C++ code, let's have a look at the OpenCL source code:

    \snippet vectoradd/vectoradd.cl 1

    The function \c vectorAdd has two arguments for the input vectors
    and a third argument for the output vector.  The body of the function
    may look a little strange at first glance for a vector addition.
    It fetches an array index and then sets that output location to
    the sum of the two input locations.  It isn't looping over the
    whole vector as would normally be expected in C++ code.

    The magic happens with \c{get_global_id()}, which fetches the index
    value from an outer loop that is provided for us by the OpenCL
    environment.  Most OpenCL functions look like this: they fetch the
    identifiers for the current "work item", and then process just
    that item.  Back in our C++ code, we specify the number of
    work items with QCLKernel::setGlobalWorkSize():

    \snippet vectoradd/vectoradd.cpp 5

    This tells the OpenCL implementation how many times it should iterate
    over the inputs, passing a different global identifier to each instance.
    These iterations are executed in parallel to speed up the calculations.
    In C++, we execute the kernel, passing it the three vectors, as follows:

    \snippet vectoradd/vectoradd.cpp 6

    Behind the scenes, QCLKernel will make sure that the contents of
    our input vectors are transferred to the GPU before the kernel
    begins execution.

    Finally, we read back the results from the output buffer and check
    that the answer is what we expected:

    \snippet vectoradd/vectoradd.cpp 7

    The first time that the host refers to the contents of the output
    vector, the data is automatically transferred from the GPU to the host.

    If all goes well, the following should be printed by the program:

    \code
    Answer is correct: 2048
    \endcode

    \l{index.html}{Return to Home}
*/
