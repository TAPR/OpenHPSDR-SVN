/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MonitorPanel.java
 *
 * Created on 31-Dec-2009, 17:38:26
 */

package jmonitor;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;

/**
 *
 * @author john
 */
public class MonitorPanel extends javax.swing.JPanel {

    /** Creates new form MonitorPanel */
    public MonitorPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(480, 100));
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void setClient(Client client) {
        this.client=client;
    }

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        client.sendCommand("scrollFrequency "+Integer.toString(evt.getWheelRotation()*(client.getSampleRate()/WIDTH)));
    }//GEN-LAST:event_formMouseWheelMoved

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        client.sendCommand("scrollFrequency "+Integer.toString((evt.getX()-(WIDTH/2))*(client.getSampleRate()/WIDTH)));
    }//GEN-LAST:event_formMouseClicked

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        int increment=startX-evt.getX();
        client.sendCommand("scrollFrequency "+Integer.toString(increment*(client.getSampleRate()/WIDTH)));
        startX=evt.getX();
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        startX=evt.getX();
    }//GEN-LAST:event_formMousePressed


    protected void paintComponent(Graphics g) {
        if(image!=null) {
            g.drawImage(image,0,0,null);
        } else {
            g.setColor(Color.BLACK);
            g.fillRect(0,0,WIDTH,HEIGHT);
        }
    }

    public void updateMonitor(float[] samples,int filterLow,int filterHigh,int sampleRate) {
        plotSpectrum(samples,filterLow,filterHigh,sampleRate);
        drawSpectrum();
    }

    private void plotSpectrum(float[] samples,int filterLow,int filterHigh,int sampleRate) {
        for(int i=0;i<WIDTH;i++) {
            X[i]=i;
            Y[i]=(int)Math.floor(((float)spectrumHigh-samples[i])*(float)HEIGHT/(float)(spectrumHigh-spectrumLow));
        }

        if(debugCount<2) {
            for(int i=0;i<WIDTH;i++) {
                System.err.println(Integer.toString(i)+","+Integer.toString(Y[i]));
            }
            debugCount++;
        }

        filterLeft=(filterLow-(-sampleRate/2))*WIDTH/sampleRate;
        filterRight=(filterHigh-(-sampleRate/2))*WIDTH/sampleRate;
    }

    private void drawSpectrum() {
        if(image==null) image=this.createImage(WIDTH,HEIGHT);
        Graphics graphics=image.getGraphics();
        graphics.setColor(Color.BLACK);
        graphics.fillRect(0,0,WIDTH,HEIGHT);

        // draw cursor
        graphics.setColor(Color.RED);
        graphics.drawLine(WIDTH/2, 0, WIDTH/2, HEIGHT);

        // draw the filter
        graphics.setColor(Color.LIGHT_GRAY);
        graphics.fillRect(filterLeft,0,filterRight-filterLeft,HEIGHT);

        // plot the data
        graphics.setColor(Color.WHITE);
        graphics.drawPolyline(X,Y,X.length);

        this.repaint(new Rectangle(WIDTH,HEIGHT));
    }

    private static final int SAMPLES=480;
    private static final int WIDTH=480;
    private static final int HEIGHT=100;

    private Client client;

    private int spectrumHigh=-40;
    private int spectrumLow=-160;

    private int X[]=new int[WIDTH];
    private int Y[]=new int[WIDTH];
    private int filterLeft;
    private int filterRight;

    private Image image;

    private int startX;

    private int debugCount=0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
