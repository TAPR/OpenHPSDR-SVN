/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MonitorPanel.java
 *
 * Created on 31-Dec-2009, 17:38:26
 */

package jmonitor;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;

/**
 *
 * @author john
 */
public class MonitorPanel extends javax.swing.JPanel {

    /** Creates new form MonitorPanel */
    public MonitorPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(480, 100));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 85, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    protected void paintComponent(Graphics g) {
        if(image!=null) {
            g.drawImage(image,0,0,null);
        } else {
            g.setColor(Color.BLACK);
            g.fillRect(0,0,WIDTH,HEIGHT);
        }
    }

    public void updateMonitor(float[] samples) {
        plotSpectrum(samples);
        drawSpectrum();
    }

    private void plotSpectrum(float[] samples) {
        float slope=(float)SAMPLES/(float)WIDTH;
        for(int i=0;i<WIDTH;i++) {
            float max=-10000.0F;
            int lindex=(int)Math.floor(i*slope);
            int rindex=(int)Math.floor((i*slope)+slope);
            if(rindex>samples.length) rindex=samples.length;

            for(int j=lindex;j<rindex;j++) {
                if(samples[j]>max) max=samples[j];
            }

            X[i]=i;
            Y[i]=(int)Math.floor(((float)spectrumHigh-max)*(float)HEIGHT/(float)(spectrumHigh-spectrumLow));
        }

        if(debugCount<2) {
            for(int i=0;i<WIDTH;i++) {
                System.err.println(Integer.toString(i)+","+Integer.toString(Y[i]));
            }
            debugCount++;
        }
    }

    private void drawSpectrum() {
        if(image==null) image=this.createImage(WIDTH,HEIGHT);
        Graphics graphics=image.getGraphics();
        graphics.setColor(Color.BLACK);
        graphics.fillRect(0,0,WIDTH,HEIGHT);

        // plot the data
        graphics.setColor(Color.WHITE);
        graphics.drawPolyline(X,Y,X.length);

        this.repaint(new Rectangle(WIDTH,HEIGHT));
    }

    private static final int SAMPLES=4096;
    private static final int WIDTH=480;
    private static final int HEIGHT=100;

    private int spectrumHigh=-40;
    private int spectrumLow=-160;

    private int X[]=new int[WIDTH];
    private int Y[]=new int[WIDTH];

    private Image image;

    private int debugCount=0;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
