/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.g0orx.openhpsdr;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.event.InternalFrameListener;
import javax.swing.event.InternalFrameEvent;
import javax.swing.JMenuItem;
import org.g0orx.openhpsdr.debug.Log;
import org.g0orx.openhpsdr.discovery.Discovered;
import org.g0orx.openhpsdr.wdsp.WDSP;

/**
 *
 * @author john
 */
public class ReceiverJInternalFrame extends javax.swing.JInternalFrame implements MouseListener, MouseMotionListener, MouseWheelListener, InternalFrameListener {

    /**
     * Creates new form RadioJInternalFrame
     */
    public ReceiverJInternalFrame(int rx, Radio radio) {
        this.radio = radio;
        this.discovered = radio.getDiscovered();
        this.receiver = radio.getReceiver(rx);
        this.receiverbase = radio.getId() * 4; // 4 receivers per radio
        this.channel = (radio.getId() * 4) + receiver.getId();

        initComponents();

        this.vfoPanel.addMouseListener(this);
        this.vfoPanel.addMouseMotionListener(this);
        this.vfoPanel.addMouseWheelListener(this);

        this.panadapterPanel.addMouseListener(this);
        this.panadapterPanel.addMouseMotionListener(this);
        this.panadapterPanel.addMouseWheelListener(this);

        this.frequencyPanel.addMouseListener(this);
        this.frequencyPanel.addMouseMotionListener(this);
        this.frequencyPanel.addMouseWheelListener(this);

        this.waterfallPanel.addMouseListener(this);
        this.waterfallPanel.addMouseMotionListener(this);
        this.waterfallPanel.addMouseWheelListener(this);

        Log.i(this, "receiver:" + receiver.getId() + " receiverbase:" + receiverbase);
        this.metis = radio.getMetis();
        this.setTitle("RX" + receiver.getId() + ": " + discovered.getDeviceName() + discovered.getAddress() + " (" + discovered.getMac() + ")");

        filename = discovered.getMac() + ".rad";
        filename = filename.replace(":", "-");

        this.addInternalFrameListener(this);
        
        this.panadapterPanel.setVisible(receiver.displayPanadapter());
        this.waterfallPanel.setVisible(receiver.displayWaterfall());

    }

    public Receiver getReceiver() {
        return receiver;
    }

    public void internalFrameOpened(InternalFrameEvent e) {

    }

    public void internalFrameClosing(InternalFrameEvent e) {

    }

    public void internalFrameClosed(InternalFrameEvent e) {

    }

    public void internalFrameIconified(InternalFrameEvent e) {

    }

    public void internalFrameDeiconified(InternalFrameEvent e) {

    }

    public void internalFrameActivated(InternalFrameEvent e) {
        Log.i(this, "InternalFrameActivated: RX" + receiver);
        metis.setActiveReceiver(receiver.getId());
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        frequencyPanel = new FrequencyPanel(radio,receiver);
        panadapterPanel = new PanadapterPanel(radio,receiver);
        waterfallPanel = new WaterfallPanel(radio,receiver);
        vfoPanel = new VFOPanel(radio,receiver);
        meterPanel = new MeterPanel(radio,receiver);
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuRadio = new javax.swing.JMenu();
        if(discovered.getDevice()==Discovered.DEVICE_ANGELIA ||
            discovered.getDevice()==Discovered.DEVICE_ORION) {
            javax.swing.ButtonGroup group=new javax.swing.ButtonGroup();
            javax.swing.JMenu menu=new javax.swing.JMenu("ADC");
            javax.swing.JRadioButtonMenuItem adc1=new javax.swing.JRadioButtonMenuItem("ADC1");
            adc1.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    receiver.setADC(Receiver.ADC1);
                }
            });
            menu.add(adc1);
            group.add(adc1);
            javax.swing.JRadioButtonMenuItem adc2=new javax.swing.JRadioButtonMenuItem("ADC2");
            adc2.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    receiver.setADC(Receiver.ADC2);
                }
            });
            menu.add(adc2);
            group.add(adc2);
            javax.swing.JRadioButtonMenuItem adc3=new javax.swing.JRadioButtonMenuItem("ADC3");
            if(discovered.getDevice()==Discovered.DEVICE_ORION) {
                adc2.addActionListener(new ActionListener() {
                    public void actionPerformed(ActionEvent evt) {
                        receiver.setADC(Receiver.ADC3);
                    }
                });
                menu.add(adc3);
                group.add(adc3);
            }
            switch(receiver.getADC()) {
                case Receiver.ADC1:
                adc1.setSelected(true);
                break;
                case Receiver.ADC2:
                adc2.setSelected(true);
                break;
                case Receiver.ADC3:
                adc3.setSelected(true);
                break;
            }
            jMenuRadio.add(menu);

        }
        jMenuBand = new javax.swing.JMenu();
        jMenuMode = new javax.swing.JMenu();
        jMenuFilter = new javax.swing.JMenu();
        jMenuStep = new javax.swing.JMenu();
        jMenuDisplay = new javax.swing.JMenu();
        jCheckBoxMenuItemPanadapter = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItemWaterfall = new javax.swing.JCheckBoxMenuItem();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        javax.swing.GroupLayout frequencyPanelLayout = new javax.swing.GroupLayout(frequencyPanel);
        frequencyPanel.setLayout(frequencyPanelLayout);
        frequencyPanelLayout.setHorizontalGroup(
            frequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        frequencyPanelLayout.setVerticalGroup(
            frequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 28, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panadapterPanelLayout = new javax.swing.GroupLayout(panadapterPanel);
        panadapterPanel.setLayout(panadapterPanelLayout);
        panadapterPanelLayout.setHorizontalGroup(
            panadapterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panadapterPanelLayout.setVerticalGroup(
            panadapterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 45, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout waterfallPanelLayout = new javax.swing.GroupLayout(waterfallPanel);
        waterfallPanel.setLayout(waterfallPanelLayout);
        waterfallPanelLayout.setHorizontalGroup(
            waterfallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 908, Short.MAX_VALUE)
        );
        waterfallPanelLayout.setVerticalGroup(
            waterfallPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 51, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout vfoPanelLayout = new javax.swing.GroupLayout(vfoPanel);
        vfoPanel.setLayout(vfoPanelLayout);
        vfoPanelLayout.setHorizontalGroup(
            vfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        vfoPanelLayout.setVerticalGroup(
            vfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 43, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout meterPanelLayout = new javax.swing.GroupLayout(meterPanel);
        meterPanel.setLayout(meterPanelLayout);
        meterPanelLayout.setHorizontalGroup(
            meterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 151, Short.MAX_VALUE)
        );
        meterPanelLayout.setVerticalGroup(
            meterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jMenuRadio.setText("Radio");
        jMenuRadio.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuRadioMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(jMenuRadio);

        jMenuBand.setText("Band");
        jMenuBand.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuBandMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(jMenuBand);

        jMenuMode.setText("Mode");
        for(int i=0;i<Modes.length();i++) {
            Mode mode=Modes.getMode(i);
            javax.swing.JMenuItem item=new javax.swing.JMenuItem(mode.getName());
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    setMode(Modes.getMode(evt.getActionCommand()).getId());
                }
            });
            this.jMenuMode.add(item);
        }
        jMenuBar1.add(jMenuMode);

        jMenuFilter.setText("Filter");
        jMenuFilter.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuFilterMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
        });
        jMenuBar1.add(jMenuFilter);

        jMenuStep.setText("Step");
        this.jMenuStep.removeAll();
        int steps=Step.length();
        javax.swing.ButtonGroup group=new javax.swing.ButtonGroup();
        for(int i=0;i<steps;i++) {
            String s=Integer.toString(Step.getStep(i));
            javax.swing.JRadioButtonMenuItem item=new javax.swing.JRadioButtonMenuItem(s);
            item.setSelected(receiver.getStep()==i);
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    receiver.setStep(evt.getActionCommand());
                }
            });
            this.jMenuStep.add(item);
            group.add(item);
        }
        jMenuBar1.add(jMenuStep);

        jMenuDisplay.setText("Display");
        jMenuDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuDisplayActionPerformed(evt);
            }
        });

        jCheckBoxMenuItemPanadapter.setSelected(true);
        jCheckBoxMenuItemPanadapter.setText("Panadapter");
        jCheckBoxMenuItemPanadapter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemPanadapterActionPerformed(evt);
            }
        });
        jMenuDisplay.add(jCheckBoxMenuItemPanadapter);

        jCheckBoxMenuItemWaterfall.setSelected(true);
        jCheckBoxMenuItemWaterfall.setText("Waterfall");
        jCheckBoxMenuItemWaterfall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemWaterfallActionPerformed(evt);
            }
        });
        jMenuDisplay.add(jCheckBoxMenuItemWaterfall);

        this.jCheckBoxMenuItemPanadapter.setSelected(receiver.displayPanadapter());
        this.jCheckBoxMenuItemWaterfall.setSelected(receiver.displayWaterfall());

        jMenuBar1.add(jMenuDisplay);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(waterfallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(frequencyPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(vfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(meterPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(panadapterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(vfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(meterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(panadapterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(frequencyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(waterfallPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuBandMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuBandMenuSelected
        this.jMenuBand.removeAll();
        Band[] bands = receiver.getBands().getBands();
        for (int i = 0; i < bands.length; i++) {
            JMenuItem item = new JMenuItem();
            item.setText(bands[i].getName());
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    Log.i(this, "Band:" + evt.getActionCommand());
                    bandChanged(receiver.getBands().get(evt.getActionCommand()));
                }
            });
            this.jMenuBand.add(item);
        }
    }//GEN-LAST:event_jMenuBandMenuSelected

    private void jMenuRadioMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuRadioMenuSelected

    }//GEN-LAST:event_jMenuRadioMenuSelected

    private void jMenuFilterMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuFilterMenuSelected
        this.jMenuFilter.removeAll();
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        Mode mode = Modes.getMode(bandstack.getMode());
        for (int i = 0; i < mode.length(); i++) {
            Filter filter = mode.getFilter(i);
            javax.swing.JMenuItem item = new javax.swing.JMenuItem(filter.getName());
            item.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    Band band = receiver.getBands().get();
                    BandStack bandstack = band.get();
                    Mode mode = Modes.getMode(bandstack.getMode());
                    int f = mode.getFilter(evt.getActionCommand());
                    bandstack.setFilter(f);
                    Filter filter = mode.getFilter(f);
                    setFilter(filter.getLow(), filter.getHigh());
                }
            });
            this.jMenuFilter.add(item);
        }
    }//GEN-LAST:event_jMenuFilterMenuSelected

    private void jCheckBoxMenuItemPanadapterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemPanadapterActionPerformed
        receiver.setDisplayPanadapter(this.jCheckBoxMenuItemPanadapter.isSelected());
        this.panadapterPanel.setVisible(receiver.displayPanadapter());
    }//GEN-LAST:event_jCheckBoxMenuItemPanadapterActionPerformed

    private void jMenuDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuDisplayActionPerformed
        Log.i(this,"Display actionPerformed");
        this.jCheckBoxMenuItemPanadapter.setSelected(receiver.displayPanadapter());
        this.jCheckBoxMenuItemWaterfall.setSelected(receiver.displayWaterfall());
    }//GEN-LAST:event_jMenuDisplayActionPerformed

    private void jCheckBoxMenuItemWaterfallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemWaterfallActionPerformed
        receiver.setDisplayWaterfall(this.jCheckBoxMenuItemWaterfall.isSelected());
        this.waterfallPanel.setVisible(receiver.displayWaterfall());
    }//GEN-LAST:event_jCheckBoxMenuItemWaterfallActionPerformed

    public void init() {
        wdsp = WDSP.getInstance();
        Log.i(this, "WDSP loaded");

        pixels = this.panadapterPanel.getWidth();
        samples = new float[pixels];

        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        Filter filter = Modes.getMode(bandstack.getMode()).getFilter(bandstack.getFilter());
        int low = filter.getLow();
        int high = filter.getHigh();
        if (bandstack.getMode() == Modes.CWL) {
            low = -radio.cwsidetonefrequency - low;
            high = -radio.cwsidetonefrequency + high;
        } else if (bandstack.getMode() == Modes.CWU) {
            low = radio.cwsidetonefrequency - low;
            high = radio.cwsidetonefrequency + high;
        }

        Log.i(this, "OpenChannel (" + channel + "): buffersize=" + radio.buffersize + " fftsize=" + radio.fftsize + " samperate=" + radio.samplerate + " dsprate=" + radio.dsprate);
        // setup receiver
        wdsp.OpenChannel(channel,
                radio.buffersize,
                radio.fftsize,
                (int) radio.samplerate,
                (int) radio.dsprate,
                48000,
                0/*rx*/, 1/*RUNNING*/,
                0.010, 0.025, 0.0, 0.010, 0);

        wdsp.SetRXAMode(channel, bandstack.getMode());
        wdsp.SetRXABandpassFreqs(channel, low, high);
        wdsp.SetRXABandpassRun(channel, 1);
        wdsp.SetRXAAGCTop(channel, band.getAGCGain());
        wdsp.SetRXAAMDSBMode(channel, 0);
        //wdsp.SetRXAShiftRun(channel, 0);
        wdsp.SetRXAEMNRRun(channel, radio.NB2 ? 1 : 0);
        wdsp.SetRXAEMNRgainMethod(channel, radio.NB2_GAIN);
        wdsp.SetRXAEMNRnpeMethod(channel, radio.NB2_NPE);
        wdsp.SetRXAEMNRaeRun(channel, radio.NB2_AE ? 1 : 0);
        wdsp.SetRXAEMNRPosition(channel, radio.NB2_POSITION);

        wdsp.SetRXAANRRun(channel, radio.NR ? 1 : 0);
        wdsp.SetRXAANFRun(channel, radio.ANF ? 1 : 0);

        wdsp.SetRXAPanelPan(channel, radio.getPan());
        // rx spectrum
        int[] success = {0};
        wdsp.XCreateAnalyzer(channel, success, 262144, 1, 1, "");
        if (success[0] != 0) {
            Log.i(this, "XCreateAnalyzer " + channel + " failed:" + success[0]);
        }

        initAnalyzer();

        bandChanged(band);

        //metis.setPTTListener(this);
        samples = new float[panadapterPanel.getWidth()];

        startTimer();

    }

    public void setPan(double pan) {
        Log.i(this, "receiver: " + channel + " setPan:" + pan);
        wdsp.SetRXAPanelPan(channel, pan);
    }

    private void initAnalyzer() {
        int flp[] = {0};
        double KEEP_TIME = 0.1;
        int spur_elimination_ffts = 1;
        int data_type = 1;
        int fft_size = 8192;
        int window_type = 4;
        double kaiser_pi = 14.0;
        int overlap = 2048;
        int clip = 0;
        int span_clip_l = 0;
        int span_clip_h = 0;
        //int pixels=1280;
        int stitches = 1;
        int avm = 0;
        double tau = 0.001 * 120.0;
        int MAX_AV_FRAMES = 60;
        int display_average = Math.max(2, (int) Math.min((double) MAX_AV_FRAMES, (double) radio.fps * tau));
        double avb = Math.exp(-1.0 / (radio.fps * tau));
        int calibration_data_set = 0;
        double span_min_freq = 0.0;
        double span_max_freq = 0.0;

        int max_w = fft_size + (int) Math.min(KEEP_TIME * (double) radio.fps, KEEP_TIME * (double) fft_size * (double) radio.fps);

        wdsp.SetAnalyzer(channel,
                spur_elimination_ffts, //number of LO frequencies = number of ffts used in elimination
                data_type, //0 for real input data (I only); 1 for complex input data (I & Q)
                flp, //vector with one elt for each LO frequency, 1 if high-side LO, 0 otherwise
                fft_size, //size of the fft, i.e., number of input samples
                radio.buffersize, //number of samples transferred for each OpenBuffer()/CloseBuffer()
                window_type, //integer specifying which window function to use
                kaiser_pi, //PiAlpha parameter for Kaiser window
                overlap, //number of samples each fft (other than the first) is to re-use from the previous
                clip, //number of fft output bins to be clipped from EACH side of each sub-span
                span_clip_l, //number of bins to clip from low end of entire span
                span_clip_h, //number of bins to clip from high end of entire span
                pixels, //number of pixel values to return.  may be either <= or > number of bins
                stitches, //number of sub-spans to concatenate to form a complete span
                avm, //averaging mode
                display_average, //number of spans to (moving) average for pixel result
                avb, //back multiplier for weighted averaging
                calibration_data_set, //identifier of which set of calibration data to use
                span_min_freq, //frequency at first pixel value8192
                span_max_freq, //frequency at last pixel value
                max_w //max samples to hold in input ring buffers
        );
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        //if (!stopped) {
        double hzperpixel = radio.samplerate / (double) this.getWidth();
        int step = Step.getStep(receiver.getStep());
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        long start = bandstack.getFrequency() - ((long) radio.samplerate / 2);
        long f = start + (long) (e.getX() * hzperpixel);

        // make it step resolution
        f = f / (long) step * (long) step;

        bandstack.setFrequency(f);
        //vfoPanel.repaint();
        frequencyPanel.repaint();
        //}
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mousePressed(MouseEvent e) {
        // TODO Auto-generated method stub
        //Log.i("Radio","mousePressed: "+e.getX());

        //if (!stopped) {
        mouseX = e.getX();
        //}
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        // align to step frequency
        //if (!stopped) {
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        int step = Step.getStep(receiver.getStep());
        bandstack.setFrequency(bandstack.getFrequency() / step * step);
        vfoPanel.repaint();
        frequencyPanel.repaint();
        //}
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        // TODO Auto-generated method stub

    }

    @Override
    public void mouseDragged(MouseEvent e) {
        //if (!stopped) {
        int increment = mouseX - e.getX();
        mouseX = e.getX();
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        //int step = Step.getStep(radio.step);
        int step = (int) radio.samplerate / this.getWidth();
        bandstack.setFrequency(bandstack.getFrequency() + (step * increment));
        vfoPanel.repaint();
        frequencyPanel.repaint();
        //}
    }

    @Override
    public void mouseWheelMoved(MouseWheelEvent evt) {
        if (evt.getSource() == this.panadapterPanel) {
            if (evt.getX() < 20) {
                if (evt.getY() < this.getHeight() / 2) {
                    receiver.setSpectrumHigh(receiver.getSpectrumHigh() + evt.getWheelRotation());
                } else {
                    receiver.setSpectrumLow(receiver.getSpectrumLow() + evt.getWheelRotation());
                }
                return;
            }
        }
        //if (!stopped) {
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        int step = Step.getStep(receiver.getStep());
        bandstack.setFrequency(bandstack.getFrequency() - (step * evt.getWheelRotation()));
        vfoPanel.repaint();
        frequencyPanel.repaint();
        if (!this.isSelected) {
            try {
                this.moveToFront();
                this.setSelected(true);
            } catch (Exception e) {
                Log.i(this, e.toString());
            }
        }
        //metis.setActiveReceiver(receiver);
        //}
    }

    private void startTimer() {
        Log.i(this, "startTimer RX" + receiver);
        running = true;
        final Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                if (running) {
                    update();
                } else {
                    timer.cancel();
                    Log.i(this, "Cancel timer");
                }
            }
        }, 0, 1000 / radio.fps);
    }

    private void update() {

        int width = 0;

        if (receiver.displayPanadapter()) {
            width = this.panadapterPanel.getWidth();
        } else if (receiver.displayWaterfall()) {
            width = this.waterfallPanel.getWidth();
        }

        if (width != 0) {

            //Log.i(this, "RX"+receiver+" update:"+System.currentTimeMillis());
            if (samples.length != width) {
                pixels = width;
                samples = new float[pixels];
                initAnalyzer();
            }

            int[] result = new int[1];
            wdsp.GetPixels(channel, samples, result);
            
            if (receiver.displayPanadapter()) {
                panadapterPanel.plotSpectrum(samples);
            }
            if (receiver.displayWaterfall()) {
                waterfallPanel.update(samples);
            }
        }
        this.meterPanel.setMeter((int) wdsp.GetRXAMeter(channel, WDSP.S_AV));
    }

    public void bandChanged(int b) {
        if (receiver.getBands().getCurrent() == b) {
            // step through bandstack
            Band band = receiver.getBands().get();
            band.next();
        } else {
            receiver.getBands().set(b);
        }
        bandChanged(receiver.getBands().get());
    }

    public void bandChanged(Band band) {

        // update mode and filter
        //this.modeJPanel.init();
        //this.filterJPanel.init();
        //if (this.stopped) {
        //    return;
        //}
        BandStack bandstack = band.get();
        Filter filter = Modes.getMode(bandstack.getMode()).getFilter(bandstack.getFilter());

        if (bandstack != null && !locked) {
            int low = filter.getLow();
            int high = filter.getHigh();
            if (bandstack.getMode() == Modes.CWL) {
                low = -radio.cwsidetonefrequency - low;
                high = -radio.cwsidetonefrequency + high;
            } else if (bandstack.getMode() == Modes.CWU) {
                low = radio.cwsidetonefrequency - low;
                high = radio.cwsidetonefrequency + high;
            }

            setFilter(low, high);
            setAGC(channel, band.getAGC());

            /*
             if (radio.subrx) {
             radio.subrx = false;
             wdsp.SetChannelState(Channel.SUBRX, 0, 0);
             wdsp.SetRXAShiftRun(Channel.SUBRX, 0);
             setAGC(Channel.SUBRX, band.getAGC());
             }
             */
            setMode(bandstack.getMode());
            setFrequency(bandstack.getFrequency());

            /*
             Button squelch = (Button) findViewById(R.id.buttonSquelch);
             squelch.getBackground().setColorFilter(band.getSquelch() ? Color.RED : Color.LTGRAY, Mode.MULTIPLY);
             */
            if (band.get().getMode() == Modes.FMN) {
                double v1 = -2.0 * (double) band.getSquelchValue() / 100.0;
                double v2 = Math.pow(10.0, v1);
                Log.i(this, "FM squelch set to " + band.getSquelchValue() + " " + v1 + " " + v2);
                wdsp.SetRXAFMSQThreshold(channel, v2);
                wdsp.SetRXAFMSQRun(channel, band.getSquelch() ? 1 : 0);
            } else {
                wdsp.SetRXAAMSQThreshold(channel, (double) -band.getSquelchValue());
                wdsp.SetRXAAMSQRun(channel, band.getSquelch() ? 1 : 0);
            }

            //this.jSliderAGCGain.setValue((int) band.getAGCGain());
            //this.jComboBoxAGC.setSelectedIndex(radio.bands.get().getAGC());
            //this.setTitle("Band " + band.getName() + "(" + band.getBandstackentry() + ")" + " " + Modes.getMode(bandstack.getMode()).getName() + " " + Frequency.toString(bandstack.getFrequency()));
        }

    }

    private void setFrequency(long f) {
        String fs = String.format("%d.%03d.%03d",
                f / 1000000,
                (f % 1000000) / 1000,
                (f % 1000));
        /*
         frequency.setText(fs);
         */
        BandEdge bandedge = receiver.getBands().get().getBandEdge();
        if (f >= bandedge.getLow() && f < bandedge.getHigh()) {
            outofband = false;
        } else {
            outofband = true;
        }

        frequencyPanel.repaint();
        vfoPanel.repaint();
    }

    private void setMode(int mode) {
        Log.i(this, "setMode:" + mode);
        Band band = receiver.getBands().get();
        BandStack bandstack = band.get();
        bandstack.setMode(mode);
        if (wdsp != null) {
            wdsp.SetRXAMode(channel, mode);
            //wdsp.SetRXAMode(Channel.SUBRX, mode);
            //wdsp.SetTXAMode(Channel.TX, mode);
        }
        Mode m = Modes.getMode(mode);
        Filter filter = m.getFilter(bandstack.getFilter());
        setFilter(filter.getLow(), filter.getHigh());
        //frequencyPanel.repaint();
        //vfoPanel.repaint();
    }

    private void setFilter(int low, int high) {
        if (wdsp != null) {
            wdsp.SetRXABandpassFreqs(channel, low, high);
            //wdsp.SetRXABandpassFreqs(Channel.SUBRX, low, high);
            //wdsp.SetTXABandpassFreqs(Channel.TX, low, high);
        }
        frequencyPanel.repaint();
        vfoPanel.repaint();
    }

    private void setAGC(int channel, int agc) {
        if (wdsp != null) {
            wdsp.SetRXAAGCMode(channel, agc);
            switch (agc) {
                case AGC.AGCLong:
                    wdsp.SetRXAAGCAttack(channel, 2);
                    wdsp.SetRXAAGCHang(channel, 2000);
                    wdsp.SetRXAAGCDecay(channel, 2000);
                    break;
                case AGC.AGCSlow:
                    wdsp.SetRXAAGCAttack(channel, 2);
                    wdsp.SetRXAAGCHang(channel, 1000);
                    wdsp.SetRXAAGCDecay(channel, 500);
                    break;
                case AGC.AGCMed:
                    wdsp.SetRXAAGCAttack(channel, 2);
                    wdsp.SetRXAAGCHang(channel, 0);
                    wdsp.SetRXAAGCDecay(channel, 250);
                    break;
                case AGC.AGCFast:
                    wdsp.SetRXAAGCAttack(channel, 2);
                    wdsp.SetRXAAGCHang(channel, 0);
                    wdsp.SetRXAAGCDecay(channel, 50);
                    break;
            }
        }
    }

    public void terminate() {
        running = false;
    }

    private int channel;
    private Receiver receiver;
    private Radio radio;
    private Discovered discovered;
    private int receiverbase;
    private String filename;

    private WDSP wdsp;
    private Metis metis;
    private int pixels;
    private float[] samples;
    private boolean running;

    private boolean outofband;
    private boolean locked = false;

    private int mouseX;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.g0orx.openhpsdr.FrequencyPanel frequencyPanel;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemPanadapter;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemWaterfall;
    private javax.swing.JMenu jMenuBand;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuDisplay;
    private javax.swing.JMenu jMenuFilter;
    private javax.swing.JMenu jMenuMode;
    private javax.swing.JMenu jMenuRadio;
    private javax.swing.JMenu jMenuStep;
    private org.g0orx.openhpsdr.MeterPanel meterPanel;
    private org.g0orx.openhpsdr.PanadapterPanel panadapterPanel;
    private org.g0orx.openhpsdr.VFOPanel vfoPanel;
    private org.g0orx.openhpsdr.WaterfallPanel waterfallPanel;
    // End of variables declaration//GEN-END:variables
}
