/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.g0orx.openhpsdr;

import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.InternalFrameEvent;
import javax.swing.event.InternalFrameListener;

import org.g0orx.openhpsdr.debug.Log;
import org.g0orx.openhpsdr.discovery.Discovered;
import org.g0orx.openhpsdr.wdsp.WDSP;

/**
 *
 * @author john
 */
public class RadioJInternalFrame extends javax.swing.JInternalFrame implements InternalFrameListener {

    /**
     * Creates new form RadioJInternalFrame
     */
    public RadioJInternalFrame(Radio radio, StartReceiverListener startListener) {
        this.radio = radio;
        initComponents();
        this.discovered = radio.getDiscovered();
        this.id = id;
        this.startListener = startListener;
        this.setTitle("Radio: " + discovered.getDeviceName() + ": " + discovered.getAddress() + " (" + discovered.getMac() + ")");
        this.jSpinnerReceivers.setValue(new Integer(radio.getReceivers()));
        switch ((int) radio.samplerate) {
            case 48000:
                this.jComboBoxSampleRate.setSelectedIndex(0);
                break;
            case 96000:
                this.jComboBoxSampleRate.setSelectedIndex(1);
                break;
            case 192000:
                this.jComboBoxSampleRate.setSelectedIndex(2);
                break;
            case 384000:
                this.jComboBoxSampleRate.setSelectedIndex(3);
                break;
        }
        this.jScrollBarAFGain.setValue((int) (this.radio.afgain * 100F));
        this.jScrollBarAFPan.setValue((int) (this.radio.getPan() * 100.0));

        this.addInternalFrameListener(this);
    }

    public void internalFrameOpened(InternalFrameEvent e) {

    }

    public void internalFrameClosing(InternalFrameEvent e) {
        stop();
    }

    public void internalFrameClosed(InternalFrameEvent e) {

    }

    public void internalFrameIconified(InternalFrameEvent e) {

    }

    public void internalFrameDeiconified(InternalFrameEvent e) {

    }

    public void internalFrameActivated(InternalFrameEvent e) {
    }

    public void internalFrameDeactivated(InternalFrameEvent e) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonStart = new javax.swing.JButton();
        jSpinnerReceivers = new javax.swing.JSpinner(new SpinnerNumberModel(1, 1, radio.MAX_RECEIVERS, 1));
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxSampleRate = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollBarAFGain = new javax.swing.JScrollBar();
        jLabel4 = new javax.swing.JLabel();
        jScrollBarAFPan = new javax.swing.JScrollBar();

        setClosable(true);

        jButtonStart.setText("Start");
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jSpinnerReceivers.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerReceiversStateChanged(evt);
            }
        });

        jLabel1.setText("Receivers:");

        jLabel2.setText("Sample Rate:");

        jComboBoxSampleRate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "48000", "96000", "192000", "384000" }));
        jComboBoxSampleRate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSampleRateActionPerformed(evt);
            }
        });

        jLabel3.setText("AF Gain:");

        jScrollBarAFGain.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBarAFGain.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jScrollBarAFGainAdjustmentValueChanged(evt);
            }
        });

        jLabel4.setText("AF Pan:");

        jScrollBarAFPan.setOrientation(javax.swing.JScrollBar.HORIZONTAL);
        jScrollBarAFPan.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                jScrollBarAFPanAdjustmentValueChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(3, 3, 3)
                        .addComponent(jSpinnerReceivers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(3, 3, 3)
                        .addComponent(jComboBoxSampleRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollBarAFGain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollBarAFPan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinnerReceivers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxSampleRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollBarAFGain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollBarAFPan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        if ("Start".equals(evt.getActionCommand())) {
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
            Log.i(this, "Start");
            start();
            this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        } else if ("Stop".equals(evt.getActionCommand())) {
            Log.i(this, "Stop");
            this.jButtonStart.setText("Start");
            stop();
            this.jSpinnerReceivers.setEnabled(true);
            this.jComboBoxSampleRate.setEnabled(true);
        }
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void start() {
        this.jButtonStart.setText("Stop");
        int r = ((Integer) this.jSpinnerReceivers.getValue()).intValue();
        radio.setReceivers(r);
        radio.setMetis(new Metis(radio, false));
        receivers = new ReceiverJInternalFrame[r];
        for (int i = 0; i < r; i++) {
            receivers[i] = new ReceiverJInternalFrame(i, radio);
            receivers[i].init();
            startListener.startReceiver(receivers[i]);
            Log.i(this, "RX" + i + ": width:" + receivers[i].getWidth());
        }

        //radio.getMetis().setActiveReceiver(0);
        radio.getMetis().start();

        this.jSpinnerReceivers.setEnabled(false);
        this.jComboBoxSampleRate.setEnabled(false);
    }

    private void stop() {
        radio.getMetis().terminate();
        for (int i = 0; i < receivers.length; i++) {
            Receiver rx = radio.getReceiver(i);
            if (receivers[i] != null) {
                receivers[i].terminate();
                rx.setX(receivers[i].getX());
                rx.setY(receivers[i].getY());
                rx.setWidth(receivers[i].getWidth());
                rx.setHeight(receivers[i].getHeight());
                receivers[i].dispose();
                receivers[i] = null;
            }
        }
        Bounds b = new Bounds();
        b.setX(this.getX());
        b.setY(this.getY());
        b.setWidth(this.getWidth());
        b.setHeight(this.getHeight());
        radio.setBounds(b);
        radio.saveState();
    }

    private void jSpinnerReceiversStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerReceiversStateChanged

    }//GEN-LAST:event_jSpinnerReceiversStateChanged

    private void jComboBoxSampleRateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxSampleRateActionPerformed
        Log.i(this, "SampleRate:" + (String) jComboBoxSampleRate.getSelectedItem());
        int rate = Integer.parseInt((String) jComboBoxSampleRate.getSelectedItem());
        radio.samplerate = (double) rate;
    }//GEN-LAST:event_jComboBoxSampleRateActionPerformed

    private void jScrollBarAFGainAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jScrollBarAFGainAdjustmentValueChanged
        this.radio.afgain = (float) this.jScrollBarAFGain.getValue() / 100.0F;
    }//GEN-LAST:event_jScrollBarAFGainAdjustmentValueChanged

    private void jScrollBarAFPanAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_jScrollBarAFPanAdjustmentValueChanged
        this.radio.setPan(((double) this.jScrollBarAFPan.getValue() / 100.0));
        if (receivers != null) {
            for (int i = 0; i < receivers.length; i++) {
                receivers[i].setPan(this.radio.getPan());
            }
        }
    }//GEN-LAST:event_jScrollBarAFPanAdjustmentValueChanged

    private Radio radio;
    private Discovered discovered;
    private int id;
    private int receiverbase;
    private StartReceiverListener startListener;
    private Metis metis;
    private WDSP wdsp;

    ReceiverJInternalFrame receivers[];


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonStart;
    private javax.swing.JComboBox jComboBoxSampleRate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollBar jScrollBarAFGain;
    private javax.swing.JScrollBar jScrollBarAFPan;
    private javax.swing.JSpinner jSpinnerReceivers;
    // End of variables declaration//GEN-END:variables
}
