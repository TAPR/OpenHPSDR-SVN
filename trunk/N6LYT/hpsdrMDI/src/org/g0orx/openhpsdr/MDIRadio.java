/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.g0orx.openhpsdr;

import com.sun.glass.ui.Cursor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import org.g0orx.openhpsdr.debug.Log;
import org.g0orx.openhpsdr.discovery.Discovered;
import org.g0orx.openhpsdr.wdsp.WDSP;

/**
 *
 * @author john
 */
public class MDIRadio extends javax.swing.JFrame implements SelectRadioListener, StartReceiverListener {

    /**
     * Creates new form MDIRadio
     */
    public MDIRadio() {
        initComponents();
        String filename = "MDIRadio.conf";
        try {
            FileInputStream fis = new FileInputStream(filename);
            ObjectInputStream ois = new ObjectInputStream(fis);
            bounds = (Bounds) ois.readObject();
            ois.close();
            fis.close();
        } catch (Exception e) {
            Log.i(this, "Read Bounds: " + e.toString());
            bounds = null;
        }
        if (bounds != null) {
            this.setBounds(bounds.getX(), bounds.getY(), bounds.getWidth(), bounds.getHeight());
        }
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                bounds = new Bounds();
                bounds.setX(evt.getWindow().getX());
                bounds.setY(evt.getWindow().getY());
                bounds.setWidth(evt.getWindow().getWidth());
                bounds.setHeight(evt.getWindow().getHeight());
                String filename = "MDIRadio.conf";
                try {
                    FileOutputStream fos = new FileOutputStream(filename);
                    ObjectOutputStream oos = new ObjectOutputStream(fos);
                    oos.writeObject(bounds);
                    oos.close();
                    fos.close();
                } catch (Exception e) {
                    Log.i(this, "Write Bounds: " + e.toString());
                }
            }
        });
    }

    public void selectRadio(Radio r) {
        RadioJInternalFrame radio = new RadioJInternalFrame(r, this);
        Bounds b = r.getBounds();
        if (b != null && b.getX() != 0 && b.getY() != 0 && b.getWidth() != 0 && b.getHeight() != 0) {
            radio.setBounds(b.getX(), b.getY(), b.getWidth(), b.getHeight());
        } else {
            radio.setLocation(x, y);
            x = x + xincrement;
            y = y + yincrement;
        }
        radio.setVisible(true);
        desktopPane.add(radio);
        radio.toFront();
    }

    public void startReceiver(ReceiverJInternalFrame receiver) {
        Receiver r = receiver.getReceiver();
        if (r.getX() != 0 && r.getY() != 0 && r.getWidth() != 0 && r.getHeight() != 0) {
            receiver.setBounds(r.getX(), r.getY(), r.getWidth(), r.getHeight());
        } else {
            receiver.setLocation(x, y);
            x = x + xincrement;
            y = y + yincrement;
        }
        receiver.setVisible(true);
        desktopPane.add(receiver);
        receiver.toFront();
        receiverindex++;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenuRadio = new javax.swing.JMenu();
        jMenuItemDiscover = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenuRadio.setMnemonic('r');
        jMenuRadio.setText("Radio");

        jMenuItemDiscover.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        jMenuItemDiscover.setText("Discover");
        jMenuItemDiscover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDiscoverActionPerformed(evt);
            }
        });
        jMenuRadio.add(jMenuItemDiscover);

        menuBar.add(jMenuRadio);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 779, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed

        java.io.File cwd=new java.io.File(System.getProperty("user.dir"));
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(cwd);
        javax.swing.filechooser.FileNameExtensionFilter filter = new javax.swing.filechooser.FileNameExtensionFilter(
                "Radio Configurations", "rad");
        fc.setFileFilter(filter);
        int returnVal = fc.showOpenDialog(this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File file = fc.getSelectedFile();
            //This is where a real application would open the file.
            Log.i(this, "Opening: " + file.getName());

            Radio radio = null;
            try {
                FileInputStream fis = new FileInputStream(file);
                ObjectInputStream ois = new ObjectInputStream(fis);
                Object obj=ois.readObject();
                ois.close();
                fis.close();
                if(obj instanceof Radio) {
                    radio = (Radio) obj;
                }
            } catch (Exception e) {
                Log.i(this, "Read Radio: " + e.toString());
            }
            if (radio != null) {
                selectRadio(radio);
            }
        } else {
            Log.i(this, "Open command cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void jMenuItemDiscoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDiscoverActionPerformed
        DiscoveryJInternalFrame discovery = new DiscoveryJInternalFrame(this);
        discovery.setLocation(x, y);
        x = x + xincrement;
        y = y + yincrement;
        discovery.setVisible(true);
        discovery.toFront();
        desktopPane.add(discovery);

    }//GEN-LAST:event_jMenuItemDiscoverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MDIRadio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MDIRadio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MDIRadio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MDIRadio.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MDIRadio().setVisible(true);
            }
        });
    }

    private Bounds bounds;

    private int receiverindex = 0;

    private int x = 0;
    private int xincrement = 10;
    private int y = 0;
    private int yincrement = 100;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jMenuItemDiscover;
    private javax.swing.JMenu jMenuRadio;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    // End of variables declaration//GEN-END:variables

}
