/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.g0orx.openhpsdr;

import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import org.g0orx.openhpsdr.debug.Log;
import org.g0orx.openhpsdr.discovery.Discover;
import org.g0orx.openhpsdr.discovery.Discovered;
import org.g0orx.openhpsdr.discovery.Discovery;

/**
 *
 * @author john
 */
public class DiscoveryJInternalFrame extends javax.swing.JInternalFrame implements Discover {

    /**
     * Creates new form DiscoveryJInternalFrame
     */
    public DiscoveryJInternalFrame(SelectRadioListener listener) {
        initComponents();
        this.listener = listener;
        this.setTitle("Discovery - please wait");
        discover();
    }

    public void endDiscovery() {
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.DEFAULT_CURSOR));
        if (discovered.size() == 0) {
            this.setTitle("Discovery - no devices found");
        } else {
            this.setTitle("Discovery");
            String[] strings = new String[discovered.size()];
            for (int i = 0; i < discovered.size(); i++) {
                Radio radio=discovered.get(i);
                radio.setPan(0.5);
                strings[i] = radio.getDiscovered().toString();
            }
            this.jListDiscovered.setModel(new javax.swing.AbstractListModel() {

                public int getSize() {
                    return strings.length;
                }

                public Object getElementAt(int i) {
                    return strings[i];
                }
            });
        }
        this.jButtonDiscover.setEnabled(true);
    }

    public void discovered(Discovered d) {
        Radio radio=null;
        String filename = d.getMac() + ".rad";
        filename = filename.replace(":", "-");
        try {
            FileInputStream fis = new FileInputStream(filename);
            ObjectInputStream ois = new ObjectInputStream(fis);
            radio=(Radio)ois.readObject();
            ois.close();
            fis.close();
        } catch (Exception e) {
            Log.i(this, "Read Radio: " + e.toString());
            radio = new Radio(d,discovered.size());
        }
        discovered.add(radio);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jListDiscovered = new javax.swing.JList();
        jButtonOpen = new javax.swing.JButton();
        jButtonDiscover = new javax.swing.JButton();

        setClosable(true);

        jListDiscovered.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDiscovered.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListDiscoveredValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListDiscovered);

        jButtonOpen.setText("Open");
        jButtonOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOpenActionPerformed(evt);
            }
        });

        jButtonDiscover.setText("Discover");
        jButtonDiscover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDiscoverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(jButtonDiscover)
                        .addGap(81, 81, 81)
                        .addComponent(jButtonOpen)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonOpen)
                    .addComponent(jButtonDiscover))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOpenActionPerformed
        if (listener != null) {
            listener.selectRadio(discovered.get(selected));
        }
    }//GEN-LAST:event_jButtonOpenActionPerformed

    private void jButtonDiscoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDiscoverActionPerformed
        discover();
    }//GEN-LAST:event_jButtonDiscoverActionPerformed

    private void jListDiscoveredValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListDiscoveredValueChanged
        if (!evt.getValueIsAdjusting()) {
            if (this.jListDiscovered.getSelectedIndex() != -1) {
                selected=this.jListDiscovered.getSelectedIndex();
                Radio radio = discovered.get(selected);
                Discovered d=radio.getDiscovered();
                switch(d.getDevice()) {
                    case Discovered.DEVICE_METIS:
                        radio.MAX_RECEIVERS=3;
                        break;
                    case Discovered.DEVICE_HERMES_LITE:
                        radio.MAX_RECEIVERS=2;
                        break;
                    default:
                        radio.MAX_RECEIVERS=4;
                        break;
                }
                if (d.getState() == Discovered.STATE_AVAILABLE) {
                    this.jButtonOpen.setEnabled(true);
                    this.setTitle("Discovery");
                } else {
                    this.setTitle("Discovery - device is in use");
                    this.jButtonOpen.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_jListDiscoveredValueChanged

    private void discover() {
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        discovered.clear();
        this.jListDiscovered.removeAll();
        this.jButtonDiscover.setEnabled(false);
        this.jButtonOpen.setEnabled(false);
        Discovery discovery = new Discovery(this);
        discovery.start();
    }

    private ArrayList<Radio> discovered = new ArrayList<Radio>();
    private int selected=-1;

    private SelectRadioListener listener;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDiscover;
    private javax.swing.JButton jButtonOpen;
    private javax.swing.JList jListDiscovered;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
