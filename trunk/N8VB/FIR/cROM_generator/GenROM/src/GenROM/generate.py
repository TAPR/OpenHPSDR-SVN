import math
import string

def generate(word_width=24, size=256, outfile='c:\cROM.v', coeffile='c:\cROM.lst'):
    ''' open the file for writing'''
    f = open(outfile, 'w')
    ''' write header info '''
    header = '/*\ncROM.v \nCopyright 2007 Philip A Covington, N8VB \n'
    header = header + '\nThis file was generated by generate.py\n*/\n\n'
    f.write(header)
    ''' module header '''
    f.write('module cROM(clk, addr, data, reset);\n\n')
    ''' inputs '''
    f.write('\tinput clk;\n')
    f.write('\tinput [' + repr(int(math.log(size,2))-1) + ':0] addr;\n')
    f.write('\tinput reset;\n')
    ''' outputs '''
    f.write('\toutput signed [' + repr(word_width - 1) + ':0] data;\n')
    ''' wires and regs '''
    f.write('\n\treg [' + repr(word_width - 1) + ':0] data;\n')
    ''' body '''
    f.write('\n\talways @(posedge clk) begin\n')
    f.write('\t\tif (reset)\n')
    f.write('\t\t\tdata <= 0;\n')
    f.write('\t\telse begin\n')
    f.write('\t\t\tcase(addr)\n')
    cf = open(coeffile, 'r')
    for i in range(size):
        f.write('\t\t\t\t' + repr(8) + '\'d' + repr(i) + ':')
        f.write(' data <= ' + repr(word_width) + '\'sh' + cf.readline()[:-1] + ';\n')
    cf.close()
    f.write('\t\t\t\tdefault: data <= ' + repr(word_width) + '\'sh0;\n')
    f.write('\t\t\tendcase\n')
    f.write('\t\tend\n')
    f.write('\tend\n')
    ''' end module '''
    f.write('\n')
    f.write('endmodule\n')
    f.close()

def preprocess_coe(infile='c:\cROM.coe', outfile='c:\cROM.lst', size=256):
    ''' fix up the coe file by stripping out the junk '''
    fin = open(infile, 'r')
    fout = open(outfile, 'w')
    ''' get rid of header stuff '''
    for i in range(8):
        fin.readline()
    ''' this is the first coefficient line '''
    fout.write(string.upper((fin.readline()[11:-2] + '\n')))
    ''' these are the remaining coefficients '''
    for i in range(size - 1):
        fout.write(string.upper((fin.readline()[:-2] + '\n')))
    fin.close()
    fout.close()
            
if __name__ == '__main__':
    preprocess_coe()
    generate()