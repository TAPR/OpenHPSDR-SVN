// -------------------------------------------------------------
//
// Module: HB
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-19 16:34:57
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: HB
// TargetDirectory: c:\data
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 52
// Filter Length      : 103
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s16,15 -> [-1 1)
// Input              : s16,15 -> [-1 1)
// Filter Internals   : Specify Precision
//   Output           : s20,30 -> [-4.882813e-004 4.882813e-004)
//   Product          : s30,30 -> [-5.000000e-001 5.000000e-001)
//   Accumulator      : s32,30 -> [-2 2)
//   Round Mode       : convergent
//   Overflow Mode    : wrap
//
// Implementation Cost
// Number of Multipliers : 53
// Number of Adders      : 52
// Number of States      : 102
// MultPerInputSample    : 26.5
// AddPerInputSample     : 26
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HB 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [19:0] filter_out; //sfix20_En30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: HB
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111111111111111; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b0000000000000001; //sfix16_En15
  parameter signed [15:0] coeffphase1_3 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeffphase1_4 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeffphase1_5 = 16'b1111111111110111; //sfix16_En15
  parameter signed [15:0] coeffphase1_6 = 16'b0000000000001110; //sfix16_En15
  parameter signed [15:0] coeffphase1_7 = 16'b1111111111101011; //sfix16_En15
  parameter signed [15:0] coeffphase1_8 = 16'b0000000000011110; //sfix16_En15
  parameter signed [15:0] coeffphase1_9 = 16'b1111111111010111; //sfix16_En15
  parameter signed [15:0] coeffphase1_10 = 16'b0000000000111000; //sfix16_En15
  parameter signed [15:0] coeffphase1_11 = 16'b1111111110110101; //sfix16_En15
  parameter signed [15:0] coeffphase1_12 = 16'b0000000001100011; //sfix16_En15
  parameter signed [15:0] coeffphase1_13 = 16'b1111111110000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_14 = 16'b0000000010100011; //sfix16_En15
  parameter signed [15:0] coeffphase1_15 = 16'b1111111100110001; //sfix16_En15
  parameter signed [15:0] coeffphase1_16 = 16'b0000000100000100; //sfix16_En15
  parameter signed [15:0] coeffphase1_17 = 16'b1111111010111100; //sfix16_En15
  parameter signed [15:0] coeffphase1_18 = 16'b0000000110010100; //sfix16_En15
  parameter signed [15:0] coeffphase1_19 = 16'b1111111000001001; //sfix16_En15
  parameter signed [15:0] coeffphase1_20 = 16'b0000001001110110; //sfix16_En15
  parameter signed [15:0] coeffphase1_21 = 16'b1111110011100010; //sfix16_En15
  parameter signed [15:0] coeffphase1_22 = 16'b0000010000001001; //sfix16_En15
  parameter signed [15:0] coeffphase1_23 = 16'b1111101010010010; //sfix16_En15
  parameter signed [15:0] coeffphase1_24 = 16'b0000011111011110; //sfix16_En15
  parameter signed [15:0] coeffphase1_25 = 16'b1111001010010111; //sfix16_En15
  parameter signed [15:0] coeffphase1_26 = 16'b0010100010110000; //sfix16_En15
  parameter signed [15:0] coeffphase1_27 = 16'b0010100010110000; //sfix16_En15
  parameter signed [15:0] coeffphase1_28 = 16'b1111001010010111; //sfix16_En15
  parameter signed [15:0] coeffphase1_29 = 16'b0000011111011110; //sfix16_En15
  parameter signed [15:0] coeffphase1_30 = 16'b1111101010010010; //sfix16_En15
  parameter signed [15:0] coeffphase1_31 = 16'b0000010000001001; //sfix16_En15
  parameter signed [15:0] coeffphase1_32 = 16'b1111110011100010; //sfix16_En15
  parameter signed [15:0] coeffphase1_33 = 16'b0000001001110110; //sfix16_En15
  parameter signed [15:0] coeffphase1_34 = 16'b1111111000001001; //sfix16_En15
  parameter signed [15:0] coeffphase1_35 = 16'b0000000110010100; //sfix16_En15
  parameter signed [15:0] coeffphase1_36 = 16'b1111111010111100; //sfix16_En15
  parameter signed [15:0] coeffphase1_37 = 16'b0000000100000100; //sfix16_En15
  parameter signed [15:0] coeffphase1_38 = 16'b1111111100110001; //sfix16_En15
  parameter signed [15:0] coeffphase1_39 = 16'b0000000010100011; //sfix16_En15
  parameter signed [15:0] coeffphase1_40 = 16'b1111111110000000; //sfix16_En15
  parameter signed [15:0] coeffphase1_41 = 16'b0000000001100011; //sfix16_En15
  parameter signed [15:0] coeffphase1_42 = 16'b1111111110110101; //sfix16_En15
  parameter signed [15:0] coeffphase1_43 = 16'b0000000000111000; //sfix16_En15
  parameter signed [15:0] coeffphase1_44 = 16'b1111111111010111; //sfix16_En15
  parameter signed [15:0] coeffphase1_45 = 16'b0000000000011110; //sfix16_En15
  parameter signed [15:0] coeffphase1_46 = 16'b1111111111101011; //sfix16_En15
  parameter signed [15:0] coeffphase1_47 = 16'b0000000000001110; //sfix16_En15
  parameter signed [15:0] coeffphase1_48 = 16'b1111111111110111; //sfix16_En15
  parameter signed [15:0] coeffphase1_49 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeffphase1_50 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeffphase1_51 = 16'b0000000000000001; //sfix16_En15
  parameter signed [15:0] coeffphase1_52 = 16'b1111111111111111; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_3 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_4 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_5 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_6 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_7 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_8 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_9 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_10 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_11 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_12 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_13 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_14 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_15 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_16 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_17 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_18 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_19 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_20 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_21 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_22 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_23 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_24 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_25 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_26 = 16'b0100000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_27 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_28 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_29 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_30 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_31 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_32 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_33 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_34 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_35 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_36 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_37 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_38 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_39 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_40 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_41 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_42 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_43 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_44 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_45 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_46 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_47 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_48 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_49 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_50 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_51 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_52 = 16'b0000000000000000; //sfix16_En15
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [15:0] input_register; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase0 [0:50] ; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase1 [0:25] ; // sfix16_En15
  wire signed [29:0] product_phase0_1; // sfix30_En30
  wire signed [16:0] mulpwr2_temp; // sfix17_En15
  wire signed [29:0] product_phase0_2; // sfix30_En30
  wire signed [29:0] product_phase0_3; // sfix30_En30
  wire signed [18:0] mulcsd_temp; // sfix19_En30
  wire signed [29:0] product_phase0_4; // sfix30_En30
  wire signed [18:0] mulcsd_temp_1; // sfix19_En30
  wire signed [29:0] product_phase0_5; // sfix30_En30
  wire signed [19:0] mulcsd_temp_2; // sfix20_En30
  wire signed [29:0] product_phase0_6; // sfix30_En30
  wire signed [20:0] mulcsd_temp_3; // sfix21_En30
  wire signed [29:0] product_phase0_7; // sfix30_En30
  wire signed [20:0] mulcsd_temp_4; // sfix21_En30
  wire signed [29:0] product_phase0_8; // sfix30_En30
  wire signed [21:0] mulcsd_temp_5; // sfix22_En30
  wire signed [29:0] product_phase0_9; // sfix30_En30
  wire signed [21:0] mulcsd_temp_6; // sfix22_En30
  wire signed [29:0] product_phase0_10; // sfix30_En30
  wire signed [22:0] mulcsd_temp_7; // sfix23_En30
  wire signed [29:0] product_phase0_11; // sfix30_En30
  wire signed [22:0] mulcsd_temp_8; // sfix23_En30
  wire signed [29:0] product_phase0_12; // sfix30_En30
  wire signed [23:0] mulcsd_temp_9; // sfix24_En30
  wire signed [29:0] product_phase0_13; // sfix30_En30
  wire signed [16:0] mulpwr2_temp_1; // sfix17_En15
  wire signed [29:0] product_phase0_14; // sfix30_En30
  wire signed [23:0] mulcsd_temp_10; // sfix24_En30
  wire signed [29:0] product_phase0_15; // sfix30_En30
  wire signed [24:0] mulcsd_temp_11; // sfix25_En30
  wire signed [29:0] product_phase0_16; // sfix30_En30
  wire signed [24:0] mulcsd_temp_12; // sfix25_En30
  wire signed [29:0] product_phase0_17; // sfix30_En30
  wire signed [24:0] mulcsd_temp_13; // sfix25_En30
  wire signed [29:0] product_phase0_18; // sfix30_En30
  wire signed [25:0] mulcsd_temp_14; // sfix26_En30
  wire signed [29:0] product_phase0_19; // sfix30_En30
  wire signed [25:0] mulcsd_temp_15; // sfix26_En30
  wire signed [29:0] product_phase0_20; // sfix30_En30
  wire signed [25:0] mulcsd_temp_16; // sfix26_En30
  wire signed [29:0] product_phase0_21; // sfix30_En30
  wire signed [26:0] mulcsd_temp_17; // sfix27_En30
  wire signed [29:0] product_phase0_22; // sfix30_En30
  wire signed [26:0] mulcsd_temp_18; // sfix27_En30
  wire signed [29:0] product_phase0_23; // sfix30_En30
  wire signed [26:0] mulcsd_temp_19; // sfix27_En30
  wire signed [29:0] product_phase0_24; // sfix30_En30
  wire signed [27:0] mulcsd_temp_20; // sfix28_En30
  wire signed [29:0] product_phase0_25; // sfix30_En30
  wire signed [28:0] mulcsd_temp_21; // sfix29_En30
  wire signed [29:0] product_phase0_26; // sfix30_En30
  wire signed [29:0] mulcsd_temp_22; // sfix30_En30
  wire signed [29:0] product_phase0_27; // sfix30_En30
  wire signed [29:0] mulcsd_temp_23; // sfix30_En30
  wire signed [29:0] product_phase0_28; // sfix30_En30
  wire signed [28:0] mulcsd_temp_24; // sfix29_En30
  wire signed [29:0] product_phase0_29; // sfix30_En30
  wire signed [27:0] mulcsd_temp_25; // sfix28_En30
  wire signed [29:0] product_phase0_30; // sfix30_En30
  wire signed [26:0] mulcsd_temp_26; // sfix27_En30
  wire signed [29:0] product_phase0_31; // sfix30_En30
  wire signed [26:0] mulcsd_temp_27; // sfix27_En30
  wire signed [29:0] product_phase0_32; // sfix30_En30
  wire signed [26:0] mulcsd_temp_28; // sfix27_En30
  wire signed [29:0] product_phase0_33; // sfix30_En30
  wire signed [25:0] mulcsd_temp_29; // sfix26_En30
  wire signed [29:0] product_phase0_34; // sfix30_En30
  wire signed [25:0] mulcsd_temp_30; // sfix26_En30
  wire signed [29:0] product_phase0_35; // sfix30_En30
  wire signed [25:0] mulcsd_temp_31; // sfix26_En30
  wire signed [29:0] product_phase0_36; // sfix30_En30
  wire signed [24:0] mulcsd_temp_32; // sfix25_En30
  wire signed [29:0] product_phase0_37; // sfix30_En30
  wire signed [24:0] mulcsd_temp_33; // sfix25_En30
  wire signed [29:0] product_phase0_38; // sfix30_En30
  wire signed [24:0] mulcsd_temp_34; // sfix25_En30
  wire signed [29:0] product_phase0_39; // sfix30_En30
  wire signed [23:0] mulcsd_temp_35; // sfix24_En30
  wire signed [29:0] product_phase0_40; // sfix30_En30
  wire signed [16:0] mulpwr2_temp_2; // sfix17_En15
  wire signed [29:0] product_phase0_41; // sfix30_En30
  wire signed [23:0] mulcsd_temp_36; // sfix24_En30
  wire signed [29:0] product_phase0_42; // sfix30_En30
  wire signed [22:0] mulcsd_temp_37; // sfix23_En30
  wire signed [29:0] product_phase0_43; // sfix30_En30
  wire signed [22:0] mulcsd_temp_38; // sfix23_En30
  wire signed [29:0] product_phase0_44; // sfix30_En30
  wire signed [21:0] mulcsd_temp_39; // sfix22_En30
  wire signed [29:0] product_phase0_45; // sfix30_En30
  wire signed [21:0] mulcsd_temp_40; // sfix22_En30
  wire signed [29:0] product_phase0_46; // sfix30_En30
  wire signed [20:0] mulcsd_temp_41; // sfix21_En30
  wire signed [29:0] product_phase0_47; // sfix30_En30
  wire signed [20:0] mulcsd_temp_42; // sfix21_En30
  wire signed [29:0] product_phase0_48; // sfix30_En30
  wire signed [19:0] mulcsd_temp_43; // sfix20_En30
  wire signed [29:0] product_phase0_49; // sfix30_En30
  wire signed [18:0] mulcsd_temp_44; // sfix19_En30
  wire signed [29:0] product_phase0_50; // sfix30_En30
  wire signed [18:0] mulcsd_temp_45; // sfix19_En30
  wire signed [29:0] product_phase0_51; // sfix30_En30
  wire signed [29:0] product_phase0_52; // sfix30_En30
  wire signed [16:0] mulpwr2_temp_3; // sfix17_En15
  wire signed [29:0] product_phase1_26; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_1; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_2; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_3; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_4; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_5; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_6; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_7; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_8; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_9; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_10; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_11; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_12; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_13; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_14; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_15; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_16; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_17; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_18; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_19; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_20; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_21; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_22; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_23; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_24; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_25; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_26; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_27; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_28; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_29; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_30; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_31; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_32; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_33; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_34; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_35; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_36; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_37; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_38; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_39; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_40; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_41; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_42; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_43; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_44; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_45; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_46; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_47; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_48; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_49; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_50; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_51; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_52; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_26; // sfix30_En30
  wire signed [31:0] quantized_sum; // sfix32_En30
  wire signed [31:0] sumvector1 [0:26] ; // sfix32_En30
  wire signed [31:0] add_signext; // sfix32_En30
  wire signed [31:0] add_signext_1; // sfix32_En30
  wire signed [32:0] add_temp; // sfix33_En30
  wire signed [29:0] add_signext_2; // sfix30_En30
  wire signed [29:0] add_signext_3; // sfix30_En30
  wire signed [30:0] add_temp_1; // sfix31_En30
  wire signed [29:0] add_signext_4; // sfix30_En30
  wire signed [29:0] add_signext_5; // sfix30_En30
  wire signed [30:0] add_temp_2; // sfix31_En30
  wire signed [29:0] add_signext_6; // sfix30_En30
  wire signed [29:0] add_signext_7; // sfix30_En30
  wire signed [30:0] add_temp_3; // sfix31_En30
  wire signed [29:0] add_signext_8; // sfix30_En30
  wire signed [29:0] add_signext_9; // sfix30_En30
  wire signed [30:0] add_temp_4; // sfix31_En30
  wire signed [29:0] add_signext_10; // sfix30_En30
  wire signed [29:0] add_signext_11; // sfix30_En30
  wire signed [30:0] add_temp_5; // sfix31_En30
  wire signed [29:0] add_signext_12; // sfix30_En30
  wire signed [29:0] add_signext_13; // sfix30_En30
  wire signed [30:0] add_temp_6; // sfix31_En30
  wire signed [29:0] add_signext_14; // sfix30_En30
  wire signed [29:0] add_signext_15; // sfix30_En30
  wire signed [30:0] add_temp_7; // sfix31_En30
  wire signed [29:0] add_signext_16; // sfix30_En30
  wire signed [29:0] add_signext_17; // sfix30_En30
  wire signed [30:0] add_temp_8; // sfix31_En30
  wire signed [29:0] add_signext_18; // sfix30_En30
  wire signed [29:0] add_signext_19; // sfix30_En30
  wire signed [30:0] add_temp_9; // sfix31_En30
  wire signed [29:0] add_signext_20; // sfix30_En30
  wire signed [29:0] add_signext_21; // sfix30_En30
  wire signed [30:0] add_temp_10; // sfix31_En30
  wire signed [29:0] add_signext_22; // sfix30_En30
  wire signed [29:0] add_signext_23; // sfix30_En30
  wire signed [30:0] add_temp_11; // sfix31_En30
  wire signed [29:0] add_signext_24; // sfix30_En30
  wire signed [29:0] add_signext_25; // sfix30_En30
  wire signed [30:0] add_temp_12; // sfix31_En30
  wire signed [29:0] add_signext_26; // sfix30_En30
  wire signed [29:0] add_signext_27; // sfix30_En30
  wire signed [30:0] add_temp_13; // sfix31_En30
  wire signed [29:0] add_signext_28; // sfix30_En30
  wire signed [29:0] add_signext_29; // sfix30_En30
  wire signed [30:0] add_temp_14; // sfix31_En30
  wire signed [29:0] add_signext_30; // sfix30_En30
  wire signed [29:0] add_signext_31; // sfix30_En30
  wire signed [30:0] add_temp_15; // sfix31_En30
  wire signed [29:0] add_signext_32; // sfix30_En30
  wire signed [29:0] add_signext_33; // sfix30_En30
  wire signed [30:0] add_temp_16; // sfix31_En30
  wire signed [29:0] add_signext_34; // sfix30_En30
  wire signed [29:0] add_signext_35; // sfix30_En30
  wire signed [30:0] add_temp_17; // sfix31_En30
  wire signed [29:0] add_signext_36; // sfix30_En30
  wire signed [29:0] add_signext_37; // sfix30_En30
  wire signed [30:0] add_temp_18; // sfix31_En30
  wire signed [29:0] add_signext_38; // sfix30_En30
  wire signed [29:0] add_signext_39; // sfix30_En30
  wire signed [30:0] add_temp_19; // sfix31_En30
  wire signed [29:0] add_signext_40; // sfix30_En30
  wire signed [29:0] add_signext_41; // sfix30_En30
  wire signed [30:0] add_temp_20; // sfix31_En30
  wire signed [29:0] add_signext_42; // sfix30_En30
  wire signed [29:0] add_signext_43; // sfix30_En30
  wire signed [30:0] add_temp_21; // sfix31_En30
  wire signed [29:0] add_signext_44; // sfix30_En30
  wire signed [29:0] add_signext_45; // sfix30_En30
  wire signed [30:0] add_temp_22; // sfix31_En30
  wire signed [29:0] add_signext_46; // sfix30_En30
  wire signed [29:0] add_signext_47; // sfix30_En30
  wire signed [30:0] add_temp_23; // sfix31_En30
  wire signed [29:0] add_signext_48; // sfix30_En30
  wire signed [29:0] add_signext_49; // sfix30_En30
  wire signed [30:0] add_temp_24; // sfix31_En30
  wire signed [29:0] add_signext_50; // sfix30_En30
  wire signed [29:0] add_signext_51; // sfix30_En30
  wire signed [30:0] add_temp_25; // sfix31_En30
  reg  signed [31:0] sumdelay_pipeline1 [0:26] ; // sfix32_En30
  wire signed [31:0] sumvector2 [0:13] ; // sfix32_En30
  wire signed [31:0] add_signext_52; // sfix32_En30
  wire signed [31:0] add_signext_53; // sfix32_En30
  wire signed [32:0] add_temp_26; // sfix33_En30
  wire signed [31:0] add_signext_54; // sfix32_En30
  wire signed [31:0] add_signext_55; // sfix32_En30
  wire signed [32:0] add_temp_27; // sfix33_En30
  wire signed [31:0] add_signext_56; // sfix32_En30
  wire signed [31:0] add_signext_57; // sfix32_En30
  wire signed [32:0] add_temp_28; // sfix33_En30
  wire signed [31:0] add_signext_58; // sfix32_En30
  wire signed [31:0] add_signext_59; // sfix32_En30
  wire signed [32:0] add_temp_29; // sfix33_En30
  wire signed [31:0] add_signext_60; // sfix32_En30
  wire signed [31:0] add_signext_61; // sfix32_En30
  wire signed [32:0] add_temp_30; // sfix33_En30
  wire signed [31:0] add_signext_62; // sfix32_En30
  wire signed [31:0] add_signext_63; // sfix32_En30
  wire signed [32:0] add_temp_31; // sfix33_En30
  wire signed [31:0] add_signext_64; // sfix32_En30
  wire signed [31:0] add_signext_65; // sfix32_En30
  wire signed [32:0] add_temp_32; // sfix33_En30
  wire signed [31:0] add_signext_66; // sfix32_En30
  wire signed [31:0] add_signext_67; // sfix32_En30
  wire signed [32:0] add_temp_33; // sfix33_En30
  wire signed [31:0] add_signext_68; // sfix32_En30
  wire signed [31:0] add_signext_69; // sfix32_En30
  wire signed [32:0] add_temp_34; // sfix33_En30
  wire signed [31:0] add_signext_70; // sfix32_En30
  wire signed [31:0] add_signext_71; // sfix32_En30
  wire signed [32:0] add_temp_35; // sfix33_En30
  wire signed [31:0] add_signext_72; // sfix32_En30
  wire signed [31:0] add_signext_73; // sfix32_En30
  wire signed [32:0] add_temp_36; // sfix33_En30
  wire signed [31:0] add_signext_74; // sfix32_En30
  wire signed [31:0] add_signext_75; // sfix32_En30
  wire signed [32:0] add_temp_37; // sfix33_En30
  wire signed [31:0] add_signext_76; // sfix32_En30
  wire signed [31:0] add_signext_77; // sfix32_En30
  wire signed [32:0] add_temp_38; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline2 [0:13] ; // sfix32_En30
  wire signed [31:0] sumvector3 [0:6] ; // sfix32_En30
  wire signed [31:0] add_signext_78; // sfix32_En30
  wire signed [31:0] add_signext_79; // sfix32_En30
  wire signed [32:0] add_temp_39; // sfix33_En30
  wire signed [31:0] add_signext_80; // sfix32_En30
  wire signed [31:0] add_signext_81; // sfix32_En30
  wire signed [32:0] add_temp_40; // sfix33_En30
  wire signed [31:0] add_signext_82; // sfix32_En30
  wire signed [31:0] add_signext_83; // sfix32_En30
  wire signed [32:0] add_temp_41; // sfix33_En30
  wire signed [31:0] add_signext_84; // sfix32_En30
  wire signed [31:0] add_signext_85; // sfix32_En30
  wire signed [32:0] add_temp_42; // sfix33_En30
  wire signed [31:0] add_signext_86; // sfix32_En30
  wire signed [31:0] add_signext_87; // sfix32_En30
  wire signed [32:0] add_temp_43; // sfix33_En30
  wire signed [31:0] add_signext_88; // sfix32_En30
  wire signed [31:0] add_signext_89; // sfix32_En30
  wire signed [32:0] add_temp_44; // sfix33_En30
  wire signed [31:0] add_signext_90; // sfix32_En30
  wire signed [31:0] add_signext_91; // sfix32_En30
  wire signed [32:0] add_temp_45; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline3 [0:6] ; // sfix32_En30
  wire signed [31:0] sumvector4 [0:3] ; // sfix32_En30
  wire signed [31:0] add_signext_92; // sfix32_En30
  wire signed [31:0] add_signext_93; // sfix32_En30
  wire signed [32:0] add_temp_46; // sfix33_En30
  wire signed [31:0] add_signext_94; // sfix32_En30
  wire signed [31:0] add_signext_95; // sfix32_En30
  wire signed [32:0] add_temp_47; // sfix33_En30
  wire signed [31:0] add_signext_96; // sfix32_En30
  wire signed [31:0] add_signext_97; // sfix32_En30
  wire signed [32:0] add_temp_48; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline4 [0:3] ; // sfix32_En30
  wire signed [31:0] sumvector5 [0:1] ; // sfix32_En30
  wire signed [31:0] add_signext_98; // sfix32_En30
  wire signed [31:0] add_signext_99; // sfix32_En30
  wire signed [32:0] add_temp_49; // sfix33_En30
  wire signed [31:0] add_signext_100; // sfix32_En30
  wire signed [31:0] add_signext_101; // sfix32_En30
  wire signed [32:0] add_temp_50; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline5 [0:1] ; // sfix32_En30
  wire signed [31:0] sum6; // sfix32_En30
  wire signed [31:0] add_signext_102; // sfix32_En30
  wire signed [31:0] add_signext_103; // sfix32_En30
  wire signed [32:0] add_temp_51; // sfix33_En30
  wire signed [19:0] output_typeconvert; // sfix20_En30
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  reg  ce_delayline9; // boolean
  reg  ce_delayline10; // boolean
  reg  ce_delayline11; // boolean
  reg  ce_delayline12; // boolean
  wire ce_gated; // boolean
  reg  signed [19:0] output_register; // sfix20_En30

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
        input_pipeline_phase0[8] <= 0;
        input_pipeline_phase0[9] <= 0;
        input_pipeline_phase0[10] <= 0;
        input_pipeline_phase0[11] <= 0;
        input_pipeline_phase0[12] <= 0;
        input_pipeline_phase0[13] <= 0;
        input_pipeline_phase0[14] <= 0;
        input_pipeline_phase0[15] <= 0;
        input_pipeline_phase0[16] <= 0;
        input_pipeline_phase0[17] <= 0;
        input_pipeline_phase0[18] <= 0;
        input_pipeline_phase0[19] <= 0;
        input_pipeline_phase0[20] <= 0;
        input_pipeline_phase0[21] <= 0;
        input_pipeline_phase0[22] <= 0;
        input_pipeline_phase0[23] <= 0;
        input_pipeline_phase0[24] <= 0;
        input_pipeline_phase0[25] <= 0;
        input_pipeline_phase0[26] <= 0;
        input_pipeline_phase0[27] <= 0;
        input_pipeline_phase0[28] <= 0;
        input_pipeline_phase0[29] <= 0;
        input_pipeline_phase0[30] <= 0;
        input_pipeline_phase0[31] <= 0;
        input_pipeline_phase0[32] <= 0;
        input_pipeline_phase0[33] <= 0;
        input_pipeline_phase0[34] <= 0;
        input_pipeline_phase0[35] <= 0;
        input_pipeline_phase0[36] <= 0;
        input_pipeline_phase0[37] <= 0;
        input_pipeline_phase0[38] <= 0;
        input_pipeline_phase0[39] <= 0;
        input_pipeline_phase0[40] <= 0;
        input_pipeline_phase0[41] <= 0;
        input_pipeline_phase0[42] <= 0;
        input_pipeline_phase0[43] <= 0;
        input_pipeline_phase0[44] <= 0;
        input_pipeline_phase0[45] <= 0;
        input_pipeline_phase0[46] <= 0;
        input_pipeline_phase0[47] <= 0;
        input_pipeline_phase0[48] <= 0;
        input_pipeline_phase0[49] <= 0;
        input_pipeline_phase0[50] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
          input_pipeline_phase0[8] <= input_pipeline_phase0[7];
          input_pipeline_phase0[9] <= input_pipeline_phase0[8];
          input_pipeline_phase0[10] <= input_pipeline_phase0[9];
          input_pipeline_phase0[11] <= input_pipeline_phase0[10];
          input_pipeline_phase0[12] <= input_pipeline_phase0[11];
          input_pipeline_phase0[13] <= input_pipeline_phase0[12];
          input_pipeline_phase0[14] <= input_pipeline_phase0[13];
          input_pipeline_phase0[15] <= input_pipeline_phase0[14];
          input_pipeline_phase0[16] <= input_pipeline_phase0[15];
          input_pipeline_phase0[17] <= input_pipeline_phase0[16];
          input_pipeline_phase0[18] <= input_pipeline_phase0[17];
          input_pipeline_phase0[19] <= input_pipeline_phase0[18];
          input_pipeline_phase0[20] <= input_pipeline_phase0[19];
          input_pipeline_phase0[21] <= input_pipeline_phase0[20];
          input_pipeline_phase0[22] <= input_pipeline_phase0[21];
          input_pipeline_phase0[23] <= input_pipeline_phase0[22];
          input_pipeline_phase0[24] <= input_pipeline_phase0[23];
          input_pipeline_phase0[25] <= input_pipeline_phase0[24];
          input_pipeline_phase0[26] <= input_pipeline_phase0[25];
          input_pipeline_phase0[27] <= input_pipeline_phase0[26];
          input_pipeline_phase0[28] <= input_pipeline_phase0[27];
          input_pipeline_phase0[29] <= input_pipeline_phase0[28];
          input_pipeline_phase0[30] <= input_pipeline_phase0[29];
          input_pipeline_phase0[31] <= input_pipeline_phase0[30];
          input_pipeline_phase0[32] <= input_pipeline_phase0[31];
          input_pipeline_phase0[33] <= input_pipeline_phase0[32];
          input_pipeline_phase0[34] <= input_pipeline_phase0[33];
          input_pipeline_phase0[35] <= input_pipeline_phase0[34];
          input_pipeline_phase0[36] <= input_pipeline_phase0[35];
          input_pipeline_phase0[37] <= input_pipeline_phase0[36];
          input_pipeline_phase0[38] <= input_pipeline_phase0[37];
          input_pipeline_phase0[39] <= input_pipeline_phase0[38];
          input_pipeline_phase0[40] <= input_pipeline_phase0[39];
          input_pipeline_phase0[41] <= input_pipeline_phase0[40];
          input_pipeline_phase0[42] <= input_pipeline_phase0[41];
          input_pipeline_phase0[43] <= input_pipeline_phase0[42];
          input_pipeline_phase0[44] <= input_pipeline_phase0[43];
          input_pipeline_phase0[45] <= input_pipeline_phase0[44];
          input_pipeline_phase0[46] <= input_pipeline_phase0[45];
          input_pipeline_phase0[47] <= input_pipeline_phase0[46];
          input_pipeline_phase0[48] <= input_pipeline_phase0[47];
          input_pipeline_phase0[49] <= input_pipeline_phase0[48];
          input_pipeline_phase0[50] <= input_pipeline_phase0[49];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
        input_pipeline_phase1[10] <= 0;
        input_pipeline_phase1[11] <= 0;
        input_pipeline_phase1[12] <= 0;
        input_pipeline_phase1[13] <= 0;
        input_pipeline_phase1[14] <= 0;
        input_pipeline_phase1[15] <= 0;
        input_pipeline_phase1[16] <= 0;
        input_pipeline_phase1[17] <= 0;
        input_pipeline_phase1[18] <= 0;
        input_pipeline_phase1[19] <= 0;
        input_pipeline_phase1[20] <= 0;
        input_pipeline_phase1[21] <= 0;
        input_pipeline_phase1[22] <= 0;
        input_pipeline_phase1[23] <= 0;
        input_pipeline_phase1[24] <= 0;
        input_pipeline_phase1[25] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
          input_pipeline_phase1[10] <= input_pipeline_phase1[9];
          input_pipeline_phase1[11] <= input_pipeline_phase1[10];
          input_pipeline_phase1[12] <= input_pipeline_phase1[11];
          input_pipeline_phase1[13] <= input_pipeline_phase1[12];
          input_pipeline_phase1[14] <= input_pipeline_phase1[13];
          input_pipeline_phase1[15] <= input_pipeline_phase1[14];
          input_pipeline_phase1[16] <= input_pipeline_phase1[15];
          input_pipeline_phase1[17] <= input_pipeline_phase1[16];
          input_pipeline_phase1[18] <= input_pipeline_phase1[17];
          input_pipeline_phase1[19] <= input_pipeline_phase1[18];
          input_pipeline_phase1[20] <= input_pipeline_phase1[19];
          input_pipeline_phase1[21] <= input_pipeline_phase1[20];
          input_pipeline_phase1[22] <= input_pipeline_phase1[21];
          input_pipeline_phase1[23] <= input_pipeline_phase1[22];
          input_pipeline_phase1[24] <= input_pipeline_phase1[23];
          input_pipeline_phase1[25] <= input_pipeline_phase1[24];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mulpwr2_temp = (input_register==16'b1000000000000000) ? $signed({1'b0, input_register}) : -input_register;

  assign product_phase0_1 = $signed({{13{mulpwr2_temp[16]}}, mulpwr2_temp});

  assign product_phase0_2 = $signed({{14{input_pipeline_phase0[0][15]}}, input_pipeline_phase0[0]});

  assign mulcsd_temp = - (
        $signed({input_pipeline_phase0[1], 2'b00}) -
        input_pipeline_phase0[1]);
  assign product_phase0_3 = $signed({{11{mulcsd_temp[18]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[2], 2'b00}) +
        input_pipeline_phase0[2];
  assign product_phase0_4 = $signed({{11{mulcsd_temp_1[18]}}, mulcsd_temp_1});

  assign mulcsd_temp_2 = - (
        $signed({input_pipeline_phase0[3], 3'b000}) +
        input_pipeline_phase0[3]);
  assign product_phase0_5 = $signed({{10{mulcsd_temp_2[19]}}, mulcsd_temp_2});

  assign mulcsd_temp_3 = 
        $signed({input_pipeline_phase0[4], 4'b0000}) -
        $signed({input_pipeline_phase0[4], 1'b0});
  assign product_phase0_6 = $signed({{9{mulcsd_temp_3[20]}}, mulcsd_temp_3});

  assign mulcsd_temp_4 = - (
        $signed({input_pipeline_phase0[5], 4'b0000}) +
        $signed({input_pipeline_phase0[5], 2'b00}) +
        input_pipeline_phase0[5]);
  assign product_phase0_7 = $signed({{9{mulcsd_temp_4[20]}}, mulcsd_temp_4});

  assign mulcsd_temp_5 = 
        $signed({input_pipeline_phase0[6], 5'b00000}) -
        $signed({input_pipeline_phase0[6], 1'b0});
  assign product_phase0_8 = $signed({{8{mulcsd_temp_5[21]}}, mulcsd_temp_5});

  assign mulcsd_temp_6 = - (
        $signed({input_pipeline_phase0[7], 5'b00000}) +
        $signed({input_pipeline_phase0[7], 3'b000}) +
        input_pipeline_phase0[7]);
  assign product_phase0_9 = $signed({{8{mulcsd_temp_6[21]}}, mulcsd_temp_6});

  assign mulcsd_temp_7 = 
        $signed({input_pipeline_phase0[8], 6'b000000}) -
        $signed({input_pipeline_phase0[8], 3'b000});
  assign product_phase0_10 = $signed({{7{mulcsd_temp_7[22]}}, mulcsd_temp_7});

  assign mulcsd_temp_8 = - (
        $signed({input_pipeline_phase0[9], 6'b000000}) +
        $signed({input_pipeline_phase0[9], 3'b000}) +
        $signed({input_pipeline_phase0[9], 2'b00}) -
        input_pipeline_phase0[9]);
  assign product_phase0_11 = $signed({{7{mulcsd_temp_8[22]}}, mulcsd_temp_8});

  assign mulcsd_temp_9 = 
        $signed({input_pipeline_phase0[10], 7'b0000000}) -
        $signed({input_pipeline_phase0[10], 5'b00000}) +
        $signed({input_pipeline_phase0[10], 2'b00}) -
        input_pipeline_phase0[10];
  assign product_phase0_12 = $signed({{6{mulcsd_temp_9[23]}}, mulcsd_temp_9});

  assign mulpwr2_temp_1 = (input_pipeline_phase0[11]==16'b1000000000000000) ? $signed({1'b0, input_pipeline_phase0[11]}) : -input_pipeline_phase0[11];

  assign product_phase0_13 = $signed({mulpwr2_temp_1[16:0], 7'b0000000});

  assign mulcsd_temp_10 = 
        $signed({input_pipeline_phase0[12], 7'b0000000}) +
        $signed({input_pipeline_phase0[12], 5'b00000}) +
        $signed({input_pipeline_phase0[12], 2'b00}) -
        input_pipeline_phase0[12];
  assign product_phase0_14 = $signed({{6{mulcsd_temp_10[23]}}, mulcsd_temp_10});

  assign mulcsd_temp_11 = - (
        $signed({input_pipeline_phase0[13], 8'b00000000}) -
        $signed({input_pipeline_phase0[13], 6'b000000}) +
        $signed({input_pipeline_phase0[13], 4'b0000}) -
        input_pipeline_phase0[13]);
  assign product_phase0_15 = $signed({{5{mulcsd_temp_11[24]}}, mulcsd_temp_11});

  assign mulcsd_temp_12 = 
        $signed({input_pipeline_phase0[14], 8'b00000000}) +
        $signed({input_pipeline_phase0[14], 2'b00});
  assign product_phase0_16 = $signed({{5{mulcsd_temp_12[24]}}, mulcsd_temp_12});

  assign mulcsd_temp_13 = - (
        $signed({input_pipeline_phase0[15], 8'b00000000}) +
        $signed({input_pipeline_phase0[15], 6'b000000}) +
        $signed({input_pipeline_phase0[15], 2'b00}));
  assign product_phase0_17 = $signed({{5{mulcsd_temp_13[24]}}, mulcsd_temp_13});

  assign mulcsd_temp_14 = 
        $signed({input_pipeline_phase0[16], 9'b000000000}) -
        $signed({input_pipeline_phase0[16], 7'b0000000}) +
        $signed({input_pipeline_phase0[16], 4'b0000}) +
        $signed({input_pipeline_phase0[16], 2'b00});
  assign product_phase0_18 = $signed({{4{mulcsd_temp_14[25]}}, mulcsd_temp_14});

  assign mulcsd_temp_15 = - (
        $signed({input_pipeline_phase0[17], 9'b000000000}) -
        $signed({input_pipeline_phase0[17], 4'b0000}) +
        $signed({input_pipeline_phase0[17], 3'b000}) -
        input_pipeline_phase0[17]);
  assign product_phase0_19 = $signed({{4{mulcsd_temp_15[25]}}, mulcsd_temp_15});

  assign mulcsd_temp_16 = 
        $signed({input_pipeline_phase0[18], 9'b000000000}) +
        $signed({input_pipeline_phase0[18], 7'b0000000}) -
        $signed({input_pipeline_phase0[18], 4'b0000}) +
        $signed({input_pipeline_phase0[18], 3'b000}) -
        $signed({input_pipeline_phase0[18], 1'b0});
  assign product_phase0_20 = $signed({{4{mulcsd_temp_16[25]}}, mulcsd_temp_16});

  assign mulcsd_temp_17 = - (
        $signed({input_pipeline_phase0[19], 10'b0000000000}) -
        $signed({input_pipeline_phase0[19], 8'b00000000}) +
        $signed({input_pipeline_phase0[19], 5'b00000}) -
        $signed({input_pipeline_phase0[19], 1'b0}));
  assign product_phase0_21 = $signed({{3{mulcsd_temp_17[26]}}, mulcsd_temp_17});

  assign mulcsd_temp_18 = 
        $signed({input_pipeline_phase0[20], 10'b0000000000}) +
        $signed({input_pipeline_phase0[20], 3'b000}) +
        input_pipeline_phase0[20];
  assign product_phase0_22 = $signed({{3{mulcsd_temp_18[26]}}, mulcsd_temp_18});

  assign mulcsd_temp_19 = - (
        $signed({input_pipeline_phase0[21], 10'b0000000000}) +
        $signed({input_pipeline_phase0[21], 8'b00000000}) +
        $signed({input_pipeline_phase0[21], 7'b0000000}) -
        $signed({input_pipeline_phase0[21], 5'b00000}) +
        $signed({input_pipeline_phase0[21], 4'b0000}) -
        $signed({input_pipeline_phase0[21], 1'b0}));
  assign product_phase0_23 = $signed({{3{mulcsd_temp_19[26]}}, mulcsd_temp_19});

  assign mulcsd_temp_20 = 
        $signed({input_pipeline_phase0[22], 11'b00000000000}) -
        $signed({input_pipeline_phase0[22], 6'b000000}) +
        $signed({input_pipeline_phase0[22], 5'b00000}) -
        $signed({input_pipeline_phase0[22], 1'b0});
  assign product_phase0_24 = $signed({{2{mulcsd_temp_20[27]}}, mulcsd_temp_20});

  assign mulcsd_temp_21 = - (
        $signed({input_pipeline_phase0[23], 12'b000000000000}) -
        $signed({input_pipeline_phase0[23], 10'b0000000000}) +
        $signed({input_pipeline_phase0[23], 8'b00000000}) +
        $signed({input_pipeline_phase0[23], 7'b0000000}) -
        $signed({input_pipeline_phase0[23], 5'b00000}) +
        $signed({input_pipeline_phase0[23], 3'b000}) +
        input_pipeline_phase0[23]);
  assign product_phase0_25 = $signed({{1{mulcsd_temp_21[28]}}, mulcsd_temp_21});

  assign mulcsd_temp_22 = 
        $signed({input_pipeline_phase0[24], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[24], 11'b00000000000}) +
        $signed({input_pipeline_phase0[24], 7'b0000000}) +
        $signed({input_pipeline_phase0[24], 6'b000000}) -
        $signed({input_pipeline_phase0[24], 4'b0000});
  assign product_phase0_26 = mulcsd_temp_22;

  assign mulcsd_temp_23 = 
        $signed({input_pipeline_phase0[25], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[25], 11'b00000000000}) +
        $signed({input_pipeline_phase0[25], 7'b0000000}) +
        $signed({input_pipeline_phase0[25], 6'b000000}) -
        $signed({input_pipeline_phase0[25], 4'b0000});
  assign product_phase0_27 = mulcsd_temp_23;

  assign mulcsd_temp_24 = - (
        $signed({input_pipeline_phase0[26], 12'b000000000000}) -
        $signed({input_pipeline_phase0[26], 10'b0000000000}) +
        $signed({input_pipeline_phase0[26], 8'b00000000}) +
        $signed({input_pipeline_phase0[26], 7'b0000000}) -
        $signed({input_pipeline_phase0[26], 5'b00000}) +
        $signed({input_pipeline_phase0[26], 3'b000}) +
        input_pipeline_phase0[26]);
  assign product_phase0_28 = $signed({{1{mulcsd_temp_24[28]}}, mulcsd_temp_24});

  assign mulcsd_temp_25 = 
        $signed({input_pipeline_phase0[27], 11'b00000000000}) -
        $signed({input_pipeline_phase0[27], 6'b000000}) +
        $signed({input_pipeline_phase0[27], 5'b00000}) -
        $signed({input_pipeline_phase0[27], 1'b0});
  assign product_phase0_29 = $signed({{2{mulcsd_temp_25[27]}}, mulcsd_temp_25});

  assign mulcsd_temp_26 = - (
        $signed({input_pipeline_phase0[28], 10'b0000000000}) +
        $signed({input_pipeline_phase0[28], 8'b00000000}) +
        $signed({input_pipeline_phase0[28], 7'b0000000}) -
        $signed({input_pipeline_phase0[28], 5'b00000}) +
        $signed({input_pipeline_phase0[28], 4'b0000}) -
        $signed({input_pipeline_phase0[28], 1'b0}));
  assign product_phase0_30 = $signed({{3{mulcsd_temp_26[26]}}, mulcsd_temp_26});

  assign mulcsd_temp_27 = 
        $signed({input_pipeline_phase0[29], 10'b0000000000}) +
        $signed({input_pipeline_phase0[29], 3'b000}) +
        input_pipeline_phase0[29];
  assign product_phase0_31 = $signed({{3{mulcsd_temp_27[26]}}, mulcsd_temp_27});

  assign mulcsd_temp_28 = - (
        $signed({input_pipeline_phase0[30], 10'b0000000000}) -
        $signed({input_pipeline_phase0[30], 8'b00000000}) +
        $signed({input_pipeline_phase0[30], 5'b00000}) -
        $signed({input_pipeline_phase0[30], 1'b0}));
  assign product_phase0_32 = $signed({{3{mulcsd_temp_28[26]}}, mulcsd_temp_28});

  assign mulcsd_temp_29 = 
        $signed({input_pipeline_phase0[31], 9'b000000000}) +
        $signed({input_pipeline_phase0[31], 7'b0000000}) -
        $signed({input_pipeline_phase0[31], 4'b0000}) +
        $signed({input_pipeline_phase0[31], 3'b000}) -
        $signed({input_pipeline_phase0[31], 1'b0});
  assign product_phase0_33 = $signed({{4{mulcsd_temp_29[25]}}, mulcsd_temp_29});

  assign mulcsd_temp_30 = - (
        $signed({input_pipeline_phase0[32], 9'b000000000}) -
        $signed({input_pipeline_phase0[32], 4'b0000}) +
        $signed({input_pipeline_phase0[32], 3'b000}) -
        input_pipeline_phase0[32]);
  assign product_phase0_34 = $signed({{4{mulcsd_temp_30[25]}}, mulcsd_temp_30});

  assign mulcsd_temp_31 = 
        $signed({input_pipeline_phase0[33], 9'b000000000}) -
        $signed({input_pipeline_phase0[33], 7'b0000000}) +
        $signed({input_pipeline_phase0[33], 4'b0000}) +
        $signed({input_pipeline_phase0[33], 2'b00});
  assign product_phase0_35 = $signed({{4{mulcsd_temp_31[25]}}, mulcsd_temp_31});

  assign mulcsd_temp_32 = - (
        $signed({input_pipeline_phase0[34], 8'b00000000}) +
        $signed({input_pipeline_phase0[34], 6'b000000}) +
        $signed({input_pipeline_phase0[34], 2'b00}));
  assign product_phase0_36 = $signed({{5{mulcsd_temp_32[24]}}, mulcsd_temp_32});

  assign mulcsd_temp_33 = 
        $signed({input_pipeline_phase0[35], 8'b00000000}) +
        $signed({input_pipeline_phase0[35], 2'b00});
  assign product_phase0_37 = $signed({{5{mulcsd_temp_33[24]}}, mulcsd_temp_33});

  assign mulcsd_temp_34 = - (
        $signed({input_pipeline_phase0[36], 8'b00000000}) -
        $signed({input_pipeline_phase0[36], 6'b000000}) +
        $signed({input_pipeline_phase0[36], 4'b0000}) -
        input_pipeline_phase0[36]);
  assign product_phase0_38 = $signed({{5{mulcsd_temp_34[24]}}, mulcsd_temp_34});

  assign mulcsd_temp_35 = 
        $signed({input_pipeline_phase0[37], 7'b0000000}) +
        $signed({input_pipeline_phase0[37], 5'b00000}) +
        $signed({input_pipeline_phase0[37], 2'b00}) -
        input_pipeline_phase0[37];
  assign product_phase0_39 = $signed({{6{mulcsd_temp_35[23]}}, mulcsd_temp_35});

  assign mulpwr2_temp_2 = (input_pipeline_phase0[38]==16'b1000000000000000) ? $signed({1'b0, input_pipeline_phase0[38]}) : -input_pipeline_phase0[38];

  assign product_phase0_40 = $signed({mulpwr2_temp_2[16:0], 7'b0000000});

  assign mulcsd_temp_36 = 
        $signed({input_pipeline_phase0[39], 7'b0000000}) -
        $signed({input_pipeline_phase0[39], 5'b00000}) +
        $signed({input_pipeline_phase0[39], 2'b00}) -
        input_pipeline_phase0[39];
  assign product_phase0_41 = $signed({{6{mulcsd_temp_36[23]}}, mulcsd_temp_36});

  assign mulcsd_temp_37 = - (
        $signed({input_pipeline_phase0[40], 6'b000000}) +
        $signed({input_pipeline_phase0[40], 3'b000}) +
        $signed({input_pipeline_phase0[40], 2'b00}) -
        input_pipeline_phase0[40]);
  assign product_phase0_42 = $signed({{7{mulcsd_temp_37[22]}}, mulcsd_temp_37});

  assign mulcsd_temp_38 = 
        $signed({input_pipeline_phase0[41], 6'b000000}) -
        $signed({input_pipeline_phase0[41], 3'b000});
  assign product_phase0_43 = $signed({{7{mulcsd_temp_38[22]}}, mulcsd_temp_38});

  assign mulcsd_temp_39 = - (
        $signed({input_pipeline_phase0[42], 5'b00000}) +
        $signed({input_pipeline_phase0[42], 3'b000}) +
        input_pipeline_phase0[42]);
  assign product_phase0_44 = $signed({{8{mulcsd_temp_39[21]}}, mulcsd_temp_39});

  assign mulcsd_temp_40 = 
        $signed({input_pipeline_phase0[43], 5'b00000}) -
        $signed({input_pipeline_phase0[43], 1'b0});
  assign product_phase0_45 = $signed({{8{mulcsd_temp_40[21]}}, mulcsd_temp_40});

  assign mulcsd_temp_41 = - (
        $signed({input_pipeline_phase0[44], 4'b0000}) +
        $signed({input_pipeline_phase0[44], 2'b00}) +
        input_pipeline_phase0[44]);
  assign product_phase0_46 = $signed({{9{mulcsd_temp_41[20]}}, mulcsd_temp_41});

  assign mulcsd_temp_42 = 
        $signed({input_pipeline_phase0[45], 4'b0000}) -
        $signed({input_pipeline_phase0[45], 1'b0});
  assign product_phase0_47 = $signed({{9{mulcsd_temp_42[20]}}, mulcsd_temp_42});

  assign mulcsd_temp_43 = - (
        $signed({input_pipeline_phase0[46], 3'b000}) +
        input_pipeline_phase0[46]);
  assign product_phase0_48 = $signed({{10{mulcsd_temp_43[19]}}, mulcsd_temp_43});

  assign mulcsd_temp_44 = 
        $signed({input_pipeline_phase0[47], 2'b00}) +
        input_pipeline_phase0[47];
  assign product_phase0_49 = $signed({{11{mulcsd_temp_44[18]}}, mulcsd_temp_44});

  assign mulcsd_temp_45 = - (
        $signed({input_pipeline_phase0[48], 2'b00}) -
        input_pipeline_phase0[48]);
  assign product_phase0_50 = $signed({{11{mulcsd_temp_45[18]}}, mulcsd_temp_45});

  assign product_phase0_51 = $signed({{14{input_pipeline_phase0[49][15]}}, input_pipeline_phase0[49]});

  assign mulpwr2_temp_3 = (input_pipeline_phase0[50]==16'b1000000000000000) ? $signed({1'b0, input_pipeline_phase0[50]}) : -input_pipeline_phase0[50];

  assign product_phase0_52 = $signed({{13{mulpwr2_temp_3[16]}}, mulpwr2_temp_3});

  assign product_phase1_26 = $signed({input_pipeline_phase1[25][15:0], 14'b00000000000000});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase0_4 <= 0;
        product_pipeline_phase0_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase0_7 <= 0;
        product_pipeline_phase0_8 <= 0;
        product_pipeline_phase0_9 <= 0;
        product_pipeline_phase0_10 <= 0;
        product_pipeline_phase0_11 <= 0;
        product_pipeline_phase0_12 <= 0;
        product_pipeline_phase0_13 <= 0;
        product_pipeline_phase0_14 <= 0;
        product_pipeline_phase0_15 <= 0;
        product_pipeline_phase0_16 <= 0;
        product_pipeline_phase0_17 <= 0;
        product_pipeline_phase0_18 <= 0;
        product_pipeline_phase0_19 <= 0;
        product_pipeline_phase0_20 <= 0;
        product_pipeline_phase0_21 <= 0;
        product_pipeline_phase0_22 <= 0;
        product_pipeline_phase0_23 <= 0;
        product_pipeline_phase0_24 <= 0;
        product_pipeline_phase0_25 <= 0;
        product_pipeline_phase0_26 <= 0;
        product_pipeline_phase1_26 <= 0;
        product_pipeline_phase0_27 <= 0;
        product_pipeline_phase0_28 <= 0;
        product_pipeline_phase0_29 <= 0;
        product_pipeline_phase0_30 <= 0;
        product_pipeline_phase0_31 <= 0;
        product_pipeline_phase0_32 <= 0;
        product_pipeline_phase0_33 <= 0;
        product_pipeline_phase0_34 <= 0;
        product_pipeline_phase0_35 <= 0;
        product_pipeline_phase0_36 <= 0;
        product_pipeline_phase0_37 <= 0;
        product_pipeline_phase0_38 <= 0;
        product_pipeline_phase0_39 <= 0;
        product_pipeline_phase0_40 <= 0;
        product_pipeline_phase0_41 <= 0;
        product_pipeline_phase0_42 <= 0;
        product_pipeline_phase0_43 <= 0;
        product_pipeline_phase0_44 <= 0;
        product_pipeline_phase0_45 <= 0;
        product_pipeline_phase0_46 <= 0;
        product_pipeline_phase0_47 <= 0;
        product_pipeline_phase0_48 <= 0;
        product_pipeline_phase0_49 <= 0;
        product_pipeline_phase0_50 <= 0;
        product_pipeline_phase0_51 <= 0;
        product_pipeline_phase0_52 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase0_4 <= product_phase0_4;
          product_pipeline_phase0_5 <= product_phase0_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase0_7 <= product_phase0_7;
          product_pipeline_phase0_8 <= product_phase0_8;
          product_pipeline_phase0_9 <= product_phase0_9;
          product_pipeline_phase0_10 <= product_phase0_10;
          product_pipeline_phase0_11 <= product_phase0_11;
          product_pipeline_phase0_12 <= product_phase0_12;
          product_pipeline_phase0_13 <= product_phase0_13;
          product_pipeline_phase0_14 <= product_phase0_14;
          product_pipeline_phase0_15 <= product_phase0_15;
          product_pipeline_phase0_16 <= product_phase0_16;
          product_pipeline_phase0_17 <= product_phase0_17;
          product_pipeline_phase0_18 <= product_phase0_18;
          product_pipeline_phase0_19 <= product_phase0_19;
          product_pipeline_phase0_20 <= product_phase0_20;
          product_pipeline_phase0_21 <= product_phase0_21;
          product_pipeline_phase0_22 <= product_phase0_22;
          product_pipeline_phase0_23 <= product_phase0_23;
          product_pipeline_phase0_24 <= product_phase0_24;
          product_pipeline_phase0_25 <= product_phase0_25;
          product_pipeline_phase0_26 <= product_phase0_26;
          product_pipeline_phase1_26 <= product_phase1_26;
          product_pipeline_phase0_27 <= product_phase0_27;
          product_pipeline_phase0_28 <= product_phase0_28;
          product_pipeline_phase0_29 <= product_phase0_29;
          product_pipeline_phase0_30 <= product_phase0_30;
          product_pipeline_phase0_31 <= product_phase0_31;
          product_pipeline_phase0_32 <= product_phase0_32;
          product_pipeline_phase0_33 <= product_phase0_33;
          product_pipeline_phase0_34 <= product_phase0_34;
          product_pipeline_phase0_35 <= product_phase0_35;
          product_pipeline_phase0_36 <= product_phase0_36;
          product_pipeline_phase0_37 <= product_phase0_37;
          product_pipeline_phase0_38 <= product_phase0_38;
          product_pipeline_phase0_39 <= product_phase0_39;
          product_pipeline_phase0_40 <= product_phase0_40;
          product_pipeline_phase0_41 <= product_phase0_41;
          product_pipeline_phase0_42 <= product_phase0_42;
          product_pipeline_phase0_43 <= product_phase0_43;
          product_pipeline_phase0_44 <= product_phase0_44;
          product_pipeline_phase0_45 <= product_phase0_45;
          product_pipeline_phase0_46 <= product_phase0_46;
          product_pipeline_phase0_47 <= product_phase0_47;
          product_pipeline_phase0_48 <= product_phase0_48;
          product_pipeline_phase0_49 <= product_phase0_49;
          product_pipeline_phase0_50 <= product_phase0_50;
          product_pipeline_phase0_51 <= product_phase0_51;
          product_pipeline_phase0_52 <= product_phase0_52;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{2{product_pipeline_phase1_26[29]}}, product_pipeline_phase1_26});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{2{product_pipeline_phase0_1[29]}}, product_pipeline_phase0_1});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[31:0];

  assign add_signext_2 = product_pipeline_phase0_2;
  assign add_signext_3 = product_pipeline_phase0_3;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{1{add_temp_1[30]}}, add_temp_1});

  assign add_signext_4 = product_pipeline_phase0_4;
  assign add_signext_5 = product_pipeline_phase0_5;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector1[2] = $signed({{1{add_temp_2[30]}}, add_temp_2});

  assign add_signext_6 = product_pipeline_phase0_6;
  assign add_signext_7 = product_pipeline_phase0_7;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector1[3] = $signed({{1{add_temp_3[30]}}, add_temp_3});

  assign add_signext_8 = product_pipeline_phase0_8;
  assign add_signext_9 = product_pipeline_phase0_9;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector1[4] = $signed({{1{add_temp_4[30]}}, add_temp_4});

  assign add_signext_10 = product_pipeline_phase0_10;
  assign add_signext_11 = product_pipeline_phase0_11;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector1[5] = $signed({{1{add_temp_5[30]}}, add_temp_5});

  assign add_signext_12 = product_pipeline_phase0_12;
  assign add_signext_13 = product_pipeline_phase0_13;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector1[6] = $signed({{1{add_temp_6[30]}}, add_temp_6});

  assign add_signext_14 = product_pipeline_phase0_14;
  assign add_signext_15 = product_pipeline_phase0_15;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector1[7] = $signed({{1{add_temp_7[30]}}, add_temp_7});

  assign add_signext_16 = product_pipeline_phase0_16;
  assign add_signext_17 = product_pipeline_phase0_17;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector1[8] = $signed({{1{add_temp_8[30]}}, add_temp_8});

  assign add_signext_18 = product_pipeline_phase0_18;
  assign add_signext_19 = product_pipeline_phase0_19;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector1[9] = $signed({{1{add_temp_9[30]}}, add_temp_9});

  assign add_signext_20 = product_pipeline_phase0_20;
  assign add_signext_21 = product_pipeline_phase0_21;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector1[10] = $signed({{1{add_temp_10[30]}}, add_temp_10});

  assign add_signext_22 = product_pipeline_phase0_22;
  assign add_signext_23 = product_pipeline_phase0_23;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector1[11] = $signed({{1{add_temp_11[30]}}, add_temp_11});

  assign add_signext_24 = product_pipeline_phase0_24;
  assign add_signext_25 = product_pipeline_phase0_25;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector1[12] = $signed({{1{add_temp_12[30]}}, add_temp_12});

  assign add_signext_26 = product_pipeline_phase0_26;
  assign add_signext_27 = product_pipeline_phase0_27;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector1[13] = $signed({{1{add_temp_13[30]}}, add_temp_13});

  assign add_signext_28 = product_pipeline_phase0_28;
  assign add_signext_29 = product_pipeline_phase0_29;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sumvector1[14] = $signed({{1{add_temp_14[30]}}, add_temp_14});

  assign add_signext_30 = product_pipeline_phase0_30;
  assign add_signext_31 = product_pipeline_phase0_31;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sumvector1[15] = $signed({{1{add_temp_15[30]}}, add_temp_15});

  assign add_signext_32 = product_pipeline_phase0_32;
  assign add_signext_33 = product_pipeline_phase0_33;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sumvector1[16] = $signed({{1{add_temp_16[30]}}, add_temp_16});

  assign add_signext_34 = product_pipeline_phase0_34;
  assign add_signext_35 = product_pipeline_phase0_35;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sumvector1[17] = $signed({{1{add_temp_17[30]}}, add_temp_17});

  assign add_signext_36 = product_pipeline_phase0_36;
  assign add_signext_37 = product_pipeline_phase0_37;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sumvector1[18] = $signed({{1{add_temp_18[30]}}, add_temp_18});

  assign add_signext_38 = product_pipeline_phase0_38;
  assign add_signext_39 = product_pipeline_phase0_39;
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sumvector1[19] = $signed({{1{add_temp_19[30]}}, add_temp_19});

  assign add_signext_40 = product_pipeline_phase0_40;
  assign add_signext_41 = product_pipeline_phase0_41;
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sumvector1[20] = $signed({{1{add_temp_20[30]}}, add_temp_20});

  assign add_signext_42 = product_pipeline_phase0_42;
  assign add_signext_43 = product_pipeline_phase0_43;
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sumvector1[21] = $signed({{1{add_temp_21[30]}}, add_temp_21});

  assign add_signext_44 = product_pipeline_phase0_44;
  assign add_signext_45 = product_pipeline_phase0_45;
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sumvector1[22] = $signed({{1{add_temp_22[30]}}, add_temp_22});

  assign add_signext_46 = product_pipeline_phase0_46;
  assign add_signext_47 = product_pipeline_phase0_47;
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sumvector1[23] = $signed({{1{add_temp_23[30]}}, add_temp_23});

  assign add_signext_48 = product_pipeline_phase0_48;
  assign add_signext_49 = product_pipeline_phase0_49;
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sumvector1[24] = $signed({{1{add_temp_24[30]}}, add_temp_24});

  assign add_signext_50 = product_pipeline_phase0_50;
  assign add_signext_51 = product_pipeline_phase0_51;
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sumvector1[25] = $signed({{1{add_temp_25[30]}}, add_temp_25});

  assign sumvector1[26] = $signed({{2{product_pipeline_phase0_52[29]}}, product_pipeline_phase0_52});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
        sumdelay_pipeline1[13] <= 0;
        sumdelay_pipeline1[14] <= 0;
        sumdelay_pipeline1[15] <= 0;
        sumdelay_pipeline1[16] <= 0;
        sumdelay_pipeline1[17] <= 0;
        sumdelay_pipeline1[18] <= 0;
        sumdelay_pipeline1[19] <= 0;
        sumdelay_pipeline1[20] <= 0;
        sumdelay_pipeline1[21] <= 0;
        sumdelay_pipeline1[22] <= 0;
        sumdelay_pipeline1[23] <= 0;
        sumdelay_pipeline1[24] <= 0;
        sumdelay_pipeline1[25] <= 0;
        sumdelay_pipeline1[26] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
          sumdelay_pipeline1[13] <= sumvector1[13];
          sumdelay_pipeline1[14] <= sumvector1[14];
          sumdelay_pipeline1[15] <= sumvector1[15];
          sumdelay_pipeline1[16] <= sumvector1[16];
          sumdelay_pipeline1[17] <= sumvector1[17];
          sumdelay_pipeline1[18] <= sumvector1[18];
          sumdelay_pipeline1[19] <= sumvector1[19];
          sumdelay_pipeline1[20] <= sumvector1[20];
          sumdelay_pipeline1[21] <= sumvector1[21];
          sumdelay_pipeline1[22] <= sumvector1[22];
          sumdelay_pipeline1[23] <= sumvector1[23];
          sumdelay_pipeline1[24] <= sumvector1[24];
          sumdelay_pipeline1[25] <= sumvector1[25];
          sumdelay_pipeline1[26] <= sumvector1[26];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_52 = sumdelay_pipeline1[0];
  assign add_signext_53 = sumdelay_pipeline1[1];
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sumvector2[0] = add_temp_26[31:0];

  assign add_signext_54 = sumdelay_pipeline1[2];
  assign add_signext_55 = sumdelay_pipeline1[3];
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sumvector2[1] = add_temp_27[31:0];

  assign add_signext_56 = sumdelay_pipeline1[4];
  assign add_signext_57 = sumdelay_pipeline1[5];
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sumvector2[2] = add_temp_28[31:0];

  assign add_signext_58 = sumdelay_pipeline1[6];
  assign add_signext_59 = sumdelay_pipeline1[7];
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sumvector2[3] = add_temp_29[31:0];

  assign add_signext_60 = sumdelay_pipeline1[8];
  assign add_signext_61 = sumdelay_pipeline1[9];
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sumvector2[4] = add_temp_30[31:0];

  assign add_signext_62 = sumdelay_pipeline1[10];
  assign add_signext_63 = sumdelay_pipeline1[11];
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sumvector2[5] = add_temp_31[31:0];

  assign add_signext_64 = sumdelay_pipeline1[12];
  assign add_signext_65 = sumdelay_pipeline1[13];
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sumvector2[6] = add_temp_32[31:0];

  assign add_signext_66 = sumdelay_pipeline1[14];
  assign add_signext_67 = sumdelay_pipeline1[15];
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sumvector2[7] = add_temp_33[31:0];

  assign add_signext_68 = sumdelay_pipeline1[16];
  assign add_signext_69 = sumdelay_pipeline1[17];
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sumvector2[8] = add_temp_34[31:0];

  assign add_signext_70 = sumdelay_pipeline1[18];
  assign add_signext_71 = sumdelay_pipeline1[19];
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sumvector2[9] = add_temp_35[31:0];

  assign add_signext_72 = sumdelay_pipeline1[20];
  assign add_signext_73 = sumdelay_pipeline1[21];
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sumvector2[10] = add_temp_36[31:0];

  assign add_signext_74 = sumdelay_pipeline1[22];
  assign add_signext_75 = sumdelay_pipeline1[23];
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sumvector2[11] = add_temp_37[31:0];

  assign add_signext_76 = sumdelay_pipeline1[24];
  assign add_signext_77 = sumdelay_pipeline1[25];
  assign add_temp_38 = add_signext_76 + add_signext_77;
  assign sumvector2[12] = add_temp_38[31:0];

  assign sumvector2[13] = sumdelay_pipeline1[26];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
        sumdelay_pipeline2[7] <= 0;
        sumdelay_pipeline2[8] <= 0;
        sumdelay_pipeline2[9] <= 0;
        sumdelay_pipeline2[10] <= 0;
        sumdelay_pipeline2[11] <= 0;
        sumdelay_pipeline2[12] <= 0;
        sumdelay_pipeline2[13] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
          sumdelay_pipeline2[7] <= sumvector2[7];
          sumdelay_pipeline2[8] <= sumvector2[8];
          sumdelay_pipeline2[9] <= sumvector2[9];
          sumdelay_pipeline2[10] <= sumvector2[10];
          sumdelay_pipeline2[11] <= sumvector2[11];
          sumdelay_pipeline2[12] <= sumvector2[12];
          sumdelay_pipeline2[13] <= sumvector2[13];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_78 = sumdelay_pipeline2[0];
  assign add_signext_79 = sumdelay_pipeline2[1];
  assign add_temp_39 = add_signext_78 + add_signext_79;
  assign sumvector3[0] = add_temp_39[31:0];

  assign add_signext_80 = sumdelay_pipeline2[2];
  assign add_signext_81 = sumdelay_pipeline2[3];
  assign add_temp_40 = add_signext_80 + add_signext_81;
  assign sumvector3[1] = add_temp_40[31:0];

  assign add_signext_82 = sumdelay_pipeline2[4];
  assign add_signext_83 = sumdelay_pipeline2[5];
  assign add_temp_41 = add_signext_82 + add_signext_83;
  assign sumvector3[2] = add_temp_41[31:0];

  assign add_signext_84 = sumdelay_pipeline2[6];
  assign add_signext_85 = sumdelay_pipeline2[7];
  assign add_temp_42 = add_signext_84 + add_signext_85;
  assign sumvector3[3] = add_temp_42[31:0];

  assign add_signext_86 = sumdelay_pipeline2[8];
  assign add_signext_87 = sumdelay_pipeline2[9];
  assign add_temp_43 = add_signext_86 + add_signext_87;
  assign sumvector3[4] = add_temp_43[31:0];

  assign add_signext_88 = sumdelay_pipeline2[10];
  assign add_signext_89 = sumdelay_pipeline2[11];
  assign add_temp_44 = add_signext_88 + add_signext_89;
  assign sumvector3[5] = add_temp_44[31:0];

  assign add_signext_90 = sumdelay_pipeline2[12];
  assign add_signext_91 = sumdelay_pipeline2[13];
  assign add_temp_45 = add_signext_90 + add_signext_91;
  assign sumvector3[6] = add_temp_45[31:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
        sumdelay_pipeline3[4] <= 0;
        sumdelay_pipeline3[5] <= 0;
        sumdelay_pipeline3[6] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
          sumdelay_pipeline3[4] <= sumvector3[4];
          sumdelay_pipeline3[5] <= sumvector3[5];
          sumdelay_pipeline3[6] <= sumvector3[6];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_92 = sumdelay_pipeline3[0];
  assign add_signext_93 = sumdelay_pipeline3[1];
  assign add_temp_46 = add_signext_92 + add_signext_93;
  assign sumvector4[0] = add_temp_46[31:0];

  assign add_signext_94 = sumdelay_pipeline3[2];
  assign add_signext_95 = sumdelay_pipeline3[3];
  assign add_temp_47 = add_signext_94 + add_signext_95;
  assign sumvector4[1] = add_temp_47[31:0];

  assign add_signext_96 = sumdelay_pipeline3[4];
  assign add_signext_97 = sumdelay_pipeline3[5];
  assign add_temp_48 = add_signext_96 + add_signext_97;
  assign sumvector4[2] = add_temp_48[31:0];

  assign sumvector4[3] = sumdelay_pipeline3[6];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
        sumdelay_pipeline4[2] <= 0;
        sumdelay_pipeline4[3] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
          sumdelay_pipeline4[2] <= sumvector4[2];
          sumdelay_pipeline4[3] <= sumvector4[3];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_98 = sumdelay_pipeline4[0];
  assign add_signext_99 = sumdelay_pipeline4[1];
  assign add_temp_49 = add_signext_98 + add_signext_99;
  assign sumvector5[0] = add_temp_49[31:0];

  assign add_signext_100 = sumdelay_pipeline4[2];
  assign add_signext_101 = sumdelay_pipeline4[3];
  assign add_temp_50 = add_signext_100 + add_signext_101;
  assign sumvector5[1] = add_temp_50[31:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process5
      if (reset == 1'b1) begin
        sumdelay_pipeline5[0] <= 0;
        sumdelay_pipeline5[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline5[0] <= sumvector5[0];
          sumdelay_pipeline5[1] <= sumvector5[1];
        end
      end
    end // sumdelay_pipeline_process5

  assign add_signext_102 = sumdelay_pipeline5[0];
  assign add_signext_103 = sumdelay_pipeline5[1];
  assign add_temp_51 = add_signext_102 + add_signext_103;
  assign sum6 = add_temp_51[31:0];

  assign output_typeconvert = sum6[19:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
        ce_delayline9 <= 1'b0;
        ce_delayline10 <= 1'b0;
        ce_delayline11 <= 1'b0;
        ce_delayline12 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_delayline1 <= clk_enable;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
          ce_delayline9 <= ce_delayline8;
          ce_delayline10 <= ce_delayline9;
          ce_delayline11 <= ce_delayline10;
          ce_delayline12 <= ce_delayline11;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline12 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_gated;
  assign filter_out = output_register;
endmodule  // HB
