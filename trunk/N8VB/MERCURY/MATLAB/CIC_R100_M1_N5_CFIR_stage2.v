// -------------------------------------------------------------
//
// Module: CIC_R100_M1_N5_CFIR_stage2
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-12 11:58:15
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CIC_R100_M1_N5_CFIR_stage2
// TargetDirectory: c:\data
// InputPort: filter_in_stage2
// OutputPort: filter_out_stage2
// AddInputRegister: Off
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
// ClockEnableInputPort: clk_enable_stage2
// ClockEnableOutputPort: ce_out_stage2
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 20
// Filter Length      : 39
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s18,18 -> [-5.000000e-001 5.000000e-001)
// Input              : s20,15 -> [-16 16)
// Filter Internals   : Full Precision
//   Output           : s39,33 -> [-32 32)  (auto determined)
//   Product          : s37,33 -> [-8 8)  (auto determined)
//   Accumulator      : s39,33 -> [-32 32)  (auto determined)
//   Round Mode       : No rounding
//   Overflow Mode    : No overflow
//
// Design Method Information
// Design Algorithm : equiripple
//
// Design Options
// DensityFactor : 16
// MinOrder      : any
// MinPhase      : false
// StopbandDecay : 60
// StopbandShape : linear
//
// Design Specifications
// Sampling Frequency : 1 MHz
// Response           : CIC Compensator
// Specification      : Fp,Fst,Ap,Ast
// MultirateType      : Decimator
// DecimationFactor   : 2e-006 MHz
// NumberOfSections   : 5e-006 MHz
// DifferentialDelay  : 1e-006 MHz
// Passband Edge      : 0.1 MHz
// Stopband Edge      : 0.2 MHz
// Passband Ripple    : 0.01 dB
// Stopband Atten.    : 60 dB
//
// Measurements
// Sampling Frequency : 1 MHz
// Passband Edge      : 0.1 MHz
// 3-dB Point         : 0.1446 MHz
// 6-dB Point         : 0.15409 MHz
// Stopband Edge      : 0.2 MHz
// Passband Ripple    : 0.0096745 dB
// Stopband Atten.    : 60.314 dB
// Transition Width   : 0.1 MHz
//
// Implementation Cost
// Number of Multipliers : 39
// Number of Adders      : 38
// Number of States      : 38
// MultPerInputSample    : 19.5
// AddPerInputSample     : 19
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_R100_M1_N5_CFIR_stage2 
               (
                clk,
                clk_enable_stage2,
                reset,
                filter_in_stage2,
                filter_out_stage2,
                ce_out_stage2
                );

  input   clk; 
  input   clk_enable_stage2; 
  input   reset; 
  input   signed [19:0] filter_in_stage2; //sfix20_En15
  output  signed [38:0] filter_out_stage2; //sfix39_En33
  output  ce_out_stage2; 

////////////////////////////////////////////////////////////////
//Module Architecture: CIC_R100_M1_N5_CFIR_stage2
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [17:0] coeffphase1_1 = 18'b111111111110101111; //sfix18_En18
  parameter signed [17:0] coeffphase1_2 = 18'b111111111101110011; //sfix18_En18
  parameter signed [17:0] coeffphase1_3 = 18'b000000001111001001; //sfix18_En18
  parameter signed [17:0] coeffphase1_4 = 18'b111111111000101111; //sfix18_En18
  parameter signed [17:0] coeffphase1_5 = 18'b111111010001101001; //sfix18_En18
  parameter signed [17:0] coeffphase1_6 = 18'b000001000111010011; //sfix18_En18
  parameter signed [17:0] coeffphase1_7 = 18'b000000111010100101; //sfix18_En18
  parameter signed [17:0] coeffphase1_8 = 18'b111100000001100101; //sfix18_En18
  parameter signed [17:0] coeffphase1_9 = 18'b000001010101010000; //sfix18_En18
  parameter signed [17:0] coeffphase1_10 = 18'b010001010001110011; //sfix18_En18
  parameter signed [17:0] coeffphase1_11 = 18'b010001010001110011; //sfix18_En18
  parameter signed [17:0] coeffphase1_12 = 18'b000001010101010000; //sfix18_En18
  parameter signed [17:0] coeffphase1_13 = 18'b111100000001100101; //sfix18_En18
  parameter signed [17:0] coeffphase1_14 = 18'b000000111010100101; //sfix18_En18
  parameter signed [17:0] coeffphase1_15 = 18'b000001000111010011; //sfix18_En18
  parameter signed [17:0] coeffphase1_16 = 18'b111111010001101001; //sfix18_En18
  parameter signed [17:0] coeffphase1_17 = 18'b111111111000101111; //sfix18_En18
  parameter signed [17:0] coeffphase1_18 = 18'b000000001111001001; //sfix18_En18
  parameter signed [17:0] coeffphase1_19 = 18'b111111111101110011; //sfix18_En18
  parameter signed [17:0] coeffphase1_20 = 18'b111111111110101111; //sfix18_En18
  parameter signed [17:0] coeffphase2_1 = 18'b111111111100100111; //sfix18_En18
  parameter signed [17:0] coeffphase2_2 = 18'b000000000101011111; //sfix18_En18
  parameter signed [17:0] coeffphase2_3 = 18'b000000001110000000; //sfix18_En18
  parameter signed [17:0] coeffphase2_4 = 18'b111111011001111110; //sfix18_En18
  parameter signed [17:0] coeffphase2_5 = 18'b111111111011000010; //sfix18_En18
  parameter signed [17:0] coeffphase2_6 = 18'b000001110100010110; //sfix18_En18
  parameter signed [17:0] coeffphase2_7 = 18'b111110011001110010; //sfix18_En18
  parameter signed [17:0] coeffphase2_8 = 18'b111100011101011010; //sfix18_En18
  parameter signed [17:0] coeffphase2_9 = 18'b001001100001000110; //sfix18_En18
  parameter signed [17:0] coeffphase2_10 = 18'b010100011101101111; //sfix18_En18
  parameter signed [17:0] coeffphase2_11 = 18'b001001100001000110; //sfix18_En18
  parameter signed [17:0] coeffphase2_12 = 18'b111100011101011010; //sfix18_En18
  parameter signed [17:0] coeffphase2_13 = 18'b111110011001110010; //sfix18_En18
  parameter signed [17:0] coeffphase2_14 = 18'b000001110100010110; //sfix18_En18
  parameter signed [17:0] coeffphase2_15 = 18'b111111111011000010; //sfix18_En18
  parameter signed [17:0] coeffphase2_16 = 18'b111111011001111110; //sfix18_En18
  parameter signed [17:0] coeffphase2_17 = 18'b000000001110000000; //sfix18_En18
  parameter signed [17:0] coeffphase2_18 = 18'b000000000101011111; //sfix18_En18
  parameter signed [17:0] coeffphase2_19 = 18'b111111111100100111; //sfix18_En18
  parameter signed [17:0] coeffphase2_20 = 18'b000000000000000000; //sfix18_En18
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  wire signed [19:0] input_typeconvert; // sfix20_En15
  reg  signed [19:0] input_pipeline_phase0 [0:18] ; // sfix20_En15
  reg  signed [19:0] input_pipeline_phase1 [0:18] ; // sfix20_En15
  wire signed [36:0] product_phase0_1; // sfix37_En33
  wire signed [26:0] mulcsd_temp; // sfix27_En33
  wire signed [36:0] product_phase0_2; // sfix37_En33
  wire signed [27:0] mulcsd_temp_1; // sfix28_En33
  wire signed [36:0] product_phase0_3; // sfix37_En33
  wire signed [30:0] mulcsd_temp_2; // sfix31_En33
  wire signed [36:0] product_phase0_4; // sfix37_En33
  wire signed [29:0] mulcsd_temp_3; // sfix30_En33
  wire signed [36:0] product_phase0_5; // sfix37_En33
  wire signed [31:0] mulcsd_temp_4; // sfix32_En33
  wire signed [36:0] product_phase0_6; // sfix37_En33
  wire signed [32:0] mulcsd_temp_5; // sfix33_En33
  wire signed [36:0] product_phase0_7; // sfix37_En33
  wire signed [32:0] mulcsd_temp_6; // sfix33_En33
  wire signed [36:0] product_phase0_8; // sfix37_En33
  wire signed [34:0] mulcsd_temp_7; // sfix35_En33
  wire signed [36:0] product_phase0_9; // sfix37_En33
  wire signed [32:0] mulcsd_temp_8; // sfix33_En33
  wire signed [36:0] product_phase0_10; // sfix37_En33
  wire signed [36:0] mulcsd_temp_9; // sfix37_En33
  wire signed [36:0] product_phase0_11; // sfix37_En33
  wire signed [36:0] mulcsd_temp_10; // sfix37_En33
  wire signed [36:0] product_phase0_12; // sfix37_En33
  wire signed [32:0] mulcsd_temp_11; // sfix33_En33
  wire signed [36:0] product_phase0_13; // sfix37_En33
  wire signed [34:0] mulcsd_temp_12; // sfix35_En33
  wire signed [36:0] product_phase0_14; // sfix37_En33
  wire signed [32:0] mulcsd_temp_13; // sfix33_En33
  wire signed [36:0] product_phase0_15; // sfix37_En33
  wire signed [32:0] mulcsd_temp_14; // sfix33_En33
  wire signed [36:0] product_phase0_16; // sfix37_En33
  wire signed [31:0] mulcsd_temp_15; // sfix32_En33
  wire signed [36:0] product_phase0_17; // sfix37_En33
  wire signed [29:0] mulcsd_temp_16; // sfix30_En33
  wire signed [36:0] product_phase0_18; // sfix37_En33
  wire signed [30:0] mulcsd_temp_17; // sfix31_En33
  wire signed [36:0] product_phase0_19; // sfix37_En33
  wire signed [27:0] mulcsd_temp_18; // sfix28_En33
  wire signed [36:0] product_phase0_20; // sfix37_En33
  wire signed [26:0] mulcsd_temp_19; // sfix27_En33
  wire signed [36:0] product_phase1_1; // sfix37_En33
  wire signed [28:0] mulcsd_temp_20; // sfix29_En33
  wire signed [36:0] product_phase1_2; // sfix37_En33
  wire signed [28:0] mulcsd_temp_21; // sfix29_En33
  wire signed [36:0] product_phase1_3; // sfix37_En33
  wire signed [30:0] mulcsd_temp_22; // sfix31_En33
  wire signed [36:0] product_phase1_4; // sfix37_En33
  wire signed [31:0] mulcsd_temp_23; // sfix32_En33
  wire signed [36:0] product_phase1_5; // sfix37_En33
  wire signed [28:0] mulcsd_temp_24; // sfix29_En33
  wire signed [36:0] product_phase1_6; // sfix37_En33
  wire signed [33:0] mulcsd_temp_25; // sfix34_En33
  wire signed [36:0] product_phase1_7; // sfix37_En33
  wire signed [33:0] mulcsd_temp_26; // sfix34_En33
  wire signed [36:0] product_phase1_8; // sfix37_En33
  wire signed [34:0] mulcsd_temp_27; // sfix35_En33
  wire signed [36:0] product_phase1_9; // sfix37_En33
  wire signed [35:0] mulcsd_temp_28; // sfix36_En33
  wire signed [36:0] product_phase1_10; // sfix37_En33
  wire signed [36:0] mulcsd_temp_29; // sfix37_En33
  wire signed [36:0] product_phase1_11; // sfix37_En33
  wire signed [35:0] mulcsd_temp_30; // sfix36_En33
  wire signed [36:0] product_phase1_12; // sfix37_En33
  wire signed [34:0] mulcsd_temp_31; // sfix35_En33
  wire signed [36:0] product_phase1_13; // sfix37_En33
  wire signed [33:0] mulcsd_temp_32; // sfix34_En33
  wire signed [36:0] product_phase1_14; // sfix37_En33
  wire signed [33:0] mulcsd_temp_33; // sfix34_En33
  wire signed [36:0] product_phase1_15; // sfix37_En33
  wire signed [28:0] mulcsd_temp_34; // sfix29_En33
  wire signed [36:0] product_phase1_16; // sfix37_En33
  wire signed [31:0] mulcsd_temp_35; // sfix32_En33
  wire signed [36:0] product_phase1_17; // sfix37_En33
  wire signed [30:0] mulcsd_temp_36; // sfix31_En33
  wire signed [36:0] product_phase1_18; // sfix37_En33
  wire signed [28:0] mulcsd_temp_37; // sfix29_En33
  wire signed [36:0] product_phase1_19; // sfix37_En33
  wire signed [28:0] mulcsd_temp_38; // sfix29_En33
  reg  signed [36:0] product_pipeline_phase0_1; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_2; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_3; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_4; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_5; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_6; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_7; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_8; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_9; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_10; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_11; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_12; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_13; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_14; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_15; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_16; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_17; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_18; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_19; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase0_20; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_1; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_2; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_3; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_4; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_5; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_6; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_7; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_8; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_9; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_10; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_11; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_12; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_13; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_14; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_15; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_16; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_17; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_18; // sfix37_En33
  reg  signed [36:0] product_pipeline_phase1_19; // sfix37_En33
  wire signed [38:0] quantized_sum; // sfix39_En33
  wire signed [38:0] sumvector1 [0:19] ; // sfix39_En33
  wire signed [38:0] add_signext; // sfix39_En33
  wire signed [38:0] add_signext_1; // sfix39_En33
  wire signed [39:0] add_temp; // sfix40_En33
  wire signed [36:0] add_signext_2; // sfix37_En33
  wire signed [36:0] add_signext_3; // sfix37_En33
  wire signed [37:0] add_temp_1; // sfix38_En33
  wire signed [36:0] add_signext_4; // sfix37_En33
  wire signed [36:0] add_signext_5; // sfix37_En33
  wire signed [37:0] add_temp_2; // sfix38_En33
  wire signed [36:0] add_signext_6; // sfix37_En33
  wire signed [36:0] add_signext_7; // sfix37_En33
  wire signed [37:0] add_temp_3; // sfix38_En33
  wire signed [36:0] add_signext_8; // sfix37_En33
  wire signed [36:0] add_signext_9; // sfix37_En33
  wire signed [37:0] add_temp_4; // sfix38_En33
  wire signed [36:0] add_signext_10; // sfix37_En33
  wire signed [36:0] add_signext_11; // sfix37_En33
  wire signed [37:0] add_temp_5; // sfix38_En33
  wire signed [36:0] add_signext_12; // sfix37_En33
  wire signed [36:0] add_signext_13; // sfix37_En33
  wire signed [37:0] add_temp_6; // sfix38_En33
  wire signed [36:0] add_signext_14; // sfix37_En33
  wire signed [36:0] add_signext_15; // sfix37_En33
  wire signed [37:0] add_temp_7; // sfix38_En33
  wire signed [36:0] add_signext_16; // sfix37_En33
  wire signed [36:0] add_signext_17; // sfix37_En33
  wire signed [37:0] add_temp_8; // sfix38_En33
  wire signed [36:0] add_signext_18; // sfix37_En33
  wire signed [36:0] add_signext_19; // sfix37_En33
  wire signed [37:0] add_temp_9; // sfix38_En33
  wire signed [36:0] add_signext_20; // sfix37_En33
  wire signed [36:0] add_signext_21; // sfix37_En33
  wire signed [37:0] add_temp_10; // sfix38_En33
  wire signed [36:0] add_signext_22; // sfix37_En33
  wire signed [36:0] add_signext_23; // sfix37_En33
  wire signed [37:0] add_temp_11; // sfix38_En33
  wire signed [36:0] add_signext_24; // sfix37_En33
  wire signed [36:0] add_signext_25; // sfix37_En33
  wire signed [37:0] add_temp_12; // sfix38_En33
  wire signed [36:0] add_signext_26; // sfix37_En33
  wire signed [36:0] add_signext_27; // sfix37_En33
  wire signed [37:0] add_temp_13; // sfix38_En33
  wire signed [36:0] add_signext_28; // sfix37_En33
  wire signed [36:0] add_signext_29; // sfix37_En33
  wire signed [37:0] add_temp_14; // sfix38_En33
  wire signed [36:0] add_signext_30; // sfix37_En33
  wire signed [36:0] add_signext_31; // sfix37_En33
  wire signed [37:0] add_temp_15; // sfix38_En33
  wire signed [36:0] add_signext_32; // sfix37_En33
  wire signed [36:0] add_signext_33; // sfix37_En33
  wire signed [37:0] add_temp_16; // sfix38_En33
  wire signed [36:0] add_signext_34; // sfix37_En33
  wire signed [36:0] add_signext_35; // sfix37_En33
  wire signed [37:0] add_temp_17; // sfix38_En33
  wire signed [36:0] add_signext_36; // sfix37_En33
  wire signed [36:0] add_signext_37; // sfix37_En33
  wire signed [37:0] add_temp_18; // sfix38_En33
  reg  signed [38:0] sumdelay_pipeline1 [0:19] ; // sfix39_En33
  wire signed [38:0] sumvector2 [0:9] ; // sfix39_En33
  wire signed [38:0] add_signext_38; // sfix39_En33
  wire signed [38:0] add_signext_39; // sfix39_En33
  wire signed [39:0] add_temp_19; // sfix40_En33
  wire signed [38:0] add_signext_40; // sfix39_En33
  wire signed [38:0] add_signext_41; // sfix39_En33
  wire signed [39:0] add_temp_20; // sfix40_En33
  wire signed [38:0] add_signext_42; // sfix39_En33
  wire signed [38:0] add_signext_43; // sfix39_En33
  wire signed [39:0] add_temp_21; // sfix40_En33
  wire signed [38:0] add_signext_44; // sfix39_En33
  wire signed [38:0] add_signext_45; // sfix39_En33
  wire signed [39:0] add_temp_22; // sfix40_En33
  wire signed [38:0] add_signext_46; // sfix39_En33
  wire signed [38:0] add_signext_47; // sfix39_En33
  wire signed [39:0] add_temp_23; // sfix40_En33
  wire signed [38:0] add_signext_48; // sfix39_En33
  wire signed [38:0] add_signext_49; // sfix39_En33
  wire signed [39:0] add_temp_24; // sfix40_En33
  wire signed [38:0] add_signext_50; // sfix39_En33
  wire signed [38:0] add_signext_51; // sfix39_En33
  wire signed [39:0] add_temp_25; // sfix40_En33
  wire signed [38:0] add_signext_52; // sfix39_En33
  wire signed [38:0] add_signext_53; // sfix39_En33
  wire signed [39:0] add_temp_26; // sfix40_En33
  wire signed [38:0] add_signext_54; // sfix39_En33
  wire signed [38:0] add_signext_55; // sfix39_En33
  wire signed [39:0] add_temp_27; // sfix40_En33
  wire signed [38:0] add_signext_56; // sfix39_En33
  wire signed [38:0] add_signext_57; // sfix39_En33
  wire signed [39:0] add_temp_28; // sfix40_En33
  reg  signed [38:0] sumdelay_pipeline2 [0:9] ; // sfix39_En33
  wire signed [38:0] sumvector3 [0:4] ; // sfix39_En33
  wire signed [38:0] add_signext_58; // sfix39_En33
  wire signed [38:0] add_signext_59; // sfix39_En33
  wire signed [39:0] add_temp_29; // sfix40_En33
  wire signed [38:0] add_signext_60; // sfix39_En33
  wire signed [38:0] add_signext_61; // sfix39_En33
  wire signed [39:0] add_temp_30; // sfix40_En33
  wire signed [38:0] add_signext_62; // sfix39_En33
  wire signed [38:0] add_signext_63; // sfix39_En33
  wire signed [39:0] add_temp_31; // sfix40_En33
  wire signed [38:0] add_signext_64; // sfix39_En33
  wire signed [38:0] add_signext_65; // sfix39_En33
  wire signed [39:0] add_temp_32; // sfix40_En33
  wire signed [38:0] add_signext_66; // sfix39_En33
  wire signed [38:0] add_signext_67; // sfix39_En33
  wire signed [39:0] add_temp_33; // sfix40_En33
  reg  signed [38:0] sumdelay_pipeline3 [0:4] ; // sfix39_En33
  wire signed [38:0] sumvector4 [0:2] ; // sfix39_En33
  wire signed [38:0] add_signext_68; // sfix39_En33
  wire signed [38:0] add_signext_69; // sfix39_En33
  wire signed [39:0] add_temp_34; // sfix40_En33
  wire signed [38:0] add_signext_70; // sfix39_En33
  wire signed [38:0] add_signext_71; // sfix39_En33
  wire signed [39:0] add_temp_35; // sfix40_En33
  reg  signed [38:0] sumdelay_pipeline4 [0:2] ; // sfix39_En33
  wire signed [38:0] sumvector5 [0:1] ; // sfix39_En33
  wire signed [38:0] add_signext_72; // sfix39_En33
  wire signed [38:0] add_signext_73; // sfix39_En33
  wire signed [39:0] add_temp_36; // sfix40_En33
  reg  signed [38:0] sumdelay_pipeline5 [0:1] ; // sfix39_En33
  wire signed [38:0] sum6; // sfix39_En33
  wire signed [38:0] add_signext_74; // sfix39_En33
  wire signed [38:0] add_signext_75; // sfix39_En33
  wire signed [39:0] add_temp_37; // sfix40_En33
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  reg  ce_delayline9; // boolean
  reg  ce_delayline10; // boolean
  reg  ce_delayline11; // boolean
  reg  ce_delayline12; // boolean
  wire ce_gated; // boolean
  reg  signed [38:0] output_register; // sfix39_En33

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable_stage2;

  assign  phase_1 = ring_count[1]  && clk_enable_stage2;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_0;
      end
    end // ce_output_register

  assign input_typeconvert = filter_in_stage2;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
        input_pipeline_phase0[8] <= 0;
        input_pipeline_phase0[9] <= 0;
        input_pipeline_phase0[10] <= 0;
        input_pipeline_phase0[11] <= 0;
        input_pipeline_phase0[12] <= 0;
        input_pipeline_phase0[13] <= 0;
        input_pipeline_phase0[14] <= 0;
        input_pipeline_phase0[15] <= 0;
        input_pipeline_phase0[16] <= 0;
        input_pipeline_phase0[17] <= 0;
        input_pipeline_phase0[18] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase0[0] <= input_typeconvert;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
          input_pipeline_phase0[8] <= input_pipeline_phase0[7];
          input_pipeline_phase0[9] <= input_pipeline_phase0[8];
          input_pipeline_phase0[10] <= input_pipeline_phase0[9];
          input_pipeline_phase0[11] <= input_pipeline_phase0[10];
          input_pipeline_phase0[12] <= input_pipeline_phase0[11];
          input_pipeline_phase0[13] <= input_pipeline_phase0[12];
          input_pipeline_phase0[14] <= input_pipeline_phase0[13];
          input_pipeline_phase0[15] <= input_pipeline_phase0[14];
          input_pipeline_phase0[16] <= input_pipeline_phase0[15];
          input_pipeline_phase0[17] <= input_pipeline_phase0[16];
          input_pipeline_phase0[18] <= input_pipeline_phase0[17];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
        input_pipeline_phase1[8] <= 0;
        input_pipeline_phase1[9] <= 0;
        input_pipeline_phase1[10] <= 0;
        input_pipeline_phase1[11] <= 0;
        input_pipeline_phase1[12] <= 0;
        input_pipeline_phase1[13] <= 0;
        input_pipeline_phase1[14] <= 0;
        input_pipeline_phase1[15] <= 0;
        input_pipeline_phase1[16] <= 0;
        input_pipeline_phase1[17] <= 0;
        input_pipeline_phase1[18] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase1[0] <= input_typeconvert;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
          input_pipeline_phase1[8] <= input_pipeline_phase1[7];
          input_pipeline_phase1[9] <= input_pipeline_phase1[8];
          input_pipeline_phase1[10] <= input_pipeline_phase1[9];
          input_pipeline_phase1[11] <= input_pipeline_phase1[10];
          input_pipeline_phase1[12] <= input_pipeline_phase1[11];
          input_pipeline_phase1[13] <= input_pipeline_phase1[12];
          input_pipeline_phase1[14] <= input_pipeline_phase1[13];
          input_pipeline_phase1[15] <= input_pipeline_phase1[14];
          input_pipeline_phase1[16] <= input_pipeline_phase1[15];
          input_pipeline_phase1[17] <= input_pipeline_phase1[16];
          input_pipeline_phase1[18] <= input_pipeline_phase1[17];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mulcsd_temp = - (
        $signed({input_typeconvert, 6'b000000}) +
        $signed({input_typeconvert, 4'b0000}) +
        input_typeconvert);
  assign product_phase0_1 = $signed({{10{mulcsd_temp[26]}}, mulcsd_temp});

  assign mulcsd_temp_1 = - (
        $signed({input_pipeline_phase0[0], 7'b0000000}) +
        $signed({input_pipeline_phase0[0], 4'b0000}) -
        $signed({input_pipeline_phase0[0], 2'b00}) +
        input_pipeline_phase0[0]);
  assign product_phase0_2 = $signed({{9{mulcsd_temp_1[27]}}, mulcsd_temp_1});

  assign mulcsd_temp_2 = 
        $signed({input_pipeline_phase0[1], 10'b0000000000}) -
        $signed({input_pipeline_phase0[1], 6'b000000}) +
        $signed({input_pipeline_phase0[1], 3'b000}) +
        input_pipeline_phase0[1];
  assign product_phase0_3 = $signed({{6{mulcsd_temp_2[30]}}, mulcsd_temp_2});

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase0[2], 9'b000000000}) -
        $signed({input_pipeline_phase0[2], 6'b000000}) +
        $signed({input_pipeline_phase0[2], 4'b0000}) +
        input_pipeline_phase0[2]);
  assign product_phase0_4 = $signed({{7{mulcsd_temp_3[29]}}, mulcsd_temp_3});

  assign mulcsd_temp_4 = - (
        $signed({input_pipeline_phase0[3], 11'b00000000000}) +
        $signed({input_pipeline_phase0[3], 10'b0000000000}) -
        $signed({input_pipeline_phase0[3], 7'b0000000}) +
        $signed({input_pipeline_phase0[3], 4'b0000}) +
        $signed({input_pipeline_phase0[3], 3'b000}) -
        input_pipeline_phase0[3]);
  assign product_phase0_5 = $signed({{5{mulcsd_temp_4[31]}}, mulcsd_temp_4});

  assign mulcsd_temp_5 = 
        $signed({input_pipeline_phase0[4], 12'b000000000000}) +
        $signed({input_pipeline_phase0[4], 9'b000000000}) -
        $signed({input_pipeline_phase0[4], 6'b000000}) +
        $signed({input_pipeline_phase0[4], 4'b0000}) +
        $signed({input_pipeline_phase0[4], 2'b00}) -
        input_pipeline_phase0[4];
  assign product_phase0_6 = $signed({{4{mulcsd_temp_5[32]}}, mulcsd_temp_5});

  assign mulcsd_temp_6 = 
        $signed({input_pipeline_phase0[5], 12'b000000000000}) -
        $signed({input_pipeline_phase0[5], 9'b000000000}) +
        $signed({input_pipeline_phase0[5], 7'b0000000}) +
        $signed({input_pipeline_phase0[5], 5'b00000}) +
        $signed({input_pipeline_phase0[5], 2'b00}) +
        input_pipeline_phase0[5];
  assign product_phase0_7 = $signed({{4{mulcsd_temp_6[32]}}, mulcsd_temp_6});

  assign mulcsd_temp_7 = - (
        $signed({input_pipeline_phase0[6], 14'b00000000000000}) -
        $signed({input_pipeline_phase0[6], 7'b0000000}) +
        $signed({input_pipeline_phase0[6], 5'b00000}) -
        $signed({input_pipeline_phase0[6], 3'b000}) +
        $signed({input_pipeline_phase0[6], 2'b00}) -
        input_pipeline_phase0[6]);
  assign product_phase0_8 = $signed({{2{mulcsd_temp_7[34]}}, mulcsd_temp_7});

  assign mulcsd_temp_8 = 
        $signed({input_pipeline_phase0[7], 12'b000000000000}) +
        $signed({input_pipeline_phase0[7], 10'b0000000000}) +
        $signed({input_pipeline_phase0[7], 8'b00000000}) +
        $signed({input_pipeline_phase0[7], 6'b000000}) +
        $signed({input_pipeline_phase0[7], 4'b0000});
  assign product_phase0_9 = $signed({{4{mulcsd_temp_8[32]}}, mulcsd_temp_8});

  assign mulcsd_temp_9 = 
        $signed({input_pipeline_phase0[8], 16'b0000000000000000}) +
        $signed({input_pipeline_phase0[8], 12'b000000000000}) +
        $signed({input_pipeline_phase0[8], 10'b0000000000}) +
        $signed({input_pipeline_phase0[8], 7'b0000000}) -
        $signed({input_pipeline_phase0[8], 4'b0000}) +
        $signed({input_pipeline_phase0[8], 2'b00}) -
        input_pipeline_phase0[8];
  assign product_phase0_10 = mulcsd_temp_9;

  assign mulcsd_temp_10 = 
        $signed({input_pipeline_phase0[9], 16'b0000000000000000}) +
        $signed({input_pipeline_phase0[9], 12'b000000000000}) +
        $signed({input_pipeline_phase0[9], 10'b0000000000}) +
        $signed({input_pipeline_phase0[9], 7'b0000000}) -
        $signed({input_pipeline_phase0[9], 4'b0000}) +
        $signed({input_pipeline_phase0[9], 2'b00}) -
        input_pipeline_phase0[9];
  assign product_phase0_11 = mulcsd_temp_10;

  assign mulcsd_temp_11 = 
        $signed({input_pipeline_phase0[10], 12'b000000000000}) +
        $signed({input_pipeline_phase0[10], 10'b0000000000}) +
        $signed({input_pipeline_phase0[10], 8'b00000000}) +
        $signed({input_pipeline_phase0[10], 6'b000000}) +
        $signed({input_pipeline_phase0[10], 4'b0000});
  assign product_phase0_12 = $signed({{4{mulcsd_temp_11[32]}}, mulcsd_temp_11});

  assign mulcsd_temp_12 = - (
        $signed({input_pipeline_phase0[11], 14'b00000000000000}) -
        $signed({input_pipeline_phase0[11], 7'b0000000}) +
        $signed({input_pipeline_phase0[11], 5'b00000}) -
        $signed({input_pipeline_phase0[11], 3'b000}) +
        $signed({input_pipeline_phase0[11], 2'b00}) -
        input_pipeline_phase0[11]);
  assign product_phase0_13 = $signed({{2{mulcsd_temp_12[34]}}, mulcsd_temp_12});

  assign mulcsd_temp_13 = 
        $signed({input_pipeline_phase0[12], 12'b000000000000}) -
        $signed({input_pipeline_phase0[12], 9'b000000000}) +
        $signed({input_pipeline_phase0[12], 7'b0000000}) +
        $signed({input_pipeline_phase0[12], 5'b00000}) +
        $signed({input_pipeline_phase0[12], 2'b00}) +
        input_pipeline_phase0[12];
  assign product_phase0_14 = $signed({{4{mulcsd_temp_13[32]}}, mulcsd_temp_13});

  assign mulcsd_temp_14 = 
        $signed({input_pipeline_phase0[13], 12'b000000000000}) +
        $signed({input_pipeline_phase0[13], 9'b000000000}) -
        $signed({input_pipeline_phase0[13], 6'b000000}) +
        $signed({input_pipeline_phase0[13], 4'b0000}) +
        $signed({input_pipeline_phase0[13], 2'b00}) -
        input_pipeline_phase0[13];
  assign product_phase0_15 = $signed({{4{mulcsd_temp_14[32]}}, mulcsd_temp_14});

  assign mulcsd_temp_15 = - (
        $signed({input_pipeline_phase0[14], 11'b00000000000}) +
        $signed({input_pipeline_phase0[14], 10'b0000000000}) -
        $signed({input_pipeline_phase0[14], 7'b0000000}) +
        $signed({input_pipeline_phase0[14], 4'b0000}) +
        $signed({input_pipeline_phase0[14], 3'b000}) -
        input_pipeline_phase0[14]);
  assign product_phase0_16 = $signed({{5{mulcsd_temp_15[31]}}, mulcsd_temp_15});

  assign mulcsd_temp_16 = - (
        $signed({input_pipeline_phase0[15], 9'b000000000}) -
        $signed({input_pipeline_phase0[15], 6'b000000}) +
        $signed({input_pipeline_phase0[15], 4'b0000}) +
        input_pipeline_phase0[15]);
  assign product_phase0_17 = $signed({{7{mulcsd_temp_16[29]}}, mulcsd_temp_16});

  assign mulcsd_temp_17 = 
        $signed({input_pipeline_phase0[16], 10'b0000000000}) -
        $signed({input_pipeline_phase0[16], 6'b000000}) +
        $signed({input_pipeline_phase0[16], 3'b000}) +
        input_pipeline_phase0[16];
  assign product_phase0_18 = $signed({{6{mulcsd_temp_17[30]}}, mulcsd_temp_17});

  assign mulcsd_temp_18 = - (
        $signed({input_pipeline_phase0[17], 7'b0000000}) +
        $signed({input_pipeline_phase0[17], 4'b0000}) -
        $signed({input_pipeline_phase0[17], 2'b00}) +
        input_pipeline_phase0[17]);
  assign product_phase0_19 = $signed({{9{mulcsd_temp_18[27]}}, mulcsd_temp_18});

  assign mulcsd_temp_19 = - (
        $signed({input_pipeline_phase0[18], 6'b000000}) +
        $signed({input_pipeline_phase0[18], 4'b0000}) +
        input_pipeline_phase0[18]);
  assign product_phase0_20 = $signed({{10{mulcsd_temp_19[26]}}, mulcsd_temp_19});

  assign mulcsd_temp_20 = - (
        $signed({input_pipeline_phase1[0], 8'b00000000}) -
        $signed({input_pipeline_phase1[0], 6'b000000}) +
        $signed({input_pipeline_phase1[0], 5'b00000}) -
        $signed({input_pipeline_phase1[0], 3'b000}) +
        input_pipeline_phase1[0]);
  assign product_phase1_1 = $signed({{8{mulcsd_temp_20[28]}}, mulcsd_temp_20});

  assign mulcsd_temp_21 = 
        $signed({input_pipeline_phase1[1], 8'b00000000}) +
        $signed({input_pipeline_phase1[1], 6'b000000}) +
        $signed({input_pipeline_phase1[1], 5'b00000}) -
        input_pipeline_phase1[1];
  assign product_phase1_2 = $signed({{8{mulcsd_temp_21[28]}}, mulcsd_temp_21});

  assign mulcsd_temp_22 = 
        $signed({input_pipeline_phase1[2], 10'b0000000000}) -
        $signed({input_pipeline_phase1[2], 7'b0000000});
  assign product_phase1_3 = $signed({{6{mulcsd_temp_22[30]}}, mulcsd_temp_22});

  assign mulcsd_temp_23 = - (
        $signed({input_pipeline_phase1[3], 11'b00000000000}) +
        $signed({input_pipeline_phase1[3], 9'b000000000}) -
        $signed({input_pipeline_phase1[3], 7'b0000000}) +
        $signed({input_pipeline_phase1[3], 1'b0}));
  assign product_phase1_4 = $signed({{5{mulcsd_temp_23[31]}}, mulcsd_temp_23});

  assign mulcsd_temp_24 = - (
        $signed({input_pipeline_phase1[4], 8'b00000000}) +
        $signed({input_pipeline_phase1[4], 6'b000000}) -
        $signed({input_pipeline_phase1[4], 1'b0}));
  assign product_phase1_5 = $signed({{8{mulcsd_temp_24[28]}}, mulcsd_temp_24});

  assign mulcsd_temp_25 = 
        $signed({input_pipeline_phase1[5], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[5], 10'b0000000000}) +
        $signed({input_pipeline_phase1[5], 8'b00000000}) +
        $signed({input_pipeline_phase1[5], 4'b0000}) +
        $signed({input_pipeline_phase1[5], 3'b000}) -
        $signed({input_pipeline_phase1[5], 1'b0});
  assign product_phase1_6 = $signed({{3{mulcsd_temp_25[33]}}, mulcsd_temp_25});

  assign mulcsd_temp_26 = - (
        $signed({input_pipeline_phase1[6], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[6], 11'b00000000000}) +
        $signed({input_pipeline_phase1[6], 9'b000000000}) -
        $signed({input_pipeline_phase1[6], 7'b0000000}) +
        $signed({input_pipeline_phase1[6], 4'b0000}) -
        $signed({input_pipeline_phase1[6], 1'b0}));
  assign product_phase1_7 = $signed({{3{mulcsd_temp_26[33]}}, mulcsd_temp_26});

  assign mulcsd_temp_27 = - (
        $signed({input_pipeline_phase1[7], 14'b00000000000000}) -
        $signed({input_pipeline_phase1[7], 11'b00000000000}) +
        $signed({input_pipeline_phase1[7], 7'b0000000}) +
        $signed({input_pipeline_phase1[7], 5'b00000}) +
        $signed({input_pipeline_phase1[7], 3'b000}) -
        $signed({input_pipeline_phase1[7], 1'b0}));
  assign product_phase1_8 = $signed({{2{mulcsd_temp_27[34]}}, mulcsd_temp_27});

  assign mulcsd_temp_28 = 
        $signed({input_pipeline_phase1[8], 15'b000000000000000}) +
        $signed({input_pipeline_phase1[8], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[8], 11'b00000000000}) +
        $signed({input_pipeline_phase1[8], 6'b000000}) +
        $signed({input_pipeline_phase1[8], 3'b000}) -
        $signed({input_pipeline_phase1[8], 1'b0});
  assign product_phase1_9 = $signed({{1{mulcsd_temp_28[35]}}, mulcsd_temp_28});

  assign mulcsd_temp_29 = 
        $signed({input_pipeline_phase1[9], 16'b0000000000000000}) +
        $signed({input_pipeline_phase1[9], 14'b00000000000000}) +
        $signed({input_pipeline_phase1[9], 11'b00000000000}) -
        $signed({input_pipeline_phase1[9], 8'b00000000}) +
        $signed({input_pipeline_phase1[9], 7'b0000000}) -
        $signed({input_pipeline_phase1[9], 5'b00000}) +
        $signed({input_pipeline_phase1[9], 4'b0000}) -
        input_pipeline_phase1[9];
  assign product_phase1_10 = mulcsd_temp_29;

  assign mulcsd_temp_30 = 
        $signed({input_pipeline_phase1[10], 15'b000000000000000}) +
        $signed({input_pipeline_phase1[10], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[10], 11'b00000000000}) +
        $signed({input_pipeline_phase1[10], 6'b000000}) +
        $signed({input_pipeline_phase1[10], 3'b000}) -
        $signed({input_pipeline_phase1[10], 1'b0});
  assign product_phase1_11 = $signed({{1{mulcsd_temp_30[35]}}, mulcsd_temp_30});

  assign mulcsd_temp_31 = - (
        $signed({input_pipeline_phase1[11], 14'b00000000000000}) -
        $signed({input_pipeline_phase1[11], 11'b00000000000}) +
        $signed({input_pipeline_phase1[11], 7'b0000000}) +
        $signed({input_pipeline_phase1[11], 5'b00000}) +
        $signed({input_pipeline_phase1[11], 3'b000}) -
        $signed({input_pipeline_phase1[11], 1'b0}));
  assign product_phase1_12 = $signed({{2{mulcsd_temp_31[34]}}, mulcsd_temp_31});

  assign mulcsd_temp_32 = - (
        $signed({input_pipeline_phase1[12], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[12], 11'b00000000000}) +
        $signed({input_pipeline_phase1[12], 9'b000000000}) -
        $signed({input_pipeline_phase1[12], 7'b0000000}) +
        $signed({input_pipeline_phase1[12], 4'b0000}) -
        $signed({input_pipeline_phase1[12], 1'b0}));
  assign product_phase1_13 = $signed({{3{mulcsd_temp_32[33]}}, mulcsd_temp_32});

  assign mulcsd_temp_33 = 
        $signed({input_pipeline_phase1[13], 13'b0000000000000}) -
        $signed({input_pipeline_phase1[13], 10'b0000000000}) +
        $signed({input_pipeline_phase1[13], 8'b00000000}) +
        $signed({input_pipeline_phase1[13], 4'b0000}) +
        $signed({input_pipeline_phase1[13], 3'b000}) -
        $signed({input_pipeline_phase1[13], 1'b0});
  assign product_phase1_14 = $signed({{3{mulcsd_temp_33[33]}}, mulcsd_temp_33});

  assign mulcsd_temp_34 = - (
        $signed({input_pipeline_phase1[14], 8'b00000000}) +
        $signed({input_pipeline_phase1[14], 6'b000000}) -
        $signed({input_pipeline_phase1[14], 1'b0}));
  assign product_phase1_15 = $signed({{8{mulcsd_temp_34[28]}}, mulcsd_temp_34});

  assign mulcsd_temp_35 = - (
        $signed({input_pipeline_phase1[15], 11'b00000000000}) +
        $signed({input_pipeline_phase1[15], 9'b000000000}) -
        $signed({input_pipeline_phase1[15], 7'b0000000}) +
        $signed({input_pipeline_phase1[15], 1'b0}));
  assign product_phase1_16 = $signed({{5{mulcsd_temp_35[31]}}, mulcsd_temp_35});

  assign mulcsd_temp_36 = 
        $signed({input_pipeline_phase1[16], 10'b0000000000}) -
        $signed({input_pipeline_phase1[16], 7'b0000000});
  assign product_phase1_17 = $signed({{6{mulcsd_temp_36[30]}}, mulcsd_temp_36});

  assign mulcsd_temp_37 = 
        $signed({input_pipeline_phase1[17], 8'b00000000}) +
        $signed({input_pipeline_phase1[17], 6'b000000}) +
        $signed({input_pipeline_phase1[17], 5'b00000}) -
        input_pipeline_phase1[17];
  assign product_phase1_18 = $signed({{8{mulcsd_temp_37[28]}}, mulcsd_temp_37});

  assign mulcsd_temp_38 = - (
        $signed({input_pipeline_phase1[18], 8'b00000000}) -
        $signed({input_pipeline_phase1[18], 6'b000000}) +
        $signed({input_pipeline_phase1[18], 5'b00000}) -
        $signed({input_pipeline_phase1[18], 3'b000}) +
        input_pipeline_phase1[18]);
  assign product_phase1_19 = $signed({{8{mulcsd_temp_38[28]}}, mulcsd_temp_38});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase1_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase1_3 <= 0;
        product_pipeline_phase0_4 <= 0;
        product_pipeline_phase1_4 <= 0;
        product_pipeline_phase0_5 <= 0;
        product_pipeline_phase1_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase1_6 <= 0;
        product_pipeline_phase0_7 <= 0;
        product_pipeline_phase1_7 <= 0;
        product_pipeline_phase0_8 <= 0;
        product_pipeline_phase1_8 <= 0;
        product_pipeline_phase0_9 <= 0;
        product_pipeline_phase1_9 <= 0;
        product_pipeline_phase0_10 <= 0;
        product_pipeline_phase1_10 <= 0;
        product_pipeline_phase0_11 <= 0;
        product_pipeline_phase1_11 <= 0;
        product_pipeline_phase0_12 <= 0;
        product_pipeline_phase1_12 <= 0;
        product_pipeline_phase0_13 <= 0;
        product_pipeline_phase1_13 <= 0;
        product_pipeline_phase0_14 <= 0;
        product_pipeline_phase1_14 <= 0;
        product_pipeline_phase0_15 <= 0;
        product_pipeline_phase1_15 <= 0;
        product_pipeline_phase0_16 <= 0;
        product_pipeline_phase1_16 <= 0;
        product_pipeline_phase0_17 <= 0;
        product_pipeline_phase1_17 <= 0;
        product_pipeline_phase0_18 <= 0;
        product_pipeline_phase1_18 <= 0;
        product_pipeline_phase0_19 <= 0;
        product_pipeline_phase1_19 <= 0;
        product_pipeline_phase0_20 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase1_1 <= product_phase1_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase1_3 <= product_phase1_3;
          product_pipeline_phase0_4 <= product_phase0_4;
          product_pipeline_phase1_4 <= product_phase1_4;
          product_pipeline_phase0_5 <= product_phase0_5;
          product_pipeline_phase1_5 <= product_phase1_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase1_6 <= product_phase1_6;
          product_pipeline_phase0_7 <= product_phase0_7;
          product_pipeline_phase1_7 <= product_phase1_7;
          product_pipeline_phase0_8 <= product_phase0_8;
          product_pipeline_phase1_8 <= product_phase1_8;
          product_pipeline_phase0_9 <= product_phase0_9;
          product_pipeline_phase1_9 <= product_phase1_9;
          product_pipeline_phase0_10 <= product_phase0_10;
          product_pipeline_phase1_10 <= product_phase1_10;
          product_pipeline_phase0_11 <= product_phase0_11;
          product_pipeline_phase1_11 <= product_phase1_11;
          product_pipeline_phase0_12 <= product_phase0_12;
          product_pipeline_phase1_12 <= product_phase1_12;
          product_pipeline_phase0_13 <= product_phase0_13;
          product_pipeline_phase1_13 <= product_phase1_13;
          product_pipeline_phase0_14 <= product_phase0_14;
          product_pipeline_phase1_14 <= product_phase1_14;
          product_pipeline_phase0_15 <= product_phase0_15;
          product_pipeline_phase1_15 <= product_phase1_15;
          product_pipeline_phase0_16 <= product_phase0_16;
          product_pipeline_phase1_16 <= product_phase1_16;
          product_pipeline_phase0_17 <= product_phase0_17;
          product_pipeline_phase1_17 <= product_phase1_17;
          product_pipeline_phase0_18 <= product_phase0_18;
          product_pipeline_phase1_18 <= product_phase1_18;
          product_pipeline_phase0_19 <= product_phase0_19;
          product_pipeline_phase1_19 <= product_phase1_19;
          product_pipeline_phase0_20 <= product_phase0_20;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{2{product_pipeline_phase1_1[36]}}, product_pipeline_phase1_1});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{2{product_pipeline_phase1_2[36]}}, product_pipeline_phase1_2});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[38:0];

  assign add_signext_2 = product_pipeline_phase1_3;
  assign add_signext_3 = product_pipeline_phase1_4;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{1{add_temp_1[37]}}, add_temp_1});

  assign add_signext_4 = product_pipeline_phase1_5;
  assign add_signext_5 = product_pipeline_phase1_6;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector1[2] = $signed({{1{add_temp_2[37]}}, add_temp_2});

  assign add_signext_6 = product_pipeline_phase1_7;
  assign add_signext_7 = product_pipeline_phase1_8;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sumvector1[3] = $signed({{1{add_temp_3[37]}}, add_temp_3});

  assign add_signext_8 = product_pipeline_phase1_9;
  assign add_signext_9 = product_pipeline_phase1_10;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sumvector1[4] = $signed({{1{add_temp_4[37]}}, add_temp_4});

  assign add_signext_10 = product_pipeline_phase1_11;
  assign add_signext_11 = product_pipeline_phase1_12;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sumvector1[5] = $signed({{1{add_temp_5[37]}}, add_temp_5});

  assign add_signext_12 = product_pipeline_phase1_13;
  assign add_signext_13 = product_pipeline_phase1_14;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sumvector1[6] = $signed({{1{add_temp_6[37]}}, add_temp_6});

  assign add_signext_14 = product_pipeline_phase1_15;
  assign add_signext_15 = product_pipeline_phase1_16;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sumvector1[7] = $signed({{1{add_temp_7[37]}}, add_temp_7});

  assign add_signext_16 = product_pipeline_phase1_17;
  assign add_signext_17 = product_pipeline_phase1_18;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sumvector1[8] = $signed({{1{add_temp_8[37]}}, add_temp_8});

  assign add_signext_18 = product_pipeline_phase1_19;
  assign add_signext_19 = product_pipeline_phase0_1;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sumvector1[9] = $signed({{1{add_temp_9[37]}}, add_temp_9});

  assign add_signext_20 = product_pipeline_phase0_2;
  assign add_signext_21 = product_pipeline_phase0_3;
  assign add_temp_10 = add_signext_20 + add_signext_21;
  assign sumvector1[10] = $signed({{1{add_temp_10[37]}}, add_temp_10});

  assign add_signext_22 = product_pipeline_phase0_4;
  assign add_signext_23 = product_pipeline_phase0_5;
  assign add_temp_11 = add_signext_22 + add_signext_23;
  assign sumvector1[11] = $signed({{1{add_temp_11[37]}}, add_temp_11});

  assign add_signext_24 = product_pipeline_phase0_6;
  assign add_signext_25 = product_pipeline_phase0_7;
  assign add_temp_12 = add_signext_24 + add_signext_25;
  assign sumvector1[12] = $signed({{1{add_temp_12[37]}}, add_temp_12});

  assign add_signext_26 = product_pipeline_phase0_8;
  assign add_signext_27 = product_pipeline_phase0_9;
  assign add_temp_13 = add_signext_26 + add_signext_27;
  assign sumvector1[13] = $signed({{1{add_temp_13[37]}}, add_temp_13});

  assign add_signext_28 = product_pipeline_phase0_10;
  assign add_signext_29 = product_pipeline_phase0_11;
  assign add_temp_14 = add_signext_28 + add_signext_29;
  assign sumvector1[14] = $signed({{1{add_temp_14[37]}}, add_temp_14});

  assign add_signext_30 = product_pipeline_phase0_12;
  assign add_signext_31 = product_pipeline_phase0_13;
  assign add_temp_15 = add_signext_30 + add_signext_31;
  assign sumvector1[15] = $signed({{1{add_temp_15[37]}}, add_temp_15});

  assign add_signext_32 = product_pipeline_phase0_14;
  assign add_signext_33 = product_pipeline_phase0_15;
  assign add_temp_16 = add_signext_32 + add_signext_33;
  assign sumvector1[16] = $signed({{1{add_temp_16[37]}}, add_temp_16});

  assign add_signext_34 = product_pipeline_phase0_16;
  assign add_signext_35 = product_pipeline_phase0_17;
  assign add_temp_17 = add_signext_34 + add_signext_35;
  assign sumvector1[17] = $signed({{1{add_temp_17[37]}}, add_temp_17});

  assign add_signext_36 = product_pipeline_phase0_18;
  assign add_signext_37 = product_pipeline_phase0_19;
  assign add_temp_18 = add_signext_36 + add_signext_37;
  assign sumvector1[18] = $signed({{1{add_temp_18[37]}}, add_temp_18});

  assign sumvector1[19] = $signed({{2{product_pipeline_phase0_20[36]}}, product_pipeline_phase0_20});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
        sumdelay_pipeline1[13] <= 0;
        sumdelay_pipeline1[14] <= 0;
        sumdelay_pipeline1[15] <= 0;
        sumdelay_pipeline1[16] <= 0;
        sumdelay_pipeline1[17] <= 0;
        sumdelay_pipeline1[18] <= 0;
        sumdelay_pipeline1[19] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
          sumdelay_pipeline1[13] <= sumvector1[13];
          sumdelay_pipeline1[14] <= sumvector1[14];
          sumdelay_pipeline1[15] <= sumvector1[15];
          sumdelay_pipeline1[16] <= sumvector1[16];
          sumdelay_pipeline1[17] <= sumvector1[17];
          sumdelay_pipeline1[18] <= sumvector1[18];
          sumdelay_pipeline1[19] <= sumvector1[19];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_38 = sumdelay_pipeline1[0];
  assign add_signext_39 = sumdelay_pipeline1[1];
  assign add_temp_19 = add_signext_38 + add_signext_39;
  assign sumvector2[0] = add_temp_19[38:0];

  assign add_signext_40 = sumdelay_pipeline1[2];
  assign add_signext_41 = sumdelay_pipeline1[3];
  assign add_temp_20 = add_signext_40 + add_signext_41;
  assign sumvector2[1] = add_temp_20[38:0];

  assign add_signext_42 = sumdelay_pipeline1[4];
  assign add_signext_43 = sumdelay_pipeline1[5];
  assign add_temp_21 = add_signext_42 + add_signext_43;
  assign sumvector2[2] = add_temp_21[38:0];

  assign add_signext_44 = sumdelay_pipeline1[6];
  assign add_signext_45 = sumdelay_pipeline1[7];
  assign add_temp_22 = add_signext_44 + add_signext_45;
  assign sumvector2[3] = add_temp_22[38:0];

  assign add_signext_46 = sumdelay_pipeline1[8];
  assign add_signext_47 = sumdelay_pipeline1[9];
  assign add_temp_23 = add_signext_46 + add_signext_47;
  assign sumvector2[4] = add_temp_23[38:0];

  assign add_signext_48 = sumdelay_pipeline1[10];
  assign add_signext_49 = sumdelay_pipeline1[11];
  assign add_temp_24 = add_signext_48 + add_signext_49;
  assign sumvector2[5] = add_temp_24[38:0];

  assign add_signext_50 = sumdelay_pipeline1[12];
  assign add_signext_51 = sumdelay_pipeline1[13];
  assign add_temp_25 = add_signext_50 + add_signext_51;
  assign sumvector2[6] = add_temp_25[38:0];

  assign add_signext_52 = sumdelay_pipeline1[14];
  assign add_signext_53 = sumdelay_pipeline1[15];
  assign add_temp_26 = add_signext_52 + add_signext_53;
  assign sumvector2[7] = add_temp_26[38:0];

  assign add_signext_54 = sumdelay_pipeline1[16];
  assign add_signext_55 = sumdelay_pipeline1[17];
  assign add_temp_27 = add_signext_54 + add_signext_55;
  assign sumvector2[8] = add_temp_27[38:0];

  assign add_signext_56 = sumdelay_pipeline1[18];
  assign add_signext_57 = sumdelay_pipeline1[19];
  assign add_temp_28 = add_signext_56 + add_signext_57;
  assign sumvector2[9] = add_temp_28[38:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
        sumdelay_pipeline2[7] <= 0;
        sumdelay_pipeline2[8] <= 0;
        sumdelay_pipeline2[9] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
          sumdelay_pipeline2[7] <= sumvector2[7];
          sumdelay_pipeline2[8] <= sumvector2[8];
          sumdelay_pipeline2[9] <= sumvector2[9];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_58 = sumdelay_pipeline2[0];
  assign add_signext_59 = sumdelay_pipeline2[1];
  assign add_temp_29 = add_signext_58 + add_signext_59;
  assign sumvector3[0] = add_temp_29[38:0];

  assign add_signext_60 = sumdelay_pipeline2[2];
  assign add_signext_61 = sumdelay_pipeline2[3];
  assign add_temp_30 = add_signext_60 + add_signext_61;
  assign sumvector3[1] = add_temp_30[38:0];

  assign add_signext_62 = sumdelay_pipeline2[4];
  assign add_signext_63 = sumdelay_pipeline2[5];
  assign add_temp_31 = add_signext_62 + add_signext_63;
  assign sumvector3[2] = add_temp_31[38:0];

  assign add_signext_64 = sumdelay_pipeline2[6];
  assign add_signext_65 = sumdelay_pipeline2[7];
  assign add_temp_32 = add_signext_64 + add_signext_65;
  assign sumvector3[3] = add_temp_32[38:0];

  assign add_signext_66 = sumdelay_pipeline2[8];
  assign add_signext_67 = sumdelay_pipeline2[9];
  assign add_temp_33 = add_signext_66 + add_signext_67;
  assign sumvector3[4] = add_temp_33[38:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
        sumdelay_pipeline3[4] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
          sumdelay_pipeline3[4] <= sumvector3[4];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_68 = sumdelay_pipeline3[0];
  assign add_signext_69 = sumdelay_pipeline3[1];
  assign add_temp_34 = add_signext_68 + add_signext_69;
  assign sumvector4[0] = add_temp_34[38:0];

  assign add_signext_70 = sumdelay_pipeline3[2];
  assign add_signext_71 = sumdelay_pipeline3[3];
  assign add_temp_35 = add_signext_70 + add_signext_71;
  assign sumvector4[1] = add_temp_35[38:0];

  assign sumvector4[2] = sumdelay_pipeline3[4];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
        sumdelay_pipeline4[2] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
          sumdelay_pipeline4[2] <= sumvector4[2];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_72 = sumdelay_pipeline4[0];
  assign add_signext_73 = sumdelay_pipeline4[1];
  assign add_temp_36 = add_signext_72 + add_signext_73;
  assign sumvector5[0] = add_temp_36[38:0];

  assign sumvector5[1] = sumdelay_pipeline4[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process5
      if (reset == 1'b1) begin
        sumdelay_pipeline5[0] <= 0;
        sumdelay_pipeline5[1] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline5[0] <= sumvector5[0];
          sumdelay_pipeline5[1] <= sumvector5[1];
        end
      end
    end // sumdelay_pipeline_process5

  assign add_signext_74 = sumdelay_pipeline5[0];
  assign add_signext_75 = sumdelay_pipeline5[1];
  assign add_temp_37 = add_signext_74 + add_signext_75;
  assign sum6 = add_temp_37[38:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
        ce_delayline9 <= 1'b0;
        ce_delayline10 <= 1'b0;
        ce_delayline11 <= 1'b0;
        ce_delayline12 <= 1'b0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          ce_delayline1 <= clk_enable_stage2;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
          ce_delayline9 <= ce_delayline8;
          ce_delayline10 <= ce_delayline9;
          ce_delayline11 <= ce_delayline10;
          ce_delayline12 <= ce_delayline11;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline12 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          output_register <= sum6;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out_stage2 = ce_gated;
  assign filter_out_stage2 = output_register;
endmodule  // CIC_R100_M1_N5_CFIR_stage2
