// -------------------------------------------------------------
//
// Module: CIC_R64_M1_N8
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-15 19:46:18
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CIC_R64_M1_N8
// TargetDirectory: c:\data
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
// CastBeforeSum: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure        : Cascaded Integrator-Comb Decimator
// Decimation Factor       : 64
// Differential Delay      : 1
// Number of Sections      : 8
// Stable                  : Yes
// Linear Phase            : Yes (Type 1)
//
// Input                   : s18,0
// Output                  : s32,-34
// Filter Internals        : Minimum Word Lengths
//   Integrator Section 1  : s66,0
//   Integrator Section 2  : s66,0
//   Integrator Section 3  : s66,0
//   Integrator Section 4  : s66,0
//   Integrator Section 5  : s57,-9
//   Integrator Section 6  : s52,-14
//   Integrator Section 7  : s48,-18
//   Integrator Section 8  : s43,-23
//   Comb Section 1        : s41,-25
//   Comb Section 2        : s40,-26
//   Comb Section 3        : s39,-27
//   Comb Section 4        : s38,-28
//   Comb Section 5        : s38,-28
//   Comb Section 6        : s37,-29
//   Comb Section 7        : s36,-30
//   Comb Section 8        : s35,-31
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 16
// Number of States      : 16
// MultPerInputSample    : 0
// AddPerInputSample     : 8.125
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC_R64_M1_N8 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [17:0] filter_in; //sfix18
  output  signed [31:0] filter_out; //sfix32_E34
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: CIC_R64_M1_N8
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [5:0] cur_count; // ufix6
  wire phase_1; // boolean
  wire ce_delayline; // boolean
  reg  int_delay_pipe [0:6] ; // boolean
  wire ce_gated; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [17:0] input_register; // sfix18
  //   -- Section 1 Signals 
  wire signed [17:0] section_in1; // sfix18
  wire signed [65:0] section_cast1; // sfix66
  wire signed [65:0] sum1; // sfix66
  reg  signed [65:0] section_out1; // sfix66
  wire signed [65:0] add_cast; // sfix66
  wire signed [65:0] add_cast_1; // sfix66
  wire signed [66:0] add_temp; // sfix67
  //   -- Section 2 Signals 
  wire signed [65:0] section_in2; // sfix66
  wire signed [65:0] sum2; // sfix66
  reg  signed [65:0] section_out2; // sfix66
  wire signed [65:0] add_cast_2; // sfix66
  wire signed [65:0] add_cast_3; // sfix66
  wire signed [66:0] add_temp_1; // sfix67
  //   -- Section 3 Signals 
  wire signed [65:0] section_in3; // sfix66
  wire signed [65:0] sum3; // sfix66
  reg  signed [65:0] section_out3; // sfix66
  wire signed [65:0] add_cast_4; // sfix66
  wire signed [65:0] add_cast_5; // sfix66
  wire signed [66:0] add_temp_2; // sfix67
  //   -- Section 4 Signals 
  wire signed [65:0] section_in4; // sfix66
  wire signed [65:0] sum4; // sfix66
  reg  signed [65:0] section_out4; // sfix66
  wire signed [65:0] add_cast_6; // sfix66
  wire signed [65:0] add_cast_7; // sfix66
  wire signed [66:0] add_temp_3; // sfix67
  //   -- Section 5 Signals 
  wire signed [65:0] section_in5; // sfix66
  wire signed [56:0] section_cast5; // sfix57_E9
  wire signed [56:0] sum5; // sfix57_E9
  reg  signed [56:0] section_out5; // sfix57_E9
  wire signed [56:0] add_cast_8; // sfix57_E9
  wire signed [56:0] add_cast_9; // sfix57_E9
  wire signed [57:0] add_temp_4; // sfix58_E9
  //   -- Section 6 Signals 
  wire signed [56:0] section_in6; // sfix57_E9
  wire signed [51:0] section_cast6; // sfix52_E14
  wire signed [51:0] sum6; // sfix52_E14
  reg  signed [51:0] section_out6; // sfix52_E14
  wire signed [51:0] add_cast_10; // sfix52_E14
  wire signed [51:0] add_cast_11; // sfix52_E14
  wire signed [52:0] add_temp_5; // sfix53_E14
  //   -- Section 7 Signals 
  wire signed [51:0] section_in7; // sfix52_E14
  wire signed [47:0] section_cast7; // sfix48_E18
  wire signed [47:0] sum7; // sfix48_E18
  reg  signed [47:0] section_out7; // sfix48_E18
  wire signed [47:0] add_cast_12; // sfix48_E18
  wire signed [47:0] add_cast_13; // sfix48_E18
  wire signed [48:0] add_temp_6; // sfix49_E18
  //   -- Section 8 Signals 
  wire signed [47:0] section_in8; // sfix48_E18
  wire signed [42:0] section_cast8; // sfix43_E23
  wire signed [42:0] sum8; // sfix43_E23
  reg  signed [42:0] section_out8; // sfix43_E23
  wire signed [42:0] add_cast_14; // sfix43_E23
  wire signed [42:0] add_cast_15; // sfix43_E23
  wire signed [43:0] add_temp_7; // sfix44_E23
  //   -- Section 9 Signals 
  wire signed [42:0] section_in9; // sfix43_E23
  wire signed [40:0] section_cast9; // sfix41_E25
  reg  signed [40:0] diff1; // sfix41_E25
  wire signed [40:0] section_out9; // sfix41_E25
  wire signed [40:0] sub_cast; // sfix41_E25
  wire signed [40:0] sub_cast_1; // sfix41_E25
  wire signed [41:0] sub_temp; // sfix42_E25
  reg  signed [40:0] cic_pipeline9; // sfix41_E25
  //   -- Section 10 Signals 
  wire signed [40:0] section_in10; // sfix41_E25
  wire signed [39:0] section_cast10; // sfix40_E26
  reg  signed [39:0] diff2; // sfix40_E26
  wire signed [39:0] section_out10; // sfix40_E26
  wire signed [39:0] sub_cast_2; // sfix40_E26
  wire signed [39:0] sub_cast_3; // sfix40_E26
  wire signed [40:0] sub_temp_1; // sfix41_E26
  reg  signed [39:0] cic_pipeline10; // sfix40_E26
  //   -- Section 11 Signals 
  wire signed [39:0] section_in11; // sfix40_E26
  wire signed [38:0] section_cast11; // sfix39_E27
  reg  signed [38:0] diff3; // sfix39_E27
  wire signed [38:0] section_out11; // sfix39_E27
  wire signed [38:0] sub_cast_4; // sfix39_E27
  wire signed [38:0] sub_cast_5; // sfix39_E27
  wire signed [39:0] sub_temp_2; // sfix40_E27
  reg  signed [38:0] cic_pipeline11; // sfix39_E27
  //   -- Section 12 Signals 
  wire signed [38:0] section_in12; // sfix39_E27
  wire signed [37:0] section_cast12; // sfix38_E28
  reg  signed [37:0] diff4; // sfix38_E28
  wire signed [37:0] section_out12; // sfix38_E28
  wire signed [37:0] sub_cast_6; // sfix38_E28
  wire signed [37:0] sub_cast_7; // sfix38_E28
  wire signed [38:0] sub_temp_3; // sfix39_E28
  reg  signed [37:0] cic_pipeline12; // sfix38_E28
  //   -- Section 13 Signals 
  wire signed [37:0] section_in13; // sfix38_E28
  reg  signed [37:0] diff5; // sfix38_E28
  wire signed [37:0] section_out13; // sfix38_E28
  wire signed [37:0] sub_cast_8; // sfix38_E28
  wire signed [37:0] sub_cast_9; // sfix38_E28
  wire signed [38:0] sub_temp_4; // sfix39_E28
  reg  signed [37:0] cic_pipeline13; // sfix38_E28
  //   -- Section 14 Signals 
  wire signed [37:0] section_in14; // sfix38_E28
  wire signed [36:0] section_cast14; // sfix37_E29
  reg  signed [36:0] diff6; // sfix37_E29
  wire signed [36:0] section_out14; // sfix37_E29
  wire signed [36:0] sub_cast_10; // sfix37_E29
  wire signed [36:0] sub_cast_11; // sfix37_E29
  wire signed [37:0] sub_temp_5; // sfix38_E29
  reg  signed [36:0] cic_pipeline14; // sfix37_E29
  //   -- Section 15 Signals 
  wire signed [36:0] section_in15; // sfix37_E29
  wire signed [35:0] section_cast15; // sfix36_E30
  reg  signed [35:0] diff7; // sfix36_E30
  wire signed [35:0] section_out15; // sfix36_E30
  wire signed [35:0] sub_cast_12; // sfix36_E30
  wire signed [35:0] sub_cast_13; // sfix36_E30
  wire signed [36:0] sub_temp_6; // sfix37_E30
  reg  signed [35:0] cic_pipeline15; // sfix36_E30
  //   -- Section 16 Signals 
  wire signed [35:0] section_in16; // sfix36_E30
  wire signed [34:0] section_cast16; // sfix35_E31
  reg  signed [34:0] diff8; // sfix35_E31
  wire signed [34:0] section_out16; // sfix35_E31
  wire signed [34:0] sub_cast_14; // sfix35_E31
  wire signed [34:0] sub_cast_15; // sfix35_E31
  wire signed [35:0] sub_temp_7; // sfix36_E31
  wire signed [31:0] output_typeconvert; // sfix32_E34
  //   
  reg  signed [31:0] output_register; // sfix32_E34

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 6'b000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 6'b111111) begin
            cur_count <= 6'b000000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 6'b000001 && clk_enable == 1'b1)? 1 : 0;

  always @( posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        int_delay_pipe[0] <= 1'b0;
        int_delay_pipe[1] <= 1'b0;
        int_delay_pipe[2] <= 1'b0;
        int_delay_pipe[3] <= 1'b0;
        int_delay_pipe[4] <= 1'b0;
        int_delay_pipe[5] <= 1'b0;
        int_delay_pipe[6] <= 1'b0;
      end
      else begin
        if (phase_1 == 1'b1) begin
        int_delay_pipe[0] <= clk_enable;
        int_delay_pipe[1] <= int_delay_pipe[0];
        int_delay_pipe[2] <= int_delay_pipe[1];
        int_delay_pipe[3] <= int_delay_pipe[2];
        int_delay_pipe[4] <= int_delay_pipe[3];
        int_delay_pipe[5] <= int_delay_pipe[4];
        int_delay_pipe[6] <= int_delay_pipe[5];
        end
      end
    end // ce_delay

    assign ce_delayline = int_delay_pipe[6];
  assign ce_gated =  ce_delayline & phase_1;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= ce_gated;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({{48{section_in1[17]}}, section_in1});

  assign add_cast = section_cast1;
  assign add_cast_1 = section_out1;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign add_cast_2 = section_in2;
  assign add_cast_3 = section_out2;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign add_cast_4 = section_in3;
  assign add_cast_5 = section_out3;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Integrator ------------------

  assign section_in4 = section_out3;

  assign add_cast_6 = section_in4;
  assign add_cast_7 = section_out4;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section4
      if (reset == 1'b1) begin
        section_out4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out4 <= sum4;
        end
      end
    end // integrator_delay_section4

  //   ------------------ Section # 5 : Integrator ------------------

  assign section_in5 = section_out4;

  assign section_cast5 = section_in5[65:9];

  assign add_cast_8 = section_cast5;
  assign add_cast_9 = section_out5;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[56:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section5
      if (reset == 1'b1) begin
        section_out5 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out5 <= sum5;
        end
      end
    end // integrator_delay_section5

  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = section_out5;

  assign section_cast6 = section_in6[56:5];

  assign add_cast_10 = section_cast6;
  assign add_cast_11 = section_out6;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[51:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out6 <= sum6;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Integrator ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = section_in7[51:4];

  assign add_cast_12 = section_cast7;
  assign add_cast_13 = section_out7;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum7 = add_temp_6[47:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section7
      if (reset == 1'b1) begin
        section_out7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out7 <= sum7;
        end
      end
    end // integrator_delay_section7

  //   ------------------ Section # 8 : Integrator ------------------

  assign section_in8 = section_out7;

  assign section_cast8 = section_in8[47:5];

  assign add_cast_14 = section_cast8;
  assign add_cast_15 = section_out8;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum8 = add_temp_7[42:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section8
      if (reset == 1'b1) begin
        section_out8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out8 <= sum8;
        end
      end
    end // integrator_delay_section8

  //   ------------------ Section # 9 : Comb ------------------

  assign section_in9 = section_out8;

  assign section_cast9 = section_in9[42:2];

  assign sub_cast = section_cast9;
  assign sub_cast_1 = diff1;
  assign sub_temp = sub_cast - sub_cast_1;
  assign section_out9 = sub_temp[40:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section9
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff1 <= section_cast9;
        end
      end
    end // comb_delay_section9

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section9
      if (reset == 1'b1) begin
        cic_pipeline9 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline9 <= section_out9;
        end
      end
    end // cic_pipeline_process_section9

  //   ------------------ Section # 10 : Comb ------------------

  assign section_in10 = cic_pipeline9;

  assign section_cast10 = section_in10[40:1];

  assign sub_cast_2 = section_cast10;
  assign sub_cast_3 = diff2;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign section_out10 = sub_temp_1[39:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section10
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff2 <= section_cast10;
        end
      end
    end // comb_delay_section10

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section10
      if (reset == 1'b1) begin
        cic_pipeline10 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline10 <= section_out10;
        end
      end
    end // cic_pipeline_process_section10

  //   ------------------ Section # 11 : Comb ------------------

  assign section_in11 = cic_pipeline10;

  assign section_cast11 = section_in11[39:1];

  assign sub_cast_4 = section_cast11;
  assign sub_cast_5 = diff3;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign section_out11 = sub_temp_2[38:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section11
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff3 <= section_cast11;
        end
      end
    end // comb_delay_section11

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section11
      if (reset == 1'b1) begin
        cic_pipeline11 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline11 <= section_out11;
        end
      end
    end // cic_pipeline_process_section11

  //   ------------------ Section # 12 : Comb ------------------

  assign section_in12 = cic_pipeline11;

  assign section_cast12 = section_in12[38:1];

  assign sub_cast_6 = section_cast12;
  assign sub_cast_7 = diff4;
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign section_out12 = sub_temp_3[37:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section12
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff4 <= section_cast12;
        end
      end
    end // comb_delay_section12

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section12
      if (reset == 1'b1) begin
        cic_pipeline12 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline12 <= section_out12;
        end
      end
    end // cic_pipeline_process_section12

  //   ------------------ Section # 13 : Comb ------------------

  assign section_in13 = cic_pipeline12;

  assign sub_cast_8 = section_in13;
  assign sub_cast_9 = diff5;
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign section_out13 = sub_temp_4[37:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section13
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff5 <= section_in13;
        end
      end
    end // comb_delay_section13

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section13
      if (reset == 1'b1) begin
        cic_pipeline13 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline13 <= section_out13;
        end
      end
    end // cic_pipeline_process_section13

  //   ------------------ Section # 14 : Comb ------------------

  assign section_in14 = cic_pipeline13;

  assign section_cast14 = section_in14[37:1];

  assign sub_cast_10 = section_cast14;
  assign sub_cast_11 = diff6;
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign section_out14 = sub_temp_5[36:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section14
      if (reset == 1'b1) begin
        diff6 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff6 <= section_cast14;
        end
      end
    end // comb_delay_section14

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section14
      if (reset == 1'b1) begin
        cic_pipeline14 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline14 <= section_out14;
        end
      end
    end // cic_pipeline_process_section14

  //   ------------------ Section # 15 : Comb ------------------

  assign section_in15 = cic_pipeline14;

  assign section_cast15 = section_in15[36:1];

  assign sub_cast_12 = section_cast15;
  assign sub_cast_13 = diff7;
  assign sub_temp_6 = sub_cast_12 - sub_cast_13;
  assign section_out15 = sub_temp_6[35:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section15
      if (reset == 1'b1) begin
        diff7 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff7 <= section_cast15;
        end
      end
    end // comb_delay_section15

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section15
      if (reset == 1'b1) begin
        cic_pipeline15 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline15 <= section_out15;
        end
      end
    end // cic_pipeline_process_section15

  //   ------------------ Section # 16 : Comb ------------------

  assign section_in16 = cic_pipeline15;

  assign section_cast16 = section_in16[35:1];

  assign sub_cast_14 = section_cast16;
  assign sub_cast_15 = diff8;
  assign sub_temp_7 = sub_cast_14 - sub_cast_15;
  assign section_out16 = sub_temp_7[34:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section16
      if (reset == 1'b1) begin
        diff8 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff8 <= section_cast16;
        end
      end
    end // comb_delay_section16

  assign output_typeconvert = section_out16[34:3];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // CIC_R64_M1_N8
