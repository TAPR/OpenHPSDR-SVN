// -------------------------------------------------------------
//
// Module: CASCADE_D260_stage2
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-19 13:16:48
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CASCADE_D260_stage2
// TargetDirectory: c:\data
// InputPort: filter_in_stage2
// OutputPort: filter_out_stage2
// AddInputRegister: Off
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
// ClockEnableInputPort: clk_enable_stage2
// ClockEnableOutputPort: ce_out_stage2
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure         : Cascaded Integrator-Comb Decimator
// Decimation Factor        : 4
// Differential Delay       : 1
// Number of Sections       : 10
// Stable                   : Yes
// Linear Phase             : Yes (Type 1)
//
// Input                    : s18,15
// Output                   : s20,-3
// Filter Internals         : Minimum Word Lengths
//   Integrator Section 1   : s38,15
//   Integrator Section 2   : s38,15
//   Integrator Section 3   : s37,14
//   Integrator Section 4   : s36,13
//   Integrator Section 5   : s35,12
//   Integrator Section 6   : s34,11
//   Integrator Section 7   : s33,10
//   Integrator Section 8   : s32,9
//   Integrator Section 9   : s32,9
//   Integrator Section 10  : s31,8
//   Comb Section 1         : s31,8
//   Comb Section 2         : s30,7
//   Comb Section 3         : s29,6
//   Comb Section 4         : s29,6
//   Comb Section 5         : s28,5
//   Comb Section 6         : s27,4
//   Comb Section 7         : s26,3
//   Comb Section 8         : s25,2
//   Comb Section 9         : s24,1
//   Comb Section 10        : s23,0
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 20
// Number of States      : 20
// MultPerInputSample    : 0
// AddPerInputSample     : 12.5
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CASCADE_D260_stage2 
               (
                clk,
                clk_enable_stage2,
                reset,
                filter_in_stage2,
                filter_out_stage2,
                ce_out_stage2
                );

  input   clk; 
  input   clk_enable_stage2; 
  input   reset; 
  input   signed [17:0] filter_in_stage2; //sfix18_En15
  output  signed [19:0] filter_out_stage2; //sfix20_E3
  output  ce_out_stage2; 

////////////////////////////////////////////////////////////////
//Module Architecture: CASCADE_D260_stage2
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [1:0] cur_count; // ufix2
  wire phase_0; // boolean
  wire ce_delayline; // boolean
  reg  int_delay_pipe [0:8] ; // boolean
  wire ce_gated; // boolean
  reg  ce_out_reg; // boolean
  wire signed [17:0] input_typeconvert; // sfix18_En15
  //   -- Section 1 Signals 
  wire signed [17:0] section_in1; // sfix18_En15
  wire signed [37:0] section_cast1; // sfix38_En15
  wire signed [37:0] sum1; // sfix38_En15
  reg  signed [37:0] section_out1; // sfix38_En15
  wire signed [37:0] add_signext; // sfix38_En15
  wire signed [37:0] add_signext_1; // sfix38_En15
  wire signed [38:0] add_temp; // sfix39_En15
  //   -- Section 2 Signals 
  wire signed [37:0] section_in2; // sfix38_En15
  wire signed [37:0] sum2; // sfix38_En15
  reg  signed [37:0] section_out2; // sfix38_En15
  wire signed [37:0] add_signext_2; // sfix38_En15
  wire signed [37:0] add_signext_3; // sfix38_En15
  wire signed [38:0] add_temp_1; // sfix39_En15
  //   -- Section 3 Signals 
  wire signed [37:0] section_in3; // sfix38_En15
  wire signed [36:0] section_cast3; // sfix37_En14
  wire signed [36:0] sum3; // sfix37_En14
  reg  signed [36:0] section_out3; // sfix37_En14
  wire signed [36:0] add_signext_4; // sfix37_En14
  wire signed [36:0] add_signext_5; // sfix37_En14
  wire signed [37:0] add_temp_2; // sfix38_En14
  //   -- Section 4 Signals 
  wire signed [36:0] section_in4; // sfix37_En14
  wire signed [35:0] section_cast4; // sfix36_En13
  wire signed [35:0] sum4; // sfix36_En13
  reg  signed [35:0] section_out4; // sfix36_En13
  wire signed [35:0] add_signext_6; // sfix36_En13
  wire signed [35:0] add_signext_7; // sfix36_En13
  wire signed [36:0] add_temp_3; // sfix37_En13
  //   -- Section 5 Signals 
  wire signed [35:0] section_in5; // sfix36_En13
  wire signed [34:0] section_cast5; // sfix35_En12
  wire signed [34:0] sum5; // sfix35_En12
  reg  signed [34:0] section_out5; // sfix35_En12
  wire signed [34:0] add_signext_8; // sfix35_En12
  wire signed [34:0] add_signext_9; // sfix35_En12
  wire signed [35:0] add_temp_4; // sfix36_En12
  //   -- Section 6 Signals 
  wire signed [34:0] section_in6; // sfix35_En12
  wire signed [33:0] section_cast6; // sfix34_En11
  wire signed [33:0] sum6; // sfix34_En11
  reg  signed [33:0] section_out6; // sfix34_En11
  wire signed [33:0] add_signext_10; // sfix34_En11
  wire signed [33:0] add_signext_11; // sfix34_En11
  wire signed [34:0] add_temp_5; // sfix35_En11
  //   -- Section 7 Signals 
  wire signed [33:0] section_in7; // sfix34_En11
  wire signed [32:0] section_cast7; // sfix33_En10
  wire signed [32:0] sum7; // sfix33_En10
  reg  signed [32:0] section_out7; // sfix33_En10
  wire signed [32:0] add_signext_12; // sfix33_En10
  wire signed [32:0] add_signext_13; // sfix33_En10
  wire signed [33:0] add_temp_6; // sfix34_En10
  //   -- Section 8 Signals 
  wire signed [32:0] section_in8; // sfix33_En10
  wire signed [31:0] section_cast8; // sfix32_En9
  wire signed [31:0] sum8; // sfix32_En9
  reg  signed [31:0] section_out8; // sfix32_En9
  wire signed [31:0] add_signext_14; // sfix32_En9
  wire signed [31:0] add_signext_15; // sfix32_En9
  wire signed [32:0] add_temp_7; // sfix33_En9
  //   -- Section 9 Signals 
  wire signed [31:0] section_in9; // sfix32_En9
  wire signed [31:0] sum9; // sfix32_En9
  reg  signed [31:0] section_out9; // sfix32_En9
  wire signed [31:0] add_signext_16; // sfix32_En9
  wire signed [31:0] add_signext_17; // sfix32_En9
  wire signed [32:0] add_temp_8; // sfix33_En9
  //   -- Section 10 Signals 
  wire signed [31:0] section_in10; // sfix32_En9
  wire signed [30:0] section_cast10; // sfix31_En8
  wire signed [30:0] sum10; // sfix31_En8
  reg  signed [30:0] section_out10; // sfix31_En8
  wire signed [30:0] add_signext_18; // sfix31_En8
  wire signed [30:0] add_signext_19; // sfix31_En8
  wire signed [31:0] add_temp_9; // sfix32_En8
  //   -- Section 11 Signals 
  wire signed [30:0] section_in11; // sfix31_En8
  reg  signed [30:0] diff1; // sfix31_En8
  wire signed [30:0] section_out11; // sfix31_En8
  wire signed [30:0] sub_signext; // sfix31_En8
  wire signed [30:0] sub_signext_1; // sfix31_En8
  wire signed [31:0] sub_temp; // sfix32_En8
  reg  signed [30:0] cic_pipeline11; // sfix31_En8
  //   -- Section 12 Signals 
  wire signed [30:0] section_in12; // sfix31_En8
  wire signed [29:0] section_cast12; // sfix30_En7
  reg  signed [29:0] diff2; // sfix30_En7
  wire signed [29:0] section_out12; // sfix30_En7
  wire signed [29:0] sub_signext_2; // sfix30_En7
  wire signed [29:0] sub_signext_3; // sfix30_En7
  wire signed [30:0] sub_temp_1; // sfix31_En7
  reg  signed [29:0] cic_pipeline12; // sfix30_En7
  //   -- Section 13 Signals 
  wire signed [29:0] section_in13; // sfix30_En7
  wire signed [28:0] section_cast13; // sfix29_En6
  reg  signed [28:0] diff3; // sfix29_En6
  wire signed [28:0] section_out13; // sfix29_En6
  wire signed [28:0] sub_signext_4; // sfix29_En6
  wire signed [28:0] sub_signext_5; // sfix29_En6
  wire signed [29:0] sub_temp_2; // sfix30_En6
  reg  signed [28:0] cic_pipeline13; // sfix29_En6
  //   -- Section 14 Signals 
  wire signed [28:0] section_in14; // sfix29_En6
  reg  signed [28:0] diff4; // sfix29_En6
  wire signed [28:0] section_out14; // sfix29_En6
  wire signed [28:0] sub_signext_6; // sfix29_En6
  wire signed [28:0] sub_signext_7; // sfix29_En6
  wire signed [29:0] sub_temp_3; // sfix30_En6
  reg  signed [28:0] cic_pipeline14; // sfix29_En6
  //   -- Section 15 Signals 
  wire signed [28:0] section_in15; // sfix29_En6
  wire signed [27:0] section_cast15; // sfix28_En5
  reg  signed [27:0] diff5; // sfix28_En5
  wire signed [27:0] section_out15; // sfix28_En5
  wire signed [27:0] sub_signext_8; // sfix28_En5
  wire signed [27:0] sub_signext_9; // sfix28_En5
  wire signed [28:0] sub_temp_4; // sfix29_En5
  reg  signed [27:0] cic_pipeline15; // sfix28_En5
  //   -- Section 16 Signals 
  wire signed [27:0] section_in16; // sfix28_En5
  wire signed [26:0] section_cast16; // sfix27_En4
  reg  signed [26:0] diff6; // sfix27_En4
  wire signed [26:0] section_out16; // sfix27_En4
  wire signed [26:0] sub_signext_10; // sfix27_En4
  wire signed [26:0] sub_signext_11; // sfix27_En4
  wire signed [27:0] sub_temp_5; // sfix28_En4
  reg  signed [26:0] cic_pipeline16; // sfix27_En4
  //   -- Section 17 Signals 
  wire signed [26:0] section_in17; // sfix27_En4
  wire signed [25:0] section_cast17; // sfix26_En3
  reg  signed [25:0] diff7; // sfix26_En3
  wire signed [25:0] section_out17; // sfix26_En3
  wire signed [25:0] sub_signext_12; // sfix26_En3
  wire signed [25:0] sub_signext_13; // sfix26_En3
  wire signed [26:0] sub_temp_6; // sfix27_En3
  reg  signed [25:0] cic_pipeline17; // sfix26_En3
  //   -- Section 18 Signals 
  wire signed [25:0] section_in18; // sfix26_En3
  wire signed [24:0] section_cast18; // sfix25_En2
  reg  signed [24:0] diff8; // sfix25_En2
  wire signed [24:0] section_out18; // sfix25_En2
  wire signed [24:0] sub_signext_14; // sfix25_En2
  wire signed [24:0] sub_signext_15; // sfix25_En2
  wire signed [25:0] sub_temp_7; // sfix26_En2
  reg  signed [24:0] cic_pipeline18; // sfix25_En2
  //   -- Section 19 Signals 
  wire signed [24:0] section_in19; // sfix25_En2
  wire signed [23:0] section_cast19; // sfix24_En1
  reg  signed [23:0] diff9; // sfix24_En1
  wire signed [23:0] section_out19; // sfix24_En1
  wire signed [23:0] sub_signext_16; // sfix24_En1
  wire signed [23:0] sub_signext_17; // sfix24_En1
  wire signed [24:0] sub_temp_8; // sfix25_En1
  reg  signed [23:0] cic_pipeline19; // sfix24_En1
  //   -- Section 20 Signals 
  wire signed [23:0] section_in20; // sfix24_En1
  wire signed [22:0] section_cast20; // sfix23
  reg  signed [22:0] diff10; // sfix23
  wire signed [22:0] section_out20; // sfix23
  wire signed [22:0] sub_signext_18; // sfix23
  wire signed [22:0] sub_signext_19; // sfix23
  wire signed [23:0] sub_temp_9; // sfix24
  wire signed [19:0] output_typeconvert; // sfix20_E3
  //   
  reg  signed [19:0] output_register; // sfix20_E3

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 2'b00;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          if (cur_count == 2'b11) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_0 = (cur_count == 2'b00 && clk_enable_stage2 == 1'b1)? 1 : 0;

  always @( posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        int_delay_pipe[0] <= 1'b0;
        int_delay_pipe[1] <= 1'b0;
        int_delay_pipe[2] <= 1'b0;
        int_delay_pipe[3] <= 1'b0;
        int_delay_pipe[4] <= 1'b0;
        int_delay_pipe[5] <= 1'b0;
        int_delay_pipe[6] <= 1'b0;
        int_delay_pipe[7] <= 1'b0;
        int_delay_pipe[8] <= 1'b0;
      end
      else begin
        if (phase_0 == 1'b1) begin
        int_delay_pipe[0] <= clk_enable_stage2;
        int_delay_pipe[1] <= int_delay_pipe[0];
        int_delay_pipe[2] <= int_delay_pipe[1];
        int_delay_pipe[3] <= int_delay_pipe[2];
        int_delay_pipe[4] <= int_delay_pipe[3];
        int_delay_pipe[5] <= int_delay_pipe[4];
        int_delay_pipe[6] <= int_delay_pipe[5];
        int_delay_pipe[7] <= int_delay_pipe[6];
        int_delay_pipe[8] <= int_delay_pipe[7];
        end
      end
    end // ce_delay

    assign ce_delayline = int_delay_pipe[8];
  assign ce_gated =  ce_delayline & phase_0;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= ce_gated;
      end
    end // ce_output_register

  assign input_typeconvert = filter_in_stage2;

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_typeconvert;

  assign section_cast1 = $signed({{20{section_in1[17]}}, section_in1});

  assign add_signext = section_cast1;
  assign add_signext_1 = section_out1;
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[37:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign add_signext_2 = section_in2;
  assign add_signext_3 = section_out2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[37:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = section_in3[37:1];

  assign add_signext_4 = section_cast3;
  assign add_signext_5 = section_out3;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[36:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Integrator ------------------

  assign section_in4 = section_out3;

  assign section_cast4 = section_in4[36:1];

  assign add_signext_6 = section_cast4;
  assign add_signext_7 = section_out4;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[35:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section4
      if (reset == 1'b1) begin
        section_out4 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out4 <= sum4;
        end
      end
    end // integrator_delay_section4

  //   ------------------ Section # 5 : Integrator ------------------

  assign section_in5 = section_out4;

  assign section_cast5 = section_in5[35:1];

  assign add_signext_8 = section_cast5;
  assign add_signext_9 = section_out5;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[34:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section5
      if (reset == 1'b1) begin
        section_out5 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out5 <= sum5;
        end
      end
    end // integrator_delay_section5

  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = section_out5;

  assign section_cast6 = section_in6[34:1];

  assign add_signext_10 = section_cast6;
  assign add_signext_11 = section_out6;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[33:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out6 <= sum6;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Integrator ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = section_in7[33:1];

  assign add_signext_12 = section_cast7;
  assign add_signext_13 = section_out7;
  assign add_temp_6 = add_signext_12 + add_signext_13;
  assign sum7 = add_temp_6[32:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section7
      if (reset == 1'b1) begin
        section_out7 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out7 <= sum7;
        end
      end
    end // integrator_delay_section7

  //   ------------------ Section # 8 : Integrator ------------------

  assign section_in8 = section_out7;

  assign section_cast8 = section_in8[32:1];

  assign add_signext_14 = section_cast8;
  assign add_signext_15 = section_out8;
  assign add_temp_7 = add_signext_14 + add_signext_15;
  assign sum8 = add_temp_7[31:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section8
      if (reset == 1'b1) begin
        section_out8 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out8 <= sum8;
        end
      end
    end // integrator_delay_section8

  //   ------------------ Section # 9 : Integrator ------------------

  assign section_in9 = section_out8;

  assign add_signext_16 = section_in9;
  assign add_signext_17 = section_out9;
  assign add_temp_8 = add_signext_16 + add_signext_17;
  assign sum9 = add_temp_8[31:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section9
      if (reset == 1'b1) begin
        section_out9 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out9 <= sum9;
        end
      end
    end // integrator_delay_section9

  //   ------------------ Section # 10 : Integrator ------------------

  assign section_in10 = section_out9;

  assign section_cast10 = section_in10[31:1];

  assign add_signext_18 = section_cast10;
  assign add_signext_19 = section_out10;
  assign add_temp_9 = add_signext_18 + add_signext_19;
  assign sum10 = add_temp_9[30:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section10
      if (reset == 1'b1) begin
        section_out10 <= 0;
      end
      else begin
        if (clk_enable_stage2 == 1'b1) begin
          section_out10 <= sum10;
        end
      end
    end // integrator_delay_section10

  //   ------------------ Section # 11 : Comb ------------------

  assign section_in11 = section_out10;

  assign sub_signext = section_in11;
  assign sub_signext_1 = diff1;
  assign sub_temp = sub_signext - sub_signext_1;
  assign section_out11 = sub_temp[30:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section11
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff1 <= section_in11;
        end
      end
    end // comb_delay_section11

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section11
      if (reset == 1'b1) begin
        cic_pipeline11 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline11 <= section_out11;
        end
      end
    end // cic_pipeline_process_section11

  //   ------------------ Section # 12 : Comb ------------------

  assign section_in12 = cic_pipeline11;

  assign section_cast12 = section_in12[30:1];

  assign sub_signext_2 = section_cast12;
  assign sub_signext_3 = diff2;
  assign sub_temp_1 = sub_signext_2 - sub_signext_3;
  assign section_out12 = sub_temp_1[29:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section12
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff2 <= section_cast12;
        end
      end
    end // comb_delay_section12

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section12
      if (reset == 1'b1) begin
        cic_pipeline12 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline12 <= section_out12;
        end
      end
    end // cic_pipeline_process_section12

  //   ------------------ Section # 13 : Comb ------------------

  assign section_in13 = cic_pipeline12;

  assign section_cast13 = section_in13[29:1];

  assign sub_signext_4 = section_cast13;
  assign sub_signext_5 = diff3;
  assign sub_temp_2 = sub_signext_4 - sub_signext_5;
  assign section_out13 = sub_temp_2[28:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section13
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff3 <= section_cast13;
        end
      end
    end // comb_delay_section13

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section13
      if (reset == 1'b1) begin
        cic_pipeline13 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline13 <= section_out13;
        end
      end
    end // cic_pipeline_process_section13

  //   ------------------ Section # 14 : Comb ------------------

  assign section_in14 = cic_pipeline13;

  assign sub_signext_6 = section_in14;
  assign sub_signext_7 = diff4;
  assign sub_temp_3 = sub_signext_6 - sub_signext_7;
  assign section_out14 = sub_temp_3[28:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section14
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff4 <= section_in14;
        end
      end
    end // comb_delay_section14

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section14
      if (reset == 1'b1) begin
        cic_pipeline14 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline14 <= section_out14;
        end
      end
    end // cic_pipeline_process_section14

  //   ------------------ Section # 15 : Comb ------------------

  assign section_in15 = cic_pipeline14;

  assign section_cast15 = section_in15[28:1];

  assign sub_signext_8 = section_cast15;
  assign sub_signext_9 = diff5;
  assign sub_temp_4 = sub_signext_8 - sub_signext_9;
  assign section_out15 = sub_temp_4[27:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section15
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff5 <= section_cast15;
        end
      end
    end // comb_delay_section15

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section15
      if (reset == 1'b1) begin
        cic_pipeline15 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline15 <= section_out15;
        end
      end
    end // cic_pipeline_process_section15

  //   ------------------ Section # 16 : Comb ------------------

  assign section_in16 = cic_pipeline15;

  assign section_cast16 = section_in16[27:1];

  assign sub_signext_10 = section_cast16;
  assign sub_signext_11 = diff6;
  assign sub_temp_5 = sub_signext_10 - sub_signext_11;
  assign section_out16 = sub_temp_5[26:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section16
      if (reset == 1'b1) begin
        diff6 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff6 <= section_cast16;
        end
      end
    end // comb_delay_section16

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section16
      if (reset == 1'b1) begin
        cic_pipeline16 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline16 <= section_out16;
        end
      end
    end // cic_pipeline_process_section16

  //   ------------------ Section # 17 : Comb ------------------

  assign section_in17 = cic_pipeline16;

  assign section_cast17 = section_in17[26:1];

  assign sub_signext_12 = section_cast17;
  assign sub_signext_13 = diff7;
  assign sub_temp_6 = sub_signext_12 - sub_signext_13;
  assign section_out17 = sub_temp_6[25:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section17
      if (reset == 1'b1) begin
        diff7 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff7 <= section_cast17;
        end
      end
    end // comb_delay_section17

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section17
      if (reset == 1'b1) begin
        cic_pipeline17 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline17 <= section_out17;
        end
      end
    end // cic_pipeline_process_section17

  //   ------------------ Section # 18 : Comb ------------------

  assign section_in18 = cic_pipeline17;

  assign section_cast18 = section_in18[25:1];

  assign sub_signext_14 = section_cast18;
  assign sub_signext_15 = diff8;
  assign sub_temp_7 = sub_signext_14 - sub_signext_15;
  assign section_out18 = sub_temp_7[24:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section18
      if (reset == 1'b1) begin
        diff8 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff8 <= section_cast18;
        end
      end
    end // comb_delay_section18

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section18
      if (reset == 1'b1) begin
        cic_pipeline18 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline18 <= section_out18;
        end
      end
    end // cic_pipeline_process_section18

  //   ------------------ Section # 19 : Comb ------------------

  assign section_in19 = cic_pipeline18;

  assign section_cast19 = section_in19[24:1];

  assign sub_signext_16 = section_cast19;
  assign sub_signext_17 = diff9;
  assign sub_temp_8 = sub_signext_16 - sub_signext_17;
  assign section_out19 = sub_temp_8[23:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section19
      if (reset == 1'b1) begin
        diff9 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff9 <= section_cast19;
        end
      end
    end // comb_delay_section19

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section19
      if (reset == 1'b1) begin
        cic_pipeline19 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          cic_pipeline19 <= section_out19;
        end
      end
    end // cic_pipeline_process_section19

  //   ------------------ Section # 20 : Comb ------------------

  assign section_in20 = cic_pipeline19;

  assign section_cast20 = section_in20[23:1];

  assign sub_signext_18 = section_cast20;
  assign sub_signext_19 = diff10;
  assign sub_temp_9 = sub_signext_18 - sub_signext_19;
  assign section_out20 = sub_temp_9[22:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section20
      if (reset == 1'b1) begin
        diff10 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          diff10 <= section_cast20;
        end
      end
    end // comb_delay_section20

  assign output_typeconvert = section_out20[22:3];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out_stage2 = ce_out_reg;
  assign filter_out_stage2 = output_register;
endmodule  // CASCADE_D260_stage2
