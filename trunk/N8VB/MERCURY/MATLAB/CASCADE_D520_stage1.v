// -------------------------------------------------------------
//
// Module: CASCADE_D520_stage1
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-19 12:41:00
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CASCADE_D520_stage1
// TargetDirectory: c:\data
// InputPort: filter_in_stage1
// OutputPort: filter_out_stage1
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
// ClockEnableInputPort: clk_enable_stage1
// ClockEnableOutputPort: ce_out_stage1
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure        : Cascaded Integrator-Comb Decimator
// Decimation Factor       : 65
// Differential Delay      : 1
// Number of Sections      : 6
// Stable                  : Yes
// Linear Phase            : Yes (Type 1)
//
// Input                   : s16,0
// Output                  : s18,-35
// Filter Internals        : Minimum Word Lengths
//   Integrator Section 1  : s53,0
//   Integrator Section 2  : s47,-6
//   Integrator Section 3  : s41,-12
//   Integrator Section 4  : s36,-17
//   Integrator Section 5  : s32,-21
//   Integrator Section 6  : s27,-26
//   Comb Section 1        : s25,-28
//   Comb Section 2        : s24,-29
//   Comb Section 3        : s23,-30
//   Comb Section 4        : s22,-31
//   Comb Section 5        : s22,-31
//   Comb Section 6        : s21,-32
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 12
// Number of States      : 12
// MultPerInputSample    : 0
// AddPerInputSample     : 6.0923
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CASCADE_D520_stage1 
               (
                clk,
                clk_enable_stage1,
                reset,
                filter_in_stage1,
                filter_out_stage1,
                ce_out_stage1
                );

  input   clk; 
  input   clk_enable_stage1; 
  input   reset; 
  input   signed [15:0] filter_in_stage1; //sfix16
  output  signed [17:0] filter_out_stage1; //sfix18_E35
  output  ce_out_stage1; 

////////////////////////////////////////////////////////////////
//Module Architecture: CASCADE_D520_stage1
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [6:0] cur_count; // ufix7
  wire phase_1; // boolean
  wire ce_delayline; // boolean
  reg  int_delay_pipe [0:4] ; // boolean
  wire ce_gated; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [15:0] input_register; // sfix16
  //   -- Section 1 Signals 
  wire signed [15:0] section_in1; // sfix16
  wire signed [52:0] section_cast1; // sfix53
  wire signed [52:0] sum1; // sfix53
  reg  signed [52:0] section_out1; // sfix53
  wire signed [52:0] add_signext; // sfix53
  wire signed [52:0] add_signext_1; // sfix53
  wire signed [53:0] add_temp; // sfix54
  //   -- Section 2 Signals 
  wire signed [52:0] section_in2; // sfix53
  wire signed [46:0] section_cast2; // sfix47_E6
  wire signed [46:0] sum2; // sfix47_E6
  reg  signed [46:0] section_out2; // sfix47_E6
  wire signed [46:0] add_signext_2; // sfix47_E6
  wire signed [46:0] add_signext_3; // sfix47_E6
  wire signed [47:0] add_temp_1; // sfix48_E6
  //   -- Section 3 Signals 
  wire signed [46:0] section_in3; // sfix47_E6
  wire signed [40:0] section_cast3; // sfix41_E12
  wire signed [40:0] sum3; // sfix41_E12
  reg  signed [40:0] section_out3; // sfix41_E12
  wire signed [40:0] add_signext_4; // sfix41_E12
  wire signed [40:0] add_signext_5; // sfix41_E12
  wire signed [41:0] add_temp_2; // sfix42_E12
  //   -- Section 4 Signals 
  wire signed [40:0] section_in4; // sfix41_E12
  wire signed [35:0] section_cast4; // sfix36_E17
  wire signed [35:0] sum4; // sfix36_E17
  reg  signed [35:0] section_out4; // sfix36_E17
  wire signed [35:0] add_signext_6; // sfix36_E17
  wire signed [35:0] add_signext_7; // sfix36_E17
  wire signed [36:0] add_temp_3; // sfix37_E17
  //   -- Section 5 Signals 
  wire signed [35:0] section_in5; // sfix36_E17
  wire signed [31:0] section_cast5; // sfix32_E21
  wire signed [31:0] sum5; // sfix32_E21
  reg  signed [31:0] section_out5; // sfix32_E21
  wire signed [31:0] add_signext_8; // sfix32_E21
  wire signed [31:0] add_signext_9; // sfix32_E21
  wire signed [32:0] add_temp_4; // sfix33_E21
  //   -- Section 6 Signals 
  wire signed [31:0] section_in6; // sfix32_E21
  wire signed [26:0] section_cast6; // sfix27_E26
  wire signed [26:0] sum6; // sfix27_E26
  reg  signed [26:0] section_out6; // sfix27_E26
  wire signed [26:0] add_signext_10; // sfix27_E26
  wire signed [26:0] add_signext_11; // sfix27_E26
  wire signed [27:0] add_temp_5; // sfix28_E26
  //   -- Section 7 Signals 
  wire signed [26:0] section_in7; // sfix27_E26
  wire signed [24:0] section_cast7; // sfix25_E28
  reg  signed [24:0] diff1; // sfix25_E28
  wire signed [24:0] section_out7; // sfix25_E28
  wire signed [24:0] sub_signext; // sfix25_E28
  wire signed [24:0] sub_signext_1; // sfix25_E28
  wire signed [25:0] sub_temp; // sfix26_E28
  reg  signed [24:0] cic_pipeline7; // sfix25_E28
  //   -- Section 8 Signals 
  wire signed [24:0] section_in8; // sfix25_E28
  wire signed [23:0] section_cast8; // sfix24_E29
  reg  signed [23:0] diff2; // sfix24_E29
  wire signed [23:0] section_out8; // sfix24_E29
  wire signed [23:0] sub_signext_2; // sfix24_E29
  wire signed [23:0] sub_signext_3; // sfix24_E29
  wire signed [24:0] sub_temp_1; // sfix25_E29
  reg  signed [23:0] cic_pipeline8; // sfix24_E29
  //   -- Section 9 Signals 
  wire signed [23:0] section_in9; // sfix24_E29
  wire signed [22:0] section_cast9; // sfix23_E30
  reg  signed [22:0] diff3; // sfix23_E30
  wire signed [22:0] section_out9; // sfix23_E30
  wire signed [22:0] sub_signext_4; // sfix23_E30
  wire signed [22:0] sub_signext_5; // sfix23_E30
  wire signed [23:0] sub_temp_2; // sfix24_E30
  reg  signed [22:0] cic_pipeline9; // sfix23_E30
  //   -- Section 10 Signals 
  wire signed [22:0] section_in10; // sfix23_E30
  wire signed [21:0] section_cast10; // sfix22_E31
  reg  signed [21:0] diff4; // sfix22_E31
  wire signed [21:0] section_out10; // sfix22_E31
  wire signed [21:0] sub_signext_6; // sfix22_E31
  wire signed [21:0] sub_signext_7; // sfix22_E31
  wire signed [22:0] sub_temp_3; // sfix23_E31
  reg  signed [21:0] cic_pipeline10; // sfix22_E31
  //   -- Section 11 Signals 
  wire signed [21:0] section_in11; // sfix22_E31
  reg  signed [21:0] diff5; // sfix22_E31
  wire signed [21:0] section_out11; // sfix22_E31
  wire signed [21:0] sub_signext_8; // sfix22_E31
  wire signed [21:0] sub_signext_9; // sfix22_E31
  wire signed [22:0] sub_temp_4; // sfix23_E31
  reg  signed [21:0] cic_pipeline11; // sfix22_E31
  //   -- Section 12 Signals 
  wire signed [21:0] section_in12; // sfix22_E31
  wire signed [20:0] section_cast12; // sfix21_E32
  reg  signed [20:0] diff6; // sfix21_E32
  wire signed [20:0] section_out12; // sfix21_E32
  wire signed [20:0] sub_signext_10; // sfix21_E32
  wire signed [20:0] sub_signext_11; // sfix21_E32
  wire signed [21:0] sub_temp_5; // sfix22_E32
  wire signed [17:0] output_typeconvert; // sfix18_E35
  //   
  reg  signed [17:0] output_register; // sfix18_E35

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 7'b0000000;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          if (cur_count == 7'b1000000) begin
            cur_count <= 7'b0000000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 7'b0000001 && clk_enable_stage1 == 1'b1)? 1 : 0;

  always @( posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        int_delay_pipe[0] <= 1'b0;
        int_delay_pipe[1] <= 1'b0;
        int_delay_pipe[2] <= 1'b0;
        int_delay_pipe[3] <= 1'b0;
        int_delay_pipe[4] <= 1'b0;
      end
      else begin
        if (phase_1 == 1'b1) begin
        int_delay_pipe[0] <= clk_enable_stage1;
        int_delay_pipe[1] <= int_delay_pipe[0];
        int_delay_pipe[2] <= int_delay_pipe[1];
        int_delay_pipe[3] <= int_delay_pipe[2];
        int_delay_pipe[4] <= int_delay_pipe[3];
        end
      end
    end // ce_delay

    assign ce_delayline = int_delay_pipe[4];
  assign ce_gated =  ce_delayline & phase_1;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= ce_gated;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          input_register <= filter_in_stage1;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({{37{section_in1[15]}}, section_in1});

  assign add_signext = section_cast1;
  assign add_signext_1 = section_out1;
  assign add_temp = add_signext + add_signext_1;
  assign sum1 = add_temp[52:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign section_cast2 = section_in2[52:6];

  assign add_signext_2 = section_cast2;
  assign add_signext_3 = section_out2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum2 = add_temp_1[46:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = section_in3[46:6];

  assign add_signext_4 = section_cast3;
  assign add_signext_5 = section_out3;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum3 = add_temp_2[40:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Integrator ------------------

  assign section_in4 = section_out3;

  assign section_cast4 = section_in4[40:5];

  assign add_signext_6 = section_cast4;
  assign add_signext_7 = section_out4;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum4 = add_temp_3[35:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section4
      if (reset == 1'b1) begin
        section_out4 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out4 <= sum4;
        end
      end
    end // integrator_delay_section4

  //   ------------------ Section # 5 : Integrator ------------------

  assign section_in5 = section_out4;

  assign section_cast5 = section_in5[35:4];

  assign add_signext_8 = section_cast5;
  assign add_signext_9 = section_out5;
  assign add_temp_4 = add_signext_8 + add_signext_9;
  assign sum5 = add_temp_4[31:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section5
      if (reset == 1'b1) begin
        section_out5 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out5 <= sum5;
        end
      end
    end // integrator_delay_section5

  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = section_out5;

  assign section_cast6 = section_in6[31:5];

  assign add_signext_10 = section_cast6;
  assign add_signext_11 = section_out6;
  assign add_temp_5 = add_signext_10 + add_signext_11;
  assign sum6 = add_temp_5[26:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable_stage1 == 1'b1) begin
          section_out6 <= sum6;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Comb ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = section_in7[26:2];

  assign sub_signext = section_cast7;
  assign sub_signext_1 = diff1;
  assign sub_temp = sub_signext - sub_signext_1;
  assign section_out7 = sub_temp[24:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section7
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff1 <= section_cast7;
        end
      end
    end // comb_delay_section7

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section7
      if (reset == 1'b1) begin
        cic_pipeline7 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline7 <= section_out7;
        end
      end
    end // cic_pipeline_process_section7

  //   ------------------ Section # 8 : Comb ------------------

  assign section_in8 = cic_pipeline7;

  assign section_cast8 = section_in8[24:1];

  assign sub_signext_2 = section_cast8;
  assign sub_signext_3 = diff2;
  assign sub_temp_1 = sub_signext_2 - sub_signext_3;
  assign section_out8 = sub_temp_1[23:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section8
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff2 <= section_cast8;
        end
      end
    end // comb_delay_section8

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section8
      if (reset == 1'b1) begin
        cic_pipeline8 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline8 <= section_out8;
        end
      end
    end // cic_pipeline_process_section8

  //   ------------------ Section # 9 : Comb ------------------

  assign section_in9 = cic_pipeline8;

  assign section_cast9 = section_in9[23:1];

  assign sub_signext_4 = section_cast9;
  assign sub_signext_5 = diff3;
  assign sub_temp_2 = sub_signext_4 - sub_signext_5;
  assign section_out9 = sub_temp_2[22:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section9
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff3 <= section_cast9;
        end
      end
    end // comb_delay_section9

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section9
      if (reset == 1'b1) begin
        cic_pipeline9 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline9 <= section_out9;
        end
      end
    end // cic_pipeline_process_section9

  //   ------------------ Section # 10 : Comb ------------------

  assign section_in10 = cic_pipeline9;

  assign section_cast10 = section_in10[22:1];

  assign sub_signext_6 = section_cast10;
  assign sub_signext_7 = diff4;
  assign sub_temp_3 = sub_signext_6 - sub_signext_7;
  assign section_out10 = sub_temp_3[21:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section10
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff4 <= section_cast10;
        end
      end
    end // comb_delay_section10

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section10
      if (reset == 1'b1) begin
        cic_pipeline10 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline10 <= section_out10;
        end
      end
    end // cic_pipeline_process_section10

  //   ------------------ Section # 11 : Comb ------------------

  assign section_in11 = cic_pipeline10;

  assign sub_signext_8 = section_in11;
  assign sub_signext_9 = diff5;
  assign sub_temp_4 = sub_signext_8 - sub_signext_9;
  assign section_out11 = sub_temp_4[21:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section11
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff5 <= section_in11;
        end
      end
    end // comb_delay_section11

  always @ (posedge clk or posedge reset)
    begin: cic_pipeline_process_section11
      if (reset == 1'b1) begin
        cic_pipeline11 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          cic_pipeline11 <= section_out11;
        end
      end
    end // cic_pipeline_process_section11

  //   ------------------ Section # 12 : Comb ------------------

  assign section_in12 = cic_pipeline11;

  assign section_cast12 = section_in12[21:1];

  assign sub_signext_10 = section_cast12;
  assign sub_signext_11 = diff6;
  assign sub_temp_5 = sub_signext_10 - sub_signext_11;
  assign section_out12 = sub_temp_5[20:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section12
      if (reset == 1'b1) begin
        diff6 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff6 <= section_cast12;
        end
      end
    end // comb_delay_section12

  assign output_typeconvert = section_out12[20:3];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out_stage1 = ce_out_reg;
  assign filter_out_stage1 = output_register;
endmodule  // CASCADE_D520_stage1
