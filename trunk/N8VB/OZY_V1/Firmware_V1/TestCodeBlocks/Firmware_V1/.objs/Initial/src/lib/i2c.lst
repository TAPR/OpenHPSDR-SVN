                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.5.0 #1020 (May  8 2005)
                              4 ; This file generated Tue Jul 11 16:41:59 2006
                              5 ;--------------------------------------------------------
                              6 	.module i2c
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _i2c_write_PARM_3
                             13 	.globl _i2c_write_PARM_2
                             14 	.globl _i2c_read_PARM_3
                             15 	.globl _i2c_read_PARM_2
                             16 	.globl _EIPX6
                             17 	.globl _EIPX5
                             18 	.globl _EIPX4
                             19 	.globl _PI2C
                             20 	.globl _PUSB
                             21 	.globl _EIEX6
                             22 	.globl _EIEX5
                             23 	.globl _EIEX4
                             24 	.globl _EI2C
                             25 	.globl _EIUSB
                             26 	.globl _SMOD1
                             27 	.globl _ERESI
                             28 	.globl _RESI
                             29 	.globl _INT6
                             30 	.globl _CY
                             31 	.globl _AC
                             32 	.globl _F0
                             33 	.globl _RS1
                             34 	.globl _RS0
                             35 	.globl _OV
                             36 	.globl _FL
                             37 	.globl _P
                             38 	.globl _TF2
                             39 	.globl _EXF2
                             40 	.globl _RCLK
                             41 	.globl _TCLK
                             42 	.globl _EXEN2
                             43 	.globl _TR2
                             44 	.globl _C_T2
                             45 	.globl _CP_RL2
                             46 	.globl _SM01
                             47 	.globl _SM11
                             48 	.globl _SM21
                             49 	.globl _REN1
                             50 	.globl _TB81
                             51 	.globl _RB81
                             52 	.globl _TI1
                             53 	.globl _RI1
                             54 	.globl _PS1
                             55 	.globl _PT2
                             56 	.globl _PS0
                             57 	.globl _PT1
                             58 	.globl _PX1
                             59 	.globl _PT0
                             60 	.globl _PX0
                             61 	.globl _EA
                             62 	.globl _ES1
                             63 	.globl _ET2
                             64 	.globl _ES0
                             65 	.globl _ET1
                             66 	.globl _EX1
                             67 	.globl _ET0
                             68 	.globl _EX0
                             69 	.globl _SM0
                             70 	.globl _SM1
                             71 	.globl _SM2
                             72 	.globl _REN
                             73 	.globl _TB8
                             74 	.globl _RB8
                             75 	.globl _TI
                             76 	.globl _RI
                             77 	.globl _TF1
                             78 	.globl _TR1
                             79 	.globl _TF0
                             80 	.globl _TR0
                             81 	.globl _IE1
                             82 	.globl _IT1
                             83 	.globl _IE0
                             84 	.globl _IT0
                             85 	.globl _SEL
                             86 	.globl _EIP
                             87 	.globl _B
                             88 	.globl _EIE
                             89 	.globl _ACC
                             90 	.globl _EICON
                             91 	.globl _PSW
                             92 	.globl _TH2
                             93 	.globl _TL2
                             94 	.globl _RCAP2H
                             95 	.globl _RCAP2L
                             96 	.globl _T2CON
                             97 	.globl _SBUF1
                             98 	.globl _SCON1
                             99 	.globl _GPIFSGLDATLNOX
                            100 	.globl _GPIFSGLDATLX
                            101 	.globl _GPIFSGLDATH
                            102 	.globl _GPIFTRIG
                            103 	.globl _EP01STAT
                            104 	.globl _IP
                            105 	.globl _OEE
                            106 	.globl _OED
                            107 	.globl _OEC
                            108 	.globl _OEB
                            109 	.globl _OEA
                            110 	.globl _IOE
                            111 	.globl _IOD
                            112 	.globl _AUTOPTRSETUP
                            113 	.globl _EP68FIFOFLGS
                            114 	.globl _EP24FIFOFLGS
                            115 	.globl _EP2468STAT
                            116 	.globl _IE
                            117 	.globl _INT4CLR
                            118 	.globl _INT2CLR
                            119 	.globl _IOC
                            120 	.globl _AUTODAT2
                            121 	.globl _AUTOPTRL2
                            122 	.globl _AUTOPTRH2
                            123 	.globl _AUTODAT1
                            124 	.globl _APTR1L
                            125 	.globl _APTR1H
                            126 	.globl _SBUF0
                            127 	.globl _SCON0
                            128 	.globl _MPAGE
                            129 	.globl _EXIF
                            130 	.globl _IOB
                            131 	.globl _CKCON
                            132 	.globl _TH1
                            133 	.globl _TH0
                            134 	.globl _TL1
                            135 	.globl _TL0
                            136 	.globl _TMOD
                            137 	.globl _TCON
                            138 	.globl _PCON
                            139 	.globl _DPS
                            140 	.globl _DPH1
                            141 	.globl _DPL1
                            142 	.globl _DPH
                            143 	.globl _DPL
                            144 	.globl _SP
                            145 	.globl _IOA
                            146 	.globl _EP8FIFOBUF
                            147 	.globl _EP6FIFOBUF
                            148 	.globl _EP4FIFOBUF
                            149 	.globl _EP2FIFOBUF
                            150 	.globl _EP1INBUF
                            151 	.globl _EP1OUTBUF
                            152 	.globl _EP0BUF
                            153 	.globl _CT4
                            154 	.globl _CT3
                            155 	.globl _CT2
                            156 	.globl _CT1
                            157 	.globl _USBTEST
                            158 	.globl _TESTCFG
                            159 	.globl _DBUG
                            160 	.globl _UDMACRCQUAL
                            161 	.globl _UDMACRCL
                            162 	.globl _UDMACRCH
                            163 	.globl _GPIFHOLDAMOUNT
                            164 	.globl _FLOWSTBHPERIOD
                            165 	.globl _FLOWSTBEDGE
                            166 	.globl _FLOWSTB
                            167 	.globl _FLOWHOLDOFF
                            168 	.globl _FLOWEQ1CTL
                            169 	.globl _FLOWEQ0CTL
                            170 	.globl _FLOWLOGIC
                            171 	.globl _FLOWSTATE
                            172 	.globl _GPIFABORT
                            173 	.globl _GPIFREADYSTAT
                            174 	.globl _GPIFREADYCFG
                            175 	.globl _XGPIFSGLDATLNOX
                            176 	.globl _XGPIFSGLDATLX
                            177 	.globl _XGPIFSGLDATH
                            178 	.globl _EP8GPIFTRIG
                            179 	.globl _EP8GPIFPFSTOP
                            180 	.globl _EP8GPIFFLGSEL
                            181 	.globl _EP6GPIFTRIG
                            182 	.globl _EP6GPIFPFSTOP
                            183 	.globl _EP6GPIFFLGSEL
                            184 	.globl _EP4GPIFTRIG
                            185 	.globl _EP4GPIFPFSTOP
                            186 	.globl _EP4GPIFFLGSEL
                            187 	.globl _EP2GPIFTRIG
                            188 	.globl _EP2GPIFPFSTOP
                            189 	.globl _EP2GPIFFLGSEL
                            190 	.globl _GPIFTCB0
                            191 	.globl _GPIFTCB1
                            192 	.globl _GPIFTCB2
                            193 	.globl _GPIFTCB3
                            194 	.globl _GPIFADRL
                            195 	.globl _GPIFADRH
                            196 	.globl _GPIFCTLCFG
                            197 	.globl _GPIFIDLECTL
                            198 	.globl _GPIFIDLECS
                            199 	.globl _GPIFWFSELECT
                            200 	.globl _SETUPDAT
                            201 	.globl _SUDPTRCTL
                            202 	.globl _SUDPTRL
                            203 	.globl _SUDPTRH
                            204 	.globl _EP8FIFOBCL
                            205 	.globl _EP8FIFOBCH
                            206 	.globl _EP6FIFOBCL
                            207 	.globl _EP6FIFOBCH
                            208 	.globl _EP4FIFOBCL
                            209 	.globl _EP4FIFOBCH
                            210 	.globl _EP2FIFOBCL
                            211 	.globl _EP2FIFOBCH
                            212 	.globl _EP8FIFOFLGS
                            213 	.globl _EP6FIFOFLGS
                            214 	.globl _EP4FIFOFLGS
                            215 	.globl _EP2FIFOFLGS
                            216 	.globl _EP8CS
                            217 	.globl _EP6CS
                            218 	.globl _EP4CS
                            219 	.globl _EP2CS
                            220 	.globl _EP1INCS
                            221 	.globl _EP1OUTCS
                            222 	.globl _EP0CS
                            223 	.globl _EP8BCL
                            224 	.globl _EP8BCH
                            225 	.globl _EP6BCL
                            226 	.globl _EP6BCH
                            227 	.globl _EP4BCL
                            228 	.globl _EP4BCH
                            229 	.globl _EP2BCL
                            230 	.globl _EP2BCH
                            231 	.globl _EP1INBC
                            232 	.globl _EP1OUTBC
                            233 	.globl _EP0BCL
                            234 	.globl _EP0BCH
                            235 	.globl _FNADDR
                            236 	.globl _MICROFRAME
                            237 	.globl _USBFRAMEL
                            238 	.globl _USBFRAMEH
                            239 	.globl _TOGCTL
                            240 	.globl _WAKEUPCS
                            241 	.globl _SUSPEND
                            242 	.globl _USBCS
                            243 	.globl _XAUTODAT2
                            244 	.globl _XAUTODAT1
                            245 	.globl _I2CTL
                            246 	.globl _I2DAT
                            247 	.globl _I2CS
                            248 	.globl _PORTECFG
                            249 	.globl _PORTCCFG
                            250 	.globl _PORTACFG
                            251 	.globl _INTSETUP
                            252 	.globl _INT4IVEC
                            253 	.globl _INT2IVEC
                            254 	.globl _CLRERRCNT
                            255 	.globl _ERRCNTLIM
                            256 	.globl _USBERRIRQ
                            257 	.globl _USBERRIE
                            258 	.globl _GPIFIRQ
                            259 	.globl _GPIFIE
                            260 	.globl _EPIRQ
                            261 	.globl _EPIE
                            262 	.globl _USBIRQ
                            263 	.globl _USBIE
                            264 	.globl _NAKIRQ
                            265 	.globl _NAKIE
                            266 	.globl _IBNIRQ
                            267 	.globl _IBNIE
                            268 	.globl _EP8FIFOIRQ
                            269 	.globl _EP8FIFOIE
                            270 	.globl _EP6FIFOIRQ
                            271 	.globl _EP6FIFOIE
                            272 	.globl _EP4FIFOIRQ
                            273 	.globl _EP4FIFOIE
                            274 	.globl _EP2FIFOIRQ
                            275 	.globl _EP2FIFOIE
                            276 	.globl _OUTPKTEND
                            277 	.globl _INPKTEND
                            278 	.globl _EP8ISOINPKTS
                            279 	.globl _EP6ISOINPKTS
                            280 	.globl _EP4ISOINPKTS
                            281 	.globl _EP2ISOINPKTS
                            282 	.globl _EP8FIFOPFL
                            283 	.globl _EP8FIFOPFH
                            284 	.globl _EP6FIFOPFL
                            285 	.globl _EP6FIFOPFH
                            286 	.globl _EP4FIFOPFL
                            287 	.globl _EP4FIFOPFH
                            288 	.globl _EP2FIFOPFL
                            289 	.globl _EP2FIFOPFH
                            290 	.globl _EP8AUTOINLENL
                            291 	.globl _EP8AUTOINLENH
                            292 	.globl _EP6AUTOINLENL
                            293 	.globl _EP6AUTOINLENH
                            294 	.globl _EP4AUTOINLENL
                            295 	.globl _EP4AUTOINLENH
                            296 	.globl _EP2AUTOINLENL
                            297 	.globl _EP2AUTOINLENH
                            298 	.globl _EP8FIFOCFG
                            299 	.globl _EP6FIFOCFG
                            300 	.globl _EP4FIFOCFG
                            301 	.globl _EP2FIFOCFG
                            302 	.globl _EP8CFG
                            303 	.globl _EP6CFG
                            304 	.globl _EP4CFG
                            305 	.globl _EP2CFG
                            306 	.globl _EP1INCFG
                            307 	.globl _EP1OUTCFG
                            308 	.globl _REVCTL
                            309 	.globl _REVID
                            310 	.globl _FIFOPINPOLAR
                            311 	.globl _UART230
                            312 	.globl _BPADDRL
                            313 	.globl _BPADDRH
                            314 	.globl _BREAKPT
                            315 	.globl _FIFORESET
                            316 	.globl _PINFLAGSCD
                            317 	.globl _PINFLAGSAB
                            318 	.globl _IFCONFIG
                            319 	.globl _CPUCS
                            320 	.globl _RES_WAVEDATA_END
                            321 	.globl _GPIF_WAVE_DATA
                            322 	.globl _i2c_read
                            323 	.globl _i2c_write
                            324 ;--------------------------------------------------------
                            325 ; special function registers
                            326 ;--------------------------------------------------------
                            327 	.area RSEG    (DATA)
                    0080    328 _IOA	=	0x0080
                    0081    329 _SP	=	0x0081
                    0082    330 _DPL	=	0x0082
                    0083    331 _DPH	=	0x0083
                    0084    332 _DPL1	=	0x0084
                    0085    333 _DPH1	=	0x0085
                    0086    334 _DPS	=	0x0086
                    0087    335 _PCON	=	0x0087
                    0088    336 _TCON	=	0x0088
                    0089    337 _TMOD	=	0x0089
                    008A    338 _TL0	=	0x008a
                    008B    339 _TL1	=	0x008b
                    008C    340 _TH0	=	0x008c
                    008D    341 _TH1	=	0x008d
                    008E    342 _CKCON	=	0x008e
                    0090    343 _IOB	=	0x0090
                    0091    344 _EXIF	=	0x0091
                    0092    345 _MPAGE	=	0x0092
                    0098    346 _SCON0	=	0x0098
                    0099    347 _SBUF0	=	0x0099
                    009A    348 _APTR1H	=	0x009a
                    009B    349 _APTR1L	=	0x009b
                    009C    350 _AUTODAT1	=	0x009c
                    009D    351 _AUTOPTRH2	=	0x009d
                    009E    352 _AUTOPTRL2	=	0x009e
                    009F    353 _AUTODAT2	=	0x009f
                    00A0    354 _IOC	=	0x00a0
                    00A1    355 _INT2CLR	=	0x00a1
                    00A2    356 _INT4CLR	=	0x00a2
                    00A8    357 _IE	=	0x00a8
                    00AA    358 _EP2468STAT	=	0x00aa
                    00AB    359 _EP24FIFOFLGS	=	0x00ab
                    00AC    360 _EP68FIFOFLGS	=	0x00ac
                    00AF    361 _AUTOPTRSETUP	=	0x00af
                    00B0    362 _IOD	=	0x00b0
                    00B1    363 _IOE	=	0x00b1
                    00B2    364 _OEA	=	0x00b2
                    00B3    365 _OEB	=	0x00b3
                    00B4    366 _OEC	=	0x00b4
                    00B5    367 _OED	=	0x00b5
                    00B6    368 _OEE	=	0x00b6
                    00B8    369 _IP	=	0x00b8
                    00BA    370 _EP01STAT	=	0x00ba
                    00BB    371 _GPIFTRIG	=	0x00bb
                    00BD    372 _GPIFSGLDATH	=	0x00bd
                    00BE    373 _GPIFSGLDATLX	=	0x00be
                    00BF    374 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    375 _SCON1	=	0x00c0
                    00C1    376 _SBUF1	=	0x00c1
                    00C8    377 _T2CON	=	0x00c8
                    00CA    378 _RCAP2L	=	0x00ca
                    00CB    379 _RCAP2H	=	0x00cb
                    00CC    380 _TL2	=	0x00cc
                    00CD    381 _TH2	=	0x00cd
                    00D0    382 _PSW	=	0x00d0
                    00D8    383 _EICON	=	0x00d8
                    00E0    384 _ACC	=	0x00e0
                    00E8    385 _EIE	=	0x00e8
                    00F0    386 _B	=	0x00f0
                    00F8    387 _EIP	=	0x00f8
                            388 ;--------------------------------------------------------
                            389 ; special function bits 
                            390 ;--------------------------------------------------------
                            391 	.area RSEG    (DATA)
                    0086    392 _SEL	=	0x0086
                    0088    393 _IT0	=	0x0088
                    0089    394 _IE0	=	0x0089
                    008A    395 _IT1	=	0x008a
                    008B    396 _IE1	=	0x008b
                    008C    397 _TR0	=	0x008c
                    008D    398 _TF0	=	0x008d
                    008E    399 _TR1	=	0x008e
                    008F    400 _TF1	=	0x008f
                    0098    401 _RI	=	0x0098
                    0099    402 _TI	=	0x0099
                    009A    403 _RB8	=	0x009a
                    009B    404 _TB8	=	0x009b
                    009C    405 _REN	=	0x009c
                    009D    406 _SM2	=	0x009d
                    009E    407 _SM1	=	0x009e
                    009F    408 _SM0	=	0x009f
                    00A8    409 _EX0	=	0x00a8
                    00A9    410 _ET0	=	0x00a9
                    00AA    411 _EX1	=	0x00aa
                    00AB    412 _ET1	=	0x00ab
                    00AC    413 _ES0	=	0x00ac
                    00AD    414 _ET2	=	0x00ad
                    00AE    415 _ES1	=	0x00ae
                    00AF    416 _EA	=	0x00af
                    00B8    417 _PX0	=	0x00b8
                    00B9    418 _PT0	=	0x00b9
                    00BA    419 _PX1	=	0x00ba
                    00BB    420 _PT1	=	0x00bb
                    00BC    421 _PS0	=	0x00bc
                    00BD    422 _PT2	=	0x00bd
                    00BE    423 _PS1	=	0x00be
                    00C0    424 _RI1	=	0x00c0
                    00C1    425 _TI1	=	0x00c1
                    00C2    426 _RB81	=	0x00c2
                    00C3    427 _TB81	=	0x00c3
                    00C4    428 _REN1	=	0x00c4
                    00C5    429 _SM21	=	0x00c5
                    00C6    430 _SM11	=	0x00c6
                    00C7    431 _SM01	=	0x00c7
                    00C8    432 _CP_RL2	=	0x00c8
                    00C9    433 _C_T2	=	0x00c9
                    00CA    434 _TR2	=	0x00ca
                    00CB    435 _EXEN2	=	0x00cb
                    00CC    436 _TCLK	=	0x00cc
                    00CD    437 _RCLK	=	0x00cd
                    00CE    438 _EXF2	=	0x00ce
                    00CF    439 _TF2	=	0x00cf
                    00D0    440 _P	=	0x00d0
                    00D1    441 _FL	=	0x00d1
                    00D2    442 _OV	=	0x00d2
                    00D3    443 _RS0	=	0x00d3
                    00D4    444 _RS1	=	0x00d4
                    00D5    445 _F0	=	0x00d5
                    00D6    446 _AC	=	0x00d6
                    00D7    447 _CY	=	0x00d7
                    00DB    448 _INT6	=	0x00db
                    00DC    449 _RESI	=	0x00dc
                    00DD    450 _ERESI	=	0x00dd
                    00DF    451 _SMOD1	=	0x00df
                    00E8    452 _EIUSB	=	0x00e8
                    00E9    453 _EI2C	=	0x00e9
                    00EA    454 _EIEX4	=	0x00ea
                    00EB    455 _EIEX5	=	0x00eb
                    00EC    456 _EIEX6	=	0x00ec
                    00F8    457 _PUSB	=	0x00f8
                    00F9    458 _PI2C	=	0x00f9
                    00FA    459 _EIPX4	=	0x00fa
                    00FB    460 _EIPX5	=	0x00fb
                    00FC    461 _EIPX6	=	0x00fc
                            462 ;--------------------------------------------------------
                            463 ; overlayable register banks 
                            464 ;--------------------------------------------------------
                            465 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     466 	.ds 8
                            467 ;--------------------------------------------------------
                            468 ; internal ram data
                            469 ;--------------------------------------------------------
                            470 	.area DSEG    (DATA)
                            471 ;--------------------------------------------------------
                            472 ; overlayable items in internal ram 
                            473 ;--------------------------------------------------------
                            474 	.area	OSEG    (OVR,DATA)
   0000                     475 _i2c_read_PARM_2::
   0000                     476 	.ds 2
   0002                     477 _i2c_read_PARM_3::
   0002                     478 	.ds 1
   0003                     479 _i2c_read_junk_1_1::
   0003                     480 	.ds 1
                            481 	.area	OSEG    (OVR,DATA)
   0000                     482 _i2c_write_PARM_2::
   0000                     483 	.ds 2
   0002                     484 _i2c_write_PARM_3::
   0002                     485 	.ds 1
                            486 ;--------------------------------------------------------
                            487 ; indirectly addressable internal ram data
                            488 ;--------------------------------------------------------
                            489 	.area ISEG    (DATA)
                            490 ;--------------------------------------------------------
                            491 ; bit data
                            492 ;--------------------------------------------------------
                            493 	.area BSEG    (BIT)
                            494 ;--------------------------------------------------------
                            495 ; paged external ram data
                            496 ;--------------------------------------------------------
                            497 	.area PSEG    (PAG,XDATA)
                            498 ;--------------------------------------------------------
                            499 ; external ram data
                            500 ;--------------------------------------------------------
                            501 	.area XSEG    (XDATA)
                    E400    502 _GPIF_WAVE_DATA	=	0xe400
                    E480    503 _RES_WAVEDATA_END	=	0xe480
                    E600    504 _CPUCS	=	0xe600
                    E601    505 _IFCONFIG	=	0xe601
                    E602    506 _PINFLAGSAB	=	0xe602
                    E603    507 _PINFLAGSCD	=	0xe603
                    E604    508 _FIFORESET	=	0xe604
                    E605    509 _BREAKPT	=	0xe605
                    E606    510 _BPADDRH	=	0xe606
                    E607    511 _BPADDRL	=	0xe607
                    E608    512 _UART230	=	0xe608
                    E609    513 _FIFOPINPOLAR	=	0xe609
                    E60A    514 _REVID	=	0xe60a
                    E60B    515 _REVCTL	=	0xe60b
                    E610    516 _EP1OUTCFG	=	0xe610
                    E611    517 _EP1INCFG	=	0xe611
                    E612    518 _EP2CFG	=	0xe612
                    E613    519 _EP4CFG	=	0xe613
                    E614    520 _EP6CFG	=	0xe614
                    E615    521 _EP8CFG	=	0xe615
                    E618    522 _EP2FIFOCFG	=	0xe618
                    E619    523 _EP4FIFOCFG	=	0xe619
                    E61A    524 _EP6FIFOCFG	=	0xe61a
                    E61B    525 _EP8FIFOCFG	=	0xe61b
                    E620    526 _EP2AUTOINLENH	=	0xe620
                    E621    527 _EP2AUTOINLENL	=	0xe621
                    E622    528 _EP4AUTOINLENH	=	0xe622
                    E623    529 _EP4AUTOINLENL	=	0xe623
                    E624    530 _EP6AUTOINLENH	=	0xe624
                    E625    531 _EP6AUTOINLENL	=	0xe625
                    E626    532 _EP8AUTOINLENH	=	0xe626
                    E627    533 _EP8AUTOINLENL	=	0xe627
                    E630    534 _EP2FIFOPFH	=	0xe630
                    E631    535 _EP2FIFOPFL	=	0xe631
                    E632    536 _EP4FIFOPFH	=	0xe632
                    E633    537 _EP4FIFOPFL	=	0xe633
                    E634    538 _EP6FIFOPFH	=	0xe634
                    E635    539 _EP6FIFOPFL	=	0xe635
                    E636    540 _EP8FIFOPFH	=	0xe636
                    E637    541 _EP8FIFOPFL	=	0xe637
                    E640    542 _EP2ISOINPKTS	=	0xe640
                    E641    543 _EP4ISOINPKTS	=	0xe641
                    E642    544 _EP6ISOINPKTS	=	0xe642
                    E643    545 _EP8ISOINPKTS	=	0xe643
                    E648    546 _INPKTEND	=	0xe648
                    E649    547 _OUTPKTEND	=	0xe649
                    E650    548 _EP2FIFOIE	=	0xe650
                    E651    549 _EP2FIFOIRQ	=	0xe651
                    E652    550 _EP4FIFOIE	=	0xe652
                    E653    551 _EP4FIFOIRQ	=	0xe653
                    E654    552 _EP6FIFOIE	=	0xe654
                    E655    553 _EP6FIFOIRQ	=	0xe655
                    E656    554 _EP8FIFOIE	=	0xe656
                    E657    555 _EP8FIFOIRQ	=	0xe657
                    E658    556 _IBNIE	=	0xe658
                    E659    557 _IBNIRQ	=	0xe659
                    E65A    558 _NAKIE	=	0xe65a
                    E65B    559 _NAKIRQ	=	0xe65b
                    E65C    560 _USBIE	=	0xe65c
                    E65D    561 _USBIRQ	=	0xe65d
                    E65E    562 _EPIE	=	0xe65e
                    E65F    563 _EPIRQ	=	0xe65f
                    E660    564 _GPIFIE	=	0xe660
                    E661    565 _GPIFIRQ	=	0xe661
                    E662    566 _USBERRIE	=	0xe662
                    E663    567 _USBERRIRQ	=	0xe663
                    E664    568 _ERRCNTLIM	=	0xe664
                    E665    569 _CLRERRCNT	=	0xe665
                    E666    570 _INT2IVEC	=	0xe666
                    E667    571 _INT4IVEC	=	0xe667
                    E668    572 _INTSETUP	=	0xe668
                    E670    573 _PORTACFG	=	0xe670
                    E671    574 _PORTCCFG	=	0xe671
                    E672    575 _PORTECFG	=	0xe672
                    E678    576 _I2CS	=	0xe678
                    E679    577 _I2DAT	=	0xe679
                    E67A    578 _I2CTL	=	0xe67a
                    E67B    579 _XAUTODAT1	=	0xe67b
                    E67C    580 _XAUTODAT2	=	0xe67c
                    E680    581 _USBCS	=	0xe680
                    E681    582 _SUSPEND	=	0xe681
                    E682    583 _WAKEUPCS	=	0xe682
                    E683    584 _TOGCTL	=	0xe683
                    E684    585 _USBFRAMEH	=	0xe684
                    E685    586 _USBFRAMEL	=	0xe685
                    E686    587 _MICROFRAME	=	0xe686
                    E687    588 _FNADDR	=	0xe687
                    E68A    589 _EP0BCH	=	0xe68a
                    E68B    590 _EP0BCL	=	0xe68b
                    E68D    591 _EP1OUTBC	=	0xe68d
                    E68F    592 _EP1INBC	=	0xe68f
                    E690    593 _EP2BCH	=	0xe690
                    E691    594 _EP2BCL	=	0xe691
                    E694    595 _EP4BCH	=	0xe694
                    E695    596 _EP4BCL	=	0xe695
                    E698    597 _EP6BCH	=	0xe698
                    E699    598 _EP6BCL	=	0xe699
                    E69C    599 _EP8BCH	=	0xe69c
                    E69D    600 _EP8BCL	=	0xe69d
                    E6A0    601 _EP0CS	=	0xe6a0
                    E6A1    602 _EP1OUTCS	=	0xe6a1
                    E6A2    603 _EP1INCS	=	0xe6a2
                    E6A3    604 _EP2CS	=	0xe6a3
                    E6A4    605 _EP4CS	=	0xe6a4
                    E6A5    606 _EP6CS	=	0xe6a5
                    E6A6    607 _EP8CS	=	0xe6a6
                    E6A7    608 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    609 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    610 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    611 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    612 _EP2FIFOBCH	=	0xe6ab
                    E6AC    613 _EP2FIFOBCL	=	0xe6ac
                    E6AD    614 _EP4FIFOBCH	=	0xe6ad
                    E6AE    615 _EP4FIFOBCL	=	0xe6ae
                    E6AF    616 _EP6FIFOBCH	=	0xe6af
                    E6B0    617 _EP6FIFOBCL	=	0xe6b0
                    E6B1    618 _EP8FIFOBCH	=	0xe6b1
                    E6B2    619 _EP8FIFOBCL	=	0xe6b2
                    E6B3    620 _SUDPTRH	=	0xe6b3
                    E6B4    621 _SUDPTRL	=	0xe6b4
                    E6B5    622 _SUDPTRCTL	=	0xe6b5
                    E6B8    623 _SETUPDAT	=	0xe6b8
                    E6C0    624 _GPIFWFSELECT	=	0xe6c0
                    E6C1    625 _GPIFIDLECS	=	0xe6c1
                    E6C2    626 _GPIFIDLECTL	=	0xe6c2
                    E6C3    627 _GPIFCTLCFG	=	0xe6c3
                    E6C4    628 _GPIFADRH	=	0xe6c4
                    E6C5    629 _GPIFADRL	=	0xe6c5
                    E6CE    630 _GPIFTCB3	=	0xe6ce
                    E6CF    631 _GPIFTCB2	=	0xe6cf
                    E6D0    632 _GPIFTCB1	=	0xe6d0
                    E6D1    633 _GPIFTCB0	=	0xe6d1
                    E6D2    634 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    635 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    636 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    637 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    638 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    639 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    640 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    641 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    642 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    643 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    644 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    645 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    646 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    647 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    648 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    649 _GPIFREADYCFG	=	0xe6f3
                    E6F4    650 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    651 _GPIFABORT	=	0xe6f5
                    E6C6    652 _FLOWSTATE	=	0xe6c6
                    E6C7    653 _FLOWLOGIC	=	0xe6c7
                    E6C8    654 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    655 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    656 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    657 _FLOWSTB	=	0xe6cb
                    E6CC    658 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    659 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    660 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    661 _UDMACRCH	=	0xe67d
                    E67E    662 _UDMACRCL	=	0xe67e
                    E67F    663 _UDMACRCQUAL	=	0xe67f
                    E6F8    664 _DBUG	=	0xe6f8
                    E6F9    665 _TESTCFG	=	0xe6f9
                    E6FA    666 _USBTEST	=	0xe6fa
                    E6FB    667 _CT1	=	0xe6fb
                    E6FC    668 _CT2	=	0xe6fc
                    E6FD    669 _CT3	=	0xe6fd
                    E6FE    670 _CT4	=	0xe6fe
                    E740    671 _EP0BUF	=	0xe740
                    E780    672 _EP1OUTBUF	=	0xe780
                    E7C0    673 _EP1INBUF	=	0xe7c0
                    F000    674 _EP2FIFOBUF	=	0xf000
                    F400    675 _EP4FIFOBUF	=	0xf400
                    F800    676 _EP6FIFOBUF	=	0xf800
                    FC00    677 _EP8FIFOBUF	=	0xfc00
                            678 ;--------------------------------------------------------
                            679 ; external initialized ram data
                            680 ;--------------------------------------------------------
                            681 	.area XISEG   (XDATA)
                            682 	.area CSEG    (CODE)
                            683 	.area GSINIT0 (CODE)
                            684 	.area GSINIT1 (CODE)
                            685 	.area GSINIT2 (CODE)
                            686 	.area GSINIT3 (CODE)
                            687 	.area GSINIT4 (CODE)
                            688 	.area GSINIT5 (CODE)
                            689 ;--------------------------------------------------------
                            690 ; global & static initialisations
                            691 ;--------------------------------------------------------
                            692 	.area CSEG    (CODE)
                            693 	.area GSINIT  (CODE)
                            694 	.area GSFINAL (CODE)
                            695 	.area GSINIT  (CODE)
                            696 ;--------------------------------------------------------
                            697 ; Home
                            698 ;--------------------------------------------------------
                            699 	.area HOME    (CODE)
                            700 	.area CSEG    (CODE)
                            701 ;--------------------------------------------------------
                            702 ; code
                            703 ;--------------------------------------------------------
                            704 	.area CSEG    (CODE)
                            705 ;------------------------------------------------------------
                            706 ;Allocation info for local variables in function 'i2c_read'
                            707 ;------------------------------------------------------------
                            708 ;buf                       Allocated with name '_i2c_read_PARM_2'
                            709 ;len                       Allocated with name '_i2c_read_PARM_3'
                            710 ;addr                      Allocated to registers r2 
                            711 ;junk                      Allocated with name '_i2c_read_junk_1_1'
                            712 ;------------------------------------------------------------
                            713 ;Initial/src/lib/i2c.c:36: i2c_read (unsigned char addr, xdata unsigned char *buf, unsigned char len)
                            714 ;	-----------------------------------------
                            715 ;	 function i2c_read
                            716 ;	-----------------------------------------
   0000                     717 _i2c_read:
                    0002    718 	ar2 = 0x02
                    0003    719 	ar3 = 0x03
                    0004    720 	ar4 = 0x04
                    0005    721 	ar5 = 0x05
                    0006    722 	ar6 = 0x06
                    0007    723 	ar7 = 0x07
                    0000    724 	ar0 = 0x00
                    0001    725 	ar1 = 0x01
                            726 ;     genReceive
   0000 AA 82               727 	mov	r2,dpl
                            728 ;Initial/src/lib/i2c.c:40: if (len == 0)			// reading zero bytes always works
                            729 ;     genCmpEq
   0002 E5*02               730 	mov	a,_i2c_read_PARM_3
                            731 ;	Peephole 162	removed sjmp by inverse jump logic
   0004 60 02               732 	jz	00149$
   0006                     733 00148$:
                            734 ;	Peephole 112.b	changed ljmp to sjmp
   0006 80 04               735 	sjmp	00103$
   0008                     736 00149$:
                            737 ;Initial/src/lib/i2c.c:41: return 1;
                            738 ;     genRet
   0008 75 82 01            739 	mov	dpl,#0x01
                            740 ;	Peephole 251.a	replaced ljmp to ret with ret
   000B 22                  741 	ret
                            742 ;Initial/src/lib/i2c.c:43: while (I2CS & bmSTOP)		// wait for stop to clear
   000C                     743 00103$:
                            744 ;     genAssign
   000C 90 E6 78            745 	mov	dptr,#_I2CS
   000F E0                  746 	movx	a,@dptr
                            747 ;     genAnd
                            748 ;	Peephole 105	removed redundant mov
   0010 FB                  749 	mov	r3,a
                            750 ;     genIfxJump
                            751 ;	Peephole 112.a	removed ljmp by inverse jump logic
   0011 20 E6 F8            752 	jb	acc.6,00103$
   0014                     753 00150$:
                            754 ;Initial/src/lib/i2c.c:46: I2CS = bmSTART;
                            755 ;     genAssign
   0014 90 E6 78            756 	mov	dptr,#_I2CS
   0017 74 80               757 	mov	a,#0x80
   0019 F0                  758 	movx	@dptr,a
                            759 ;Initial/src/lib/i2c.c:47: I2DAT = (addr << 1) | 1;	// write address and direction (1's the read bit)
                            760 ;     genLeftShift
                            761 ;     genLeftShiftLiteral
                            762 ;     genlshOne
                            763 ;	Peephole 254	optimized left shift
   001A EA                  764 	mov	a,r2
   001B 2A                  765 	add	a,r2
   001C FA                  766 	mov	r2,a
                            767 ;     genOr
   001D 90 E6 79            768 	mov	dptr,#_I2DAT
   0020 74 01               769 	mov	a,#0x01
   0022 4A                  770 	orl	a,r2
   0023 F0                  771 	movx	@dptr,a
                            772 ;Initial/src/lib/i2c.c:49: while ((I2CS & bmDONE) == 0)
   0024                     773 00106$:
                            774 ;     genAssign
   0024 90 E6 78            775 	mov	dptr,#_I2CS
   0027 E0                  776 	movx	a,@dptr
   0028 FA                  777 	mov	r2,a
                            778 ;     genAnd
   0029 53 02 01            779 	anl	ar2,#0x01
                            780 ;     genCmpEq
   002C BA 00 02            781 	cjne	r2,#0x00,00151$
                            782 ;	Peephole 112.b	changed ljmp to sjmp
   002F 80 F3               783 	sjmp	00106$
   0031                     784 00151$:
                            785 ;Initial/src/lib/i2c.c:52: if ((I2CS & bmBERR) || (I2CS & bmACK) == 0)	// no device answered...
                            786 ;     genAssign
   0031 90 E6 78            787 	mov	dptr,#_I2CS
   0034 E0                  788 	movx	a,@dptr
                            789 ;     genAnd
                            790 ;	Peephole 105	removed redundant mov
   0035 FA                  791 	mov	r2,a
                            792 ;     genIfxJump
   0036 30 E2 03            793 	jnb	acc.2,00152$
   0039 02s00rCB            794 	ljmp	00129$
   003C                     795 00152$:
                            796 ;     genAssign
   003C 90 E6 78            797 	mov	dptr,#_I2CS
   003F E0                  798 	movx	a,@dptr
   0040 FA                  799 	mov	r2,a
                            800 ;     genAnd
   0041 53 02 02            801 	anl	ar2,#0x02
                            802 ;     genCmpEq
   0044 BA 00 03            803 	cjne	r2,#0x00,00153$
   0047 02s00rCB            804 	ljmp	00129$
   004A                     805 00153$:
                            806 ;Initial/src/lib/i2c.c:55: if (len == 1)
                            807 ;     genCmpEq
   004A E5*02               808 	mov	a,_i2c_read_PARM_3
                            809 ;	Peephole 112.b	changed ljmp to sjmp
                            810 ;	Peephole 199	optimized misc jump sequence
   004C B4 01 08            811 	cjne	a,#0x01,00113$
                            812 ;00154$:
                            813 ;	Peephole 200	removed redundant sjmp
   004F                     814 00155$:
                            815 ;Initial/src/lib/i2c.c:56: I2CS |= bmLASTRD;
                            816 ;     genAssign
                            817 ;     genOr
                            818 ;	Peephole 248.a	optimized or to xdata
   004F 90 E6 78            819 	mov	dptr,#_I2CS
   0052 E0                  820 	movx	a,@dptr
   0053 FA                  821 	mov	r2,a
   0054 44 20               822 	orl	a,#0x20
   0056 F0                  823 	movx	@dptr,a
   0057                     824 00113$:
                            825 ;Initial/src/lib/i2c.c:58: junk = I2DAT;			// trigger the first read cycle
                            826 ;     genAssign
   0057 90 E6 79            827 	mov	dptr,#_I2DAT
   005A E0                  828 	movx	a,@dptr
   005B F5*03               829 	mov	_i2c_read_junk_1_1,a
                            830 ;Initial/src/lib/i2c.c:60: while (--len != 0){
                            831 ;     genAssign
   005D AA*00               832 	mov	r2,_i2c_read_PARM_2
   005F AB*01               833 	mov	r3,(_i2c_read_PARM_2 + 1)
                            834 ;     genAssign
   0061 AC*02               835 	mov	r4,_i2c_read_PARM_3
   0063                     836 00121$:
                            837 ;     genMinus
                            838 ;     genMinusDec
                            839 ;     genCmpEq
                            840 ;	Peephole 257	optimized decrement with compare
   0063 DC 02               841 	djnz	r4,00156$
                            842 ;	Peephole 112.b	changed ljmp to sjmp
   0065 80 35               843 	sjmp	00124$
   0067                     844 00156$:
                            845 ;Initial/src/lib/i2c.c:61: while ((I2CS & bmDONE) == 0)
   0067                     846 00114$:
                            847 ;     genAssign
   0067 90 E6 78            848 	mov	dptr,#_I2CS
   006A E0                  849 	movx	a,@dptr
   006B FD                  850 	mov	r5,a
                            851 ;     genAnd
   006C 53 05 01            852 	anl	ar5,#0x01
                            853 ;     genCmpEq
   006F BD 00 02            854 	cjne	r5,#0x00,00157$
                            855 ;	Peephole 112.b	changed ljmp to sjmp
   0072 80 F3               856 	sjmp	00114$
   0074                     857 00157$:
                            858 ;Initial/src/lib/i2c.c:64: if (I2CS & bmBERR)
                            859 ;     genAssign
   0074 90 E6 78            860 	mov	dptr,#_I2CS
   0077 E0                  861 	movx	a,@dptr
                            862 ;     genAnd
                            863 ;	Peephole 105	removed redundant mov
   0078 FD                  864 	mov	r5,a
                            865 ;     genIfxJump
                            866 ;	Peephole 112.a	removed ljmp by inverse jump logic
   0079 20 E2 4F            867 	jb	acc.2,00129$
   007C                     868 00158$:
                            869 ;Initial/src/lib/i2c.c:67: if (len == 1)
                            870 ;     genCmpEq
                            871 ;	Peephole 112.b	changed ljmp to sjmp
                            872 ;	Peephole 199	optimized misc jump sequence
   007C BC 01 08            873 	cjne	r4,#0x01,00120$
                            874 ;00159$:
                            875 ;	Peephole 200	removed redundant sjmp
   007F                     876 00160$:
                            877 ;Initial/src/lib/i2c.c:68: I2CS |= bmLASTRD;
                            878 ;     genAssign
                            879 ;     genOr
                            880 ;	Peephole 248.a	optimized or to xdata
   007F 90 E6 78            881 	mov	dptr,#_I2CS
   0082 E0                  882 	movx	a,@dptr
   0083 FD                  883 	mov	r5,a
   0084 44 20               884 	orl	a,#0x20
   0086 F0                  885 	movx	@dptr,a
   0087                     886 00120$:
                            887 ;Initial/src/lib/i2c.c:70: *buf++ = I2DAT;		// get data, trigger another read
                            888 ;     genAssign
   0087 90 E6 79            889 	mov	dptr,#_I2DAT
   008A E0                  890 	movx	a,@dptr
                            891 ;     genPointerSet
                            892 ;     genFarPointerSet
                            893 ;	Peephole 136	removed redundant moves
   008B FD                  894 	mov	r5,a
   008C 8A 82               895 	mov	dpl,r2
   008E 8B 83               896 	mov	dph,r3
   0090 F0                  897 	movx	@dptr,a
   0091 A3                  898 	inc	dptr
   0092 AA 82               899 	mov	r2,dpl
   0094 AB 83               900 	mov	r3,dph
                            901 ;     genAssign
   0096 8A*00               902 	mov	_i2c_read_PARM_2,r2
   0098 8B*01               903 	mov	(_i2c_read_PARM_2 + 1),r3
                            904 ;Initial/src/lib/i2c.c:75: while ((I2CS & bmDONE) == 0)
                            905 ;	Peephole 112.b	changed ljmp to sjmp
   009A 80 C7               906 	sjmp	00121$
   009C                     907 00124$:
                            908 ;     genAssign
   009C 90 E6 78            909 	mov	dptr,#_I2CS
   009F E0                  910 	movx	a,@dptr
   00A0 FA                  911 	mov	r2,a
                            912 ;     genAnd
   00A1 53 02 01            913 	anl	ar2,#0x01
                            914 ;     genCmpEq
   00A4 BA 00 02            915 	cjne	r2,#0x00,00161$
                            916 ;	Peephole 112.b	changed ljmp to sjmp
   00A7 80 F3               917 	sjmp	00124$
   00A9                     918 00161$:
                            919 ;Initial/src/lib/i2c.c:78: if (I2CS & bmBERR)
                            920 ;     genAssign
   00A9 90 E6 78            921 	mov	dptr,#_I2CS
   00AC E0                  922 	movx	a,@dptr
                            923 ;     genAnd
                            924 ;	Peephole 105	removed redundant mov
   00AD FA                  925 	mov	r2,a
                            926 ;     genIfxJump
                            927 ;	Peephole 112.a	removed ljmp by inverse jump logic
   00AE 20 E2 1A            928 	jb	acc.2,00129$
   00B1                     929 00162$:
                            930 ;Initial/src/lib/i2c.c:81: I2CS |= bmSTOP;
                            931 ;     genAssign
                            932 ;     genOr
                            933 ;	Peephole 248.a	optimized or to xdata
   00B1 90 E6 78            934 	mov	dptr,#_I2CS
   00B4 E0                  935 	movx	a,@dptr
   00B5 FA                  936 	mov	r2,a
   00B6 44 40               937 	orl	a,#0x40
   00B8 F0                  938 	movx	@dptr,a
                            939 ;Initial/src/lib/i2c.c:82: *buf = I2DAT;
                            940 ;     genAssign
   00B9 AA*00               941 	mov	r2,_i2c_read_PARM_2
   00BB AB*01               942 	mov	r3,(_i2c_read_PARM_2 + 1)
                            943 ;     genAssign
   00BD 90 E6 79            944 	mov	dptr,#_I2DAT
   00C0 E0                  945 	movx	a,@dptr
                            946 ;     genPointerSet
                            947 ;     genFarPointerSet
                            948 ;	Peephole 136	removed redundant moves
   00C1 FC                  949 	mov	r4,a
   00C2 8A 82               950 	mov	dpl,r2
   00C4 8B 83               951 	mov	dph,r3
   00C6 F0                  952 	movx	@dptr,a
                            953 ;Initial/src/lib/i2c.c:84: return 1;
                            954 ;     genRet
   00C7 75 82 01            955 	mov	dpl,#0x01
                            956 ;Initial/src/lib/i2c.c:86: fail:
                            957 ;	Peephole 112.b	changed ljmp to sjmp
                            958 ;	Peephole 251.b	replaced sjmp to ret with ret
   00CA 22                  959 	ret
   00CB                     960 00129$:
                            961 ;Initial/src/lib/i2c.c:87: I2CS |= bmSTOP;
                            962 ;     genAssign
                            963 ;     genOr
                            964 ;	Peephole 248.a	optimized or to xdata
   00CB 90 E6 78            965 	mov	dptr,#_I2CS
   00CE E0                  966 	movx	a,@dptr
   00CF FA                  967 	mov	r2,a
   00D0 44 40               968 	orl	a,#0x40
   00D2 F0                  969 	movx	@dptr,a
                            970 ;Initial/src/lib/i2c.c:88: return 0;
                            971 ;     genRet
   00D3 75 82 00            972 	mov	dpl,#0x00
   00D6                     973 00130$:
   00D6 22                  974 	ret
                            975 ;------------------------------------------------------------
                            976 ;Allocation info for local variables in function 'i2c_write'
                            977 ;------------------------------------------------------------
                            978 ;buf                       Allocated with name '_i2c_write_PARM_2'
                            979 ;len                       Allocated with name '_i2c_write_PARM_3'
                            980 ;addr                      Allocated to registers r2 
                            981 ;------------------------------------------------------------
                            982 ;Initial/src/lib/i2c.c:95: i2c_write (unsigned char addr, xdata const unsigned char *buf, unsigned char len)
                            983 ;	-----------------------------------------
                            984 ;	 function i2c_write
                            985 ;	-----------------------------------------
   00D7                     986 _i2c_write:
                            987 ;     genReceive
   00D7 AA 82               988 	mov	r2,dpl
                            989 ;Initial/src/lib/i2c.c:97: while (I2CS & bmSTOP)		// wait for stop to clear
   00D9                     990 00101$:
                            991 ;     genAssign
   00D9 90 E6 78            992 	mov	dptr,#_I2CS
   00DC E0                  993 	movx	a,@dptr
                            994 ;     genAnd
                            995 ;	Peephole 105	removed redundant mov
   00DD FB                  996 	mov	r3,a
                            997 ;     genIfxJump
                            998 ;	Peephole 112.a	removed ljmp by inverse jump logic
   00DE 20 E6 F8            999 	jb	acc.6,00101$
   00E1                    1000 00133$:
                           1001 ;Initial/src/lib/i2c.c:100: I2CS = bmSTART;
                           1002 ;     genAssign
   00E1 90 E6 78           1003 	mov	dptr,#_I2CS
   00E4 74 80              1004 	mov	a,#0x80
   00E6 F0                 1005 	movx	@dptr,a
                           1006 ;Initial/src/lib/i2c.c:101: I2DAT = (addr << 1) | 0;	// write address and direction (0's the write bit)
                           1007 ;     genLeftShift
                           1008 ;     genLeftShiftLiteral
                           1009 ;     genlshOne
                           1010 ;	Peephole 254	optimized left shift
   00E7 EA                 1011 	mov	a,r2
   00E8 2A                 1012 	add	a,r2
                           1013 ;     genAssign
                           1014 ;	Peephole 100	removed redundant mov
   00E9 FA                 1015 	mov	r2,a
   00EA 90 E6 79           1016 	mov	dptr,#_I2DAT
   00ED F0                 1017 	movx	@dptr,a
                           1018 ;Initial/src/lib/i2c.c:103: while ((I2CS & bmDONE) == 0)
   00EE                    1019 00104$:
                           1020 ;     genAssign
   00EE 90 E6 78           1021 	mov	dptr,#_I2CS
   00F1 E0                 1022 	movx	a,@dptr
   00F2 FA                 1023 	mov	r2,a
                           1024 ;     genAnd
   00F3 53 02 01           1025 	anl	ar2,#0x01
                           1026 ;     genCmpEq
   00F6 BA 00 02           1027 	cjne	r2,#0x00,00134$
                           1028 ;	Peephole 112.b	changed ljmp to sjmp
   00F9 80 F3              1029 	sjmp	00104$
   00FB                    1030 00134$:
                           1031 ;Initial/src/lib/i2c.c:106: if ((I2CS & bmBERR) || (I2CS & bmACK) == 0)	// no device answered...
                           1032 ;     genAssign
   00FB 90 E6 78           1033 	mov	dptr,#_I2CS
   00FE E0                 1034 	movx	a,@dptr
                           1035 ;     genAnd
                           1036 ;	Peephole 105	removed redundant mov
   00FF FA                 1037 	mov	r2,a
                           1038 ;     genIfxJump
                           1039 ;	Peephole 112.a	removed ljmp by inverse jump logic
   0100 20 E2 57           1040 	jb	acc.2,00119$
   0103                    1041 00135$:
                           1042 ;     genAssign
   0103 90 E6 78           1043 	mov	dptr,#_I2CS
   0106 E0                 1044 	movx	a,@dptr
   0107 FA                 1045 	mov	r2,a
                           1046 ;     genAnd
   0108 53 02 02           1047 	anl	ar2,#0x02
                           1048 ;     genCmpEq
   010B BA 00 02           1049 	cjne	r2,#0x00,00136$
                           1050 ;	Peephole 112.b	changed ljmp to sjmp
   010E 80 4A              1051 	sjmp	00119$
   0110                    1052 00136$:
                           1053 ;Initial/src/lib/i2c.c:109: while (len > 0){
                           1054 ;     genAssign
   0110 AA*00              1055 	mov	r2,_i2c_write_PARM_2
   0112 AB*01              1056 	mov	r3,(_i2c_write_PARM_2 + 1)
                           1057 ;     genAssign
   0114 AC*02              1058 	mov	r4,_i2c_write_PARM_3
   0116                    1059 00116$:
                           1060 ;     genCmpGt
                           1061 ;     genCmp
                           1062 ;     genIfxJump
                           1063 ;	Peephole 108	removed ljmp by inverse jump logic
                           1064 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0116 EC                 1065 	mov	a,r4
   0117 24 FF              1066 	add	a,#0xff - 0x00
   0119 50 33              1067 	jnc	00118$
   011B                    1068 00137$:
                           1069 ;Initial/src/lib/i2c.c:110: I2DAT = *buf++;
                           1070 ;     genPointerGet
                           1071 ;     genFarPointerGet
   011B 8A 82              1072 	mov	dpl,r2
   011D 8B 83              1073 	mov	dph,r3
   011F E0                 1074 	movx	a,@dptr
   0120 FD                 1075 	mov	r5,a
   0121 A3                 1076 	inc	dptr
   0122 AA 82              1077 	mov	r2,dpl
   0124 AB 83              1078 	mov	r3,dph
                           1079 ;     genAssign
   0126 90 E6 79           1080 	mov	dptr,#_I2DAT
   0129 ED                 1081 	mov	a,r5
   012A F0                 1082 	movx	@dptr,a
                           1083 ;Initial/src/lib/i2c.c:111: len--;
                           1084 ;     genMinus
                           1085 ;     genMinusDec
   012B 1C                 1086 	dec	r4
                           1087 ;Initial/src/lib/i2c.c:113: while ((I2CS & bmDONE) == 0)
   012C                    1088 00110$:
                           1089 ;     genAssign
   012C 90 E6 78           1090 	mov	dptr,#_I2CS
   012F E0                 1091 	movx	a,@dptr
   0130 FD                 1092 	mov	r5,a
                           1093 ;     genAnd
   0131 53 05 01           1094 	anl	ar5,#0x01
                           1095 ;     genCmpEq
   0134 BD 00 02           1096 	cjne	r5,#0x00,00138$
                           1097 ;	Peephole 112.b	changed ljmp to sjmp
   0137 80 F3              1098 	sjmp	00110$
   0139                    1099 00138$:
                           1100 ;Initial/src/lib/i2c.c:116: if ((I2CS & bmBERR) || (I2CS & bmACK) == 0)	// no device answered...
                           1101 ;     genAssign
   0139 90 E6 78           1102 	mov	dptr,#_I2CS
   013C E0                 1103 	movx	a,@dptr
                           1104 ;     genAnd
                           1105 ;	Peephole 105	removed redundant mov
   013D FD                 1106 	mov	r5,a
                           1107 ;     genIfxJump
                           1108 ;	Peephole 112.a	removed ljmp by inverse jump logic
   013E 20 E2 19           1109 	jb	acc.2,00119$
   0141                    1110 00139$:
                           1111 ;     genAssign
   0141 90 E6 78           1112 	mov	dptr,#_I2CS
   0144 E0                 1113 	movx	a,@dptr
   0145 FD                 1114 	mov	r5,a
                           1115 ;     genAnd
   0146 53 05 02           1116 	anl	ar5,#0x02
                           1117 ;     genCmpEq
                           1118 ;	Peephole 112.b	changed ljmp to sjmp
                           1119 ;	Peephole 199	optimized misc jump sequence
   0149 BD 00 CA           1120 	cjne	r5,#0x00,00116$
                           1121 ;00140$:
                           1122 ;	Peephole 200	removed redundant sjmp
   014C                    1123 00141$:
                           1124 ;Initial/src/lib/i2c.c:117: goto fail;
                           1125 ;	Peephole 112.b	changed ljmp to sjmp
   014C 80 0C              1126 	sjmp	00119$
   014E                    1127 00118$:
                           1128 ;Initial/src/lib/i2c.c:120: I2CS |= bmSTOP;
                           1129 ;     genAssign
                           1130 ;     genOr
                           1131 ;	Peephole 248.a	optimized or to xdata
   014E 90 E6 78           1132 	mov	dptr,#_I2CS
   0151 E0                 1133 	movx	a,@dptr
   0152 FA                 1134 	mov	r2,a
   0153 44 40              1135 	orl	a,#0x40
   0155 F0                 1136 	movx	@dptr,a
                           1137 ;Initial/src/lib/i2c.c:121: return 1;
                           1138 ;     genRet
   0156 75 82 01           1139 	mov	dpl,#0x01
                           1140 ;Initial/src/lib/i2c.c:123: fail:
                           1141 ;	Peephole 112.b	changed ljmp to sjmp
                           1142 ;	Peephole 251.b	replaced sjmp to ret with ret
   0159 22                 1143 	ret
   015A                    1144 00119$:
                           1145 ;Initial/src/lib/i2c.c:124: I2CS |= bmSTOP;
                           1146 ;     genAssign
                           1147 ;     genOr
                           1148 ;	Peephole 248.a	optimized or to xdata
   015A 90 E6 78           1149 	mov	dptr,#_I2CS
   015D E0                 1150 	movx	a,@dptr
   015E FA                 1151 	mov	r2,a
   015F 44 40              1152 	orl	a,#0x40
   0161 F0                 1153 	movx	@dptr,a
                           1154 ;Initial/src/lib/i2c.c:125: return 0;
                           1155 ;     genRet
   0162 75 82 00           1156 	mov	dpl,#0x00
   0165                    1157 00120$:
   0165 22                 1158 	ret
                           1159 	.area CSEG    (CODE)
                           1160 	.area XINIT   (CODE)
