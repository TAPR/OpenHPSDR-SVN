--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Logic ELements" INPUT_A_FIXED_VALUE="Bx" INPUT_A_IS_CONSTANT="NO" INPUT_B_FIXED_VALUE="Bx" INPUT_B_IS_CONSTANT="NO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=17 LPM_WIDTHB=11 LPM_WIDTHP=28 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_mult 2006:05:18:13:55:50:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_padd 2006:01:12:17:31:50:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ cbx_util_mgl 2006:01:09:10:46:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 235 
SUBDESIGN mult_kh71
( 
	dataa[16..0]	:	input;
	datab[10..0]	:	input;
	result[27..0]	:	output;
) 
VARIABLE
	add13_result[24..0]	:	WIRE;
	add17_result[21..0]	:	WIRE;
	add21_result[17..0]	:	WIRE;
	add25_result[13..0]	:	WIRE;
	add29_result[9..0]	:	WIRE;
	add9_result[27..0]	:	WIRE;
	cs1a[5..0] : carry_sum;
	cs3a[4..0] : carry_sum;
	le2a[16..0] : lcell;
	le4a[17..0] : lcell;
	le5a[17..0] : lcell;
	le6a[17..0] : lcell;
	le7a[17..0] : lcell;
	le8a[17..0] : lcell;
	sft10a[27..0] : soft;
	sft11a[27..0] : soft;
	sft12a[27..0] : soft;
	sft14a[24..0] : soft;
	sft15a[24..0] : soft;
	sft16a[24..0] : soft;
	sft18a[21..0] : soft;
	sft19a[21..0] : soft;
	sft20a[21..0] : soft;
	sft22a[17..0] : soft;
	sft23a[17..0] : soft;
	sft24a[17..0] : soft;
	sft26a[13..0] : soft;
	sft27a[13..0] : soft;
	sft28a[13..0] : soft;
	sft30a[9..0] : soft;
	sft31a[9..0] : soft;
	sft32a[9..0] : soft;
	dataa_node[16..0]	: WIRE;
	datab_node[10..0]	: WIRE;
	final_result_node[27..0]	: WIRE;
	w12w[16..0]	: WIRE;
	w175w[17..0]	: WIRE;
	w176w[17..0]	: WIRE;
	w177w[17..0]	: WIRE;
	w186w[17..0]	: WIRE;
	w187w[17..0]	: WIRE;
	w224w	: WIRE;
	w233w	: WIRE;
	w235w[17..0]	: WIRE;
	w236w[17..0]	: WIRE;
	w237w[17..0]	: WIRE;
	w245w[17..0]	: WIRE;
	w246w[17..0]	: WIRE;
	w271w	: WIRE;
	w273w	: WIRE;
	w275w	: WIRE;
	w277w	: WIRE;
	w279w	: WIRE;
	w281w	: WIRE;
	w283w	: WIRE;
	w285w	: WIRE;
	w289w	: WIRE;
	w291w	: WIRE;
	w292w[17..0]	: WIRE;
	w293w[17..0]	: WIRE;
	w294w[17..0]	: WIRE;
	w302w[17..0]	: WIRE;
	w303w[17..0]	: WIRE;
	w320w	: WIRE;
	w322w	: WIRE;
	w324w	: WIRE;
	w326w	: WIRE;
	w328w	: WIRE;
	w330w	: WIRE;
	w332w	: WIRE;
	w334w	: WIRE;
	w336w	: WIRE;
	w338w	: WIRE;
	w340w	: WIRE;
	w342w	: WIRE;
	w344w	: WIRE;
	w346w	: WIRE;
	w348w	: WIRE;
	w350w	: WIRE;
	w354w	: WIRE;
	w356w	: WIRE;
	w357w[17..0]	: WIRE;
	w358w[17..0]	: WIRE;
	w359w[17..0]	: WIRE;
	w367w[17..0]	: WIRE;
	w368w[17..0]	: WIRE;
	w385w	: WIRE;
	w387w	: WIRE;
	w389w	: WIRE;
	w391w	: WIRE;
	w393w	: WIRE;
	w395w	: WIRE;
	w397w	: WIRE;
	w399w	: WIRE;
	w401w	: WIRE;
	w403w	: WIRE;
	w405w	: WIRE;
	w407w	: WIRE;
	w409w	: WIRE;
	w411w	: WIRE;
	w413w	: WIRE;
	w415w	: WIRE;
	w419w	: WIRE;
	w421w	: WIRE;
	w422w[17..0]	: WIRE;
	w423w[17..0]	: WIRE;
	w424w[17..0]	: WIRE;
	w432w[17..0]	: WIRE;
	w433w[17..0]	: WIRE;
	w450w	: WIRE;
	w452w	: WIRE;
	w454w	: WIRE;
	w456w	: WIRE;
	w458w	: WIRE;
	w460w	: WIRE;
	w462w	: WIRE;
	w464w	: WIRE;
	w466w	: WIRE;
	w468w	: WIRE;
	w470w	: WIRE;
	w472w	: WIRE;
	w474w	: WIRE;
	w476w	: WIRE;
	w478w	: WIRE;
	w480w	: WIRE;
	w484w	: WIRE;
	w486w	: WIRE;
	w487w	: WIRE;
	w488w	: WIRE;
	w489w	: WIRE;
	w490w	: WIRE;
	w491w	: WIRE;
	w492w	: WIRE;
	w494w	: WIRE;
	w495w	: WIRE;
	w496w	: WIRE;
	w497w	: WIRE;
	w498w	: WIRE;
	w499w	: WIRE;
	w500w	: WIRE;
	w501w	: WIRE;
	w502w	: WIRE;
	w503w	: WIRE;
	w504w	: WIRE;
	w505w	: WIRE;
	w506w	: WIRE;
	w507w	: WIRE;
	w508w	: WIRE;
	w509w	: WIRE;
	w510w	: WIRE;
	w511w	: WIRE;
	w512w	: WIRE;
	w513w	: WIRE;
	w514w	: WIRE;
	w515w	: WIRE;
	w516w	: WIRE;
	w519w	: WIRE;
	w7w[11..0]	: WIRE;
	w860w[27..0]	: WIRE;

BEGIN 
	add13_result[] = sft14a[].out + sft15a[].out;
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	add29_result[] = sft30a[].out + sft31a[].out;
	add9_result[] = sft10a[].out + sft11a[].out;
	cs1a[].cin = ( B"0", ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs1a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[4].cout, ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), ((((((! w7w[7..7]) & w7w[6..6]) & cs1a[2].cout) # ((w7w[7..7] & w7w[6..6]) & (! cs1a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs1a[2].cout)) # ((w7w[7..7] & (! w7w[6..6])) & (! cs1a[2].cout))), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( ((w7w[8..8] & cs3a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs3a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( ((((((! w7w[9..9]) & (! w7w[8..8])) & cs3a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs3a[3].cout)), ((((((! w7w[7..7]) & (! w7w[6..6])) & cs3a[2].cout) # (((! w7w[7..7]) & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs3a[2].cout)), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le2a[].in = (((w7w[10..10] & cs1a[5].sout) # ((w7w[10..10] & (! cs1a[5].sout)) & (! dataa_node[]))) # (((! w7w[10..10]) & cs1a[5].sout) & dataa_node[]));
	le4a[].in = (! ((! w186w[]) & (! w187w[])));
	le5a[].in = (! ((! w245w[]) & (! w246w[])));
	le6a[].in = (! ((! w302w[]) & (! w303w[])));
	le7a[].in = (! ((! w367w[]) & (! w368w[])));
	le8a[].in = (! ((! w432w[]) & (! w433w[])));
	sft10a[].in = ( w487w, ( (! w12w[16..16]), ( w514w, ( w492w, ( w480w, ( w478w, ( w415w, ( w413w, ( w350w, ( w348w, ( w285w, ( w283w, ( w281w, ( w279w, ( w277w, ( w275w, ( w273w, ( w224w, ( w330w, ( w328w, ( w326w, ( w324w, ( w322w, ( w320w, ( w235w[1..1], ( w235w[0..0], ( w175w[1..0])))))))))))))))))))))))))));
	sft11a[].in = ( w519w, ( w516w, ( w515w, ( w513w, ( w511w, ( w491w, ( w476w, ( w474w, ( w411w, ( w409w, ( w346w, ( w344w, ( w342w, ( w340w, ( w338w, ( w336w, ( w334w, ( w271w, ( w391w, ( w389w, ( w387w, ( w385w, ( w495w, ( w356w, ( w494w, ( w291w, ( w519w, w233w)))))))))))))))))))))))))));
	sft12a[].in = add9_result[];
	sft14a[].in = ( w519w, ( w12w[15..15], ( w12w[14..14], ( w12w[13..13], ( w12w[12..12], ( w12w[11..11], ( w12w[10..10], ( w12w[9..9], ( w12w[8..8], ( w407w, ( w12w[6..6], ( w12w[5..5], ( w12w[4..4], ( w12w[3..3], ( w12w[2..2], ( w12w[1..1], ( w332w, ( w422w[1..1], ( w422w[0..0], ( w357w[1..1], ( w357w[0..0], ( w292w[1..1], ( w292w[0..0], ( w175w[3..2]))))))))))))))))))))))));
	sft15a[].in = ( w519w, ( (! w422w[17..17]), ( w422w[16..16], ( w422w[15..15], ( w510w, ( w508w, ( w490w, ( w472w, ( w470w, ( w488w, ( w405w, ( w403w, ( w401w, ( w399w, ( w397w, ( w395w, ( w454w, ( w452w, ( w450w, ( w496w, ( w421w, ( w235w[3..3], ( w235w[2..2], ( w519w, w289w))))))))))))))))))))))));
	sft16a[].in = add13_result[];
	sft18a[].in = ( w519w, ( w487w, ( (! w357w[17..17]), ( w422w[14..14], ( w422w[13..13], ( w422w[12..12], ( w505w, ( w489w, ( w12w[7..7], ( w466w, ( w464w, ( w462w, ( w460w, ( w458w, ( w456w, ( w12w[0..0], ( w357w[3..3], ( w357w[2..2], ( w292w[3..3], ( w292w[2..2], ( w175w[5..5], w354w)))))))))))))))))))));
	sft19a[].in = ( w519w, ( w519w, ( w512w, ( w357w[16..16], ( w509w, ( w507w, ( w506w, ( w504w, ( w468w, ( w503w, ( w502w, ( w501w, ( w500w, ( w499w, ( w498w, ( w393w, ( w497w, ( w486w, ( w235w[5..5], ( w235w[4..4], ( w519w, w175w[4..4])))))))))))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w519w, ( w487w, ( w357w[15..15], ( w357w[14..14], ( w422w[11..11], ( w422w[10..10], ( w422w[9..9], ( w422w[8..8], ( w422w[7..7], ( w422w[6..6], ( w422w[5..5], ( w422w[4..4], ( w422w[3..3], ( w422w[2..2], ( w292w[5..5], ( w292w[4..4], ( w175w[7..6])))))))))))))))));
	sft23a[].in = ( w519w, ( w519w, ( (! w292w[17..17]), ( w292w[16..16], ( w357w[13..13], ( w357w[12..12], ( w357w[11..11], ( w357w[10..10], ( w357w[9..9], ( w357w[8..8], ( w357w[7..7], ( w357w[6..6], ( w357w[5..5], ( w357w[4..4], ( w235w[7..7], ( w235w[6..6], ( w519w, w419w)))))))))))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w519w, ( w487w, ( w292w[15..15], ( w292w[14..14], ( w292w[13..13], ( w292w[12..12], ( w292w[11..11], ( w292w[10..10], ( w292w[9..9], ( w292w[8..8], ( w292w[7..7], ( w292w[6..6], ( w175w[9..9], w484w)))))))))))));
	sft27a[].in = ( w519w, ( w519w, ( (! w235w[17..17]), ( w235w[16..16], ( w235w[15..15], ( w235w[14..14], ( w235w[13..13], ( w235w[12..12], ( w235w[11..11], ( w235w[10..10], ( w235w[9..9], ( w235w[8..8], ( w519w, w175w[8..8])))))))))))));
	sft28a[].in = add25_result[];
	sft30a[].in = ( w519w, ( w487w, ( (! w175w[17..17]), ( w175w[16..16], ( w175w[15..15], ( w175w[14..14], ( w175w[13..13], ( w175w[12..12], ( w175w[11..11], w7w[10..10])))))))));
	sft31a[].in = ( w519w, ( w519w, ( w487w, ( w519w, ( w519w, ( w519w, ( w519w, ( w519w, ( w519w, w175w[10..10])))))))));
	sft32a[].in = add29_result[];
	dataa_node[] = ( dataa[16..0]);
	datab_node[] = ( datab[10..0]);
	final_result_node[] = ( w860w[27..0]);
	result[] = ( final_result_node[27..0]);
	w12w[] = le2a[].out;
	w175w[] = le4a[].out;
	w176w[] = ( dataa_node[], B"0");
	w177w[] = ( dataa_node[16..16], dataa_node[]);
	w186w[] = (((! w176w[]) & cs1a[0].sout) & (! cs3a[0].sout));
	w187w[] = ((((! w177w[]) & cs1a[0].sout) & cs3a[0].sout) # ((w177w[] & (! cs1a[0].sout)) & cs3a[0].sout));
	w224w = sft16a[8..8].out;
	w233w = cs1a[0].sout;
	w235w[] = le5a[].out;
	w236w[] = ( dataa_node[], B"0");
	w237w[] = ( dataa_node[16..16], dataa_node[]);
	w245w[] = (((! w236w[]) & cs1a[1].sout) & (! cs3a[1].sout));
	w246w[] = ((((! w237w[]) & cs1a[1].sout) & cs3a[1].sout) # ((w237w[] & (! cs1a[1].sout)) & cs3a[1].sout));
	w271w = sft20a[6..6].out;
	w273w = sft16a[9..9].out;
	w275w = sft16a[10..10].out;
	w277w = sft16a[11..11].out;
	w279w = sft16a[12..12].out;
	w281w = sft16a[13..13].out;
	w283w = sft16a[14..14].out;
	w285w = sft16a[15..15].out;
	w289w = cs1a[1].sout;
	w291w = sft16a[0..0].out;
	w292w[] = le6a[].out;
	w293w[] = ( dataa_node[], B"0");
	w294w[] = ( dataa_node[16..16], dataa_node[]);
	w302w[] = (((! w293w[]) & cs1a[2].sout) & (! cs3a[2].sout));
	w303w[] = ((((! w294w[]) & cs1a[2].sout) & cs3a[2].sout) # ((w294w[] & (! cs1a[2].sout)) & cs3a[2].sout));
	w320w = sft16a[2..2].out;
	w322w = sft16a[3..3].out;
	w324w = sft16a[4..4].out;
	w326w = sft16a[5..5].out;
	w328w = sft16a[6..6].out;
	w330w = sft16a[7..7].out;
	w332w = sft24a[4..4].out;
	w334w = sft20a[7..7].out;
	w336w = sft20a[8..8].out;
	w338w = sft20a[9..9].out;
	w340w = sft20a[10..10].out;
	w342w = sft20a[11..11].out;
	w344w = sft20a[12..12].out;
	w346w = sft20a[13..13].out;
	w348w = sft16a[16..16].out;
	w350w = sft16a[17..17].out;
	w354w = cs1a[2].sout;
	w356w = sft20a[0..0].out;
	w357w[] = le7a[].out;
	w358w[] = ( dataa_node[], B"0");
	w359w[] = ( dataa_node[16..16], dataa_node[]);
	w367w[] = (((! w358w[]) & cs1a[3].sout) & (! cs3a[3].sout));
	w368w[] = ((((! w359w[]) & cs1a[3].sout) & cs3a[3].sout) # ((w359w[] & (! cs1a[3].sout)) & cs3a[3].sout));
	w385w = sft20a[2..2].out;
	w387w = sft20a[3..3].out;
	w389w = sft20a[4..4].out;
	w391w = sft20a[5..5].out;
	w393w = sft32a[0..0].out;
	w395w = sft24a[5..5].out;
	w397w = sft24a[6..6].out;
	w399w = sft24a[7..7].out;
	w401w = sft24a[8..8].out;
	w403w = sft24a[9..9].out;
	w405w = sft24a[10..10].out;
	w407w = sft24a[11..11].out;
	w409w = sft20a[14..14].out;
	w411w = sft20a[15..15].out;
	w413w = sft16a[18..18].out;
	w415w = sft16a[19..19].out;
	w419w = cs1a[3].sout;
	w421w = sft24a[0..0].out;
	w422w[] = le8a[].out;
	w423w[] = ( dataa_node[], B"0");
	w424w[] = ( dataa_node[16..16], dataa_node[]);
	w432w[] = (((! w423w[]) & cs1a[4].sout) & (! cs3a[4].sout));
	w433w[] = ((((! w424w[]) & cs1a[4].sout) & cs3a[4].sout) # ((w424w[] & (! cs1a[4].sout)) & cs3a[4].sout));
	w450w = sft24a[2..2].out;
	w452w = sft24a[3..3].out;
	w454w = sft28a[2..2].out;
	w456w = sft28a[3..3].out;
	w458w = sft28a[4..4].out;
	w460w = sft28a[5..5].out;
	w462w = sft28a[6..6].out;
	w464w = sft28a[7..7].out;
	w466w = sft28a[8..8].out;
	w468w = sft32a[7..7].out;
	w470w = sft24a[12..12].out;
	w472w = sft24a[13..13].out;
	w474w = sft20a[16..16].out;
	w476w = sft20a[17..17].out;
	w478w = sft16a[20..20].out;
	w480w = sft16a[21..21].out;
	w484w = cs1a[4].sout;
	w486w = sft28a[0..0].out;
	w487w = B"1";
	w488w = sft28a[9..9].out;
	w489w = sft28a[10..10].out;
	w490w = sft24a[14..14].out;
	w491w = sft20a[18..18].out;
	w492w = sft16a[22..22].out;
	w494w = sft16a[1..1].out;
	w495w = sft20a[1..1].out;
	w496w = sft24a[1..1].out;
	w497w = sft28a[1..1].out;
	w498w = sft32a[1..1].out;
	w499w = sft32a[2..2].out;
	w500w = sft32a[3..3].out;
	w501w = sft32a[4..4].out;
	w502w = sft32a[5..5].out;
	w503w = sft32a[6..6].out;
	w504w = sft32a[8..8].out;
	w505w = sft28a[11..11].out;
	w506w = sft32a[9..9].out;
	w507w = sft28a[12..12].out;
	w508w = sft24a[15..15].out;
	w509w = sft28a[13..13].out;
	w510w = sft24a[16..16].out;
	w511w = sft20a[19..19].out;
	w512w = sft24a[17..17].out;
	w513w = sft20a[20..20].out;
	w514w = sft16a[23..23].out;
	w515w = sft20a[21..21].out;
	w516w = sft16a[24..24].out;
	w519w = B"0";
	w7w[] = ( datab_node[10..10], datab_node[]);
	w860w[] = ( sft12a[27..27].out, sft12a[26..26].out, sft12a[25..25].out, sft12a[24..24].out, sft12a[23..23].out, sft12a[22..22].out, sft12a[21..21].out, sft12a[20..20].out, sft12a[19..19].out, sft12a[18..18].out, sft12a[17..17].out, sft12a[16..16].out, sft12a[15..15].out, sft12a[14..14].out, sft12a[13..13].out, sft12a[12..12].out, sft12a[11..11].out, sft12a[10..10].out, sft12a[9..9].out, sft12a[8..8].out, sft12a[7..7].out, sft12a[6..6].out, sft12a[5..5].out, sft12a[4..4].out, sft12a[3..3].out, sft12a[2..2].out, sft12a[1..1].out, sft12a[0..0].out);
END;
--VALID FILE
