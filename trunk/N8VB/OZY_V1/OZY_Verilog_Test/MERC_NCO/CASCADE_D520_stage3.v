// -------------------------------------------------------------
//
// Module: CASCADE_D520_stage3
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-19 12:41:09
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CASCADE_D520_stage3
// TargetDirectory: c:\data
// InputPort: filter_in_stage3
// OutputPort: filter_out_stage3
// AddInputRegister: Off
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
// ClockEnableInputPort: clk_enable_stage3
// ClockEnableOutputPort: ce_out_stage3
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 4
// Polyphase Length   : 8
// Filter Length      : 29
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s18,17 -> [-1 1)
// Input              : s24,15 -> [-256 256)
// Filter Internals   : Specify Precision
//   Output           : s32,32 -> [-5.000000e-001 5.000000e-001)
//   Product          : s41,32 -> [-256 256)
//   Accumulator      : s42,32 -> [-512 512)
//   Round Mode       : convergent
//   Overflow Mode    : wrap
//
// Design Method Information
// Design Algorithm : equiripple
//
// Design Options
// DensityFactor : 16
// MinOrder      : any
// MinPhase      : false
// StopbandDecay : 80
// StopbandShape : linear
//
// Design Specifications
// Sampling Frequency : 0.76923 MHz
// Response           : CIC Compensator
// Specification      : Fp,Fst,Ap,Ast
// MultirateType      : Decimator
// DecimationFactor   : 4e-006 MHz
// NumberOfSections   : 1e-005 MHz
// DifferentialDelay  : 1e-006 MHz
// Passband Edge      : 0.096 MHz
// Stopband Edge      : 0.25 MHz
// Passband Ripple    : 0.01 dB
// Stopband Atten.    : 100 dB
//
// Measurements
// Sampling Frequency : 0.76923 MHz
// Passband Edge      : 0.096 MHz
// 3-dB Point         : 0.1681 MHz
// 6-dB Point         : 0.17671 MHz
// Stopband Edge      : 0.25 MHz
// Passband Ripple    : 0.0057967 dB
// Stopband Atten.    : 90.309 dB
// Transition Width   : 0.154 MHz
//
// Implementation Cost
// Number of Multipliers : 29
// Number of Adders      : 28
// Number of States      : 28
// MultPerInputSample    : 7.25
// AddPerInputSample     : 7
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CASCADE_D520_stage3 
               (
                clk,
                clk_enable_stage3,
                reset,
                filter_in_stage3,
                filter_out_stage3,
                ce_out_stage3
                );

  input   clk; 
  input   clk_enable_stage3; 
  input   reset; 
  input   signed [23:0] filter_in_stage3; //sfix24_En15
  output  signed [31:0] filter_out_stage3; //sfix32_En32
  output  ce_out_stage3; 

////////////////////////////////////////////////////////////////
//Module Architecture: CASCADE_D520_stage3
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [17:0] coeffphase1_1 = 18'b111111111111101010; //sfix18_En17
  parameter signed [17:0] coeffphase1_2 = 18'b000000001000010001; //sfix18_En17
  parameter signed [17:0] coeffphase1_3 = 18'b000001100010011011; //sfix18_En17
  parameter signed [17:0] coeffphase1_4 = 18'b000000101010001100; //sfix18_En17
  parameter signed [17:0] coeffphase1_5 = 18'b000000101010001100; //sfix18_En17
  parameter signed [17:0] coeffphase1_6 = 18'b000001100010011011; //sfix18_En17
  parameter signed [17:0] coeffphase1_7 = 18'b000000001000010001; //sfix18_En17
  parameter signed [17:0] coeffphase1_8 = 18'b111111111111101010; //sfix18_En17
  parameter signed [17:0] coeffphase2_1 = 18'b111111111110110101; //sfix18_En17
  parameter signed [17:0] coeffphase2_2 = 18'b111111110001001010; //sfix18_En17
  parameter signed [17:0] coeffphase2_3 = 18'b000001001100100100; //sfix18_En17
  parameter signed [17:0] coeffphase2_4 = 18'b001011100000100110; //sfix18_En17
  parameter signed [17:0] coeffphase2_5 = 18'b111011011000111110; //sfix18_En17
  parameter signed [17:0] coeffphase2_6 = 18'b000000000010111110; //sfix18_En17
  parameter signed [17:0] coeffphase2_7 = 18'b000000000111000111; //sfix18_En17
  parameter signed [17:0] coeffphase2_8 = 18'b000000000000000000; //sfix18_En17
  parameter signed [17:0] coeffphase3_1 = 18'b000000000000010101; //sfix18_En17
  parameter signed [17:0] coeffphase3_2 = 18'b111111011000100111; //sfix18_En17
  parameter signed [17:0] coeffphase3_3 = 18'b111101101010000111; //sfix18_En17
  parameter signed [17:0] coeffphase3_4 = 18'b010001010001001010; //sfix18_En17
  parameter signed [17:0] coeffphase3_5 = 18'b111101101010000111; //sfix18_En17
  parameter signed [17:0] coeffphase3_6 = 18'b111111011000100111; //sfix18_En17
  parameter signed [17:0] coeffphase3_7 = 18'b000000000000010101; //sfix18_En17
  parameter signed [17:0] coeffphase3_8 = 18'b000000000000000000; //sfix18_En17
  parameter signed [17:0] coeffphase4_1 = 18'b000000000111000111; //sfix18_En17
  parameter signed [17:0] coeffphase4_2 = 18'b000000000010111110; //sfix18_En17
  parameter signed [17:0] coeffphase4_3 = 18'b111011011000111110; //sfix18_En17
  parameter signed [17:0] coeffphase4_4 = 18'b001011100000100110; //sfix18_En17
  parameter signed [17:0] coeffphase4_5 = 18'b000001001100100100; //sfix18_En17
  parameter signed [17:0] coeffphase4_6 = 18'b111111110001001010; //sfix18_En17
  parameter signed [17:0] coeffphase4_7 = 18'b111111111110110101; //sfix18_En17
  parameter signed [17:0] coeffphase4_8 = 18'b000000000000000000; //sfix18_En17
  // Signals
  reg  [3:0] ring_count; // ufix4
  wire phase_0; // boolean
  wire phase_1; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  reg  ce_out_reg; // boolean
  wire signed [23:0] input_typeconvert; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase0 [0:6] ; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase1 [0:6] ; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase2 [0:6] ; // sfix24_En15
  reg  signed [23:0] input_pipeline_phase3 [0:6] ; // sfix24_En15
  wire signed [40:0] product_phase0_1; // sfix41_En32
  wire signed [28:0] mulcsd_temp; // sfix29_En32
  wire signed [40:0] product_phase0_2; // sfix41_En32
  wire signed [33:0] mulcsd_temp_1; // sfix34_En32
  wire signed [40:0] product_phase0_3; // sfix41_En32
  wire signed [37:0] mulcsd_temp_2; // sfix38_En32
  wire signed [40:0] product_phase0_4; // sfix41_En32
  wire signed [35:0] mulcsd_temp_3; // sfix36_En32
  wire signed [40:0] product_phase0_5; // sfix41_En32
  wire signed [35:0] mulcsd_temp_4; // sfix36_En32
  wire signed [40:0] product_phase0_6; // sfix41_En32
  wire signed [37:0] mulcsd_temp_5; // sfix38_En32
  wire signed [40:0] product_phase0_7; // sfix41_En32
  wire signed [33:0] mulcsd_temp_6; // sfix34_En32
  wire signed [40:0] product_phase0_8; // sfix41_En32
  wire signed [28:0] mulcsd_temp_7; // sfix29_En32
  wire signed [40:0] product_phase1_1; // sfix41_En32
  wire signed [30:0] mulcsd_temp_8; // sfix31_En32
  wire signed [40:0] product_phase1_2; // sfix41_En32
  wire signed [34:0] mulcsd_temp_9; // sfix35_En32
  wire signed [40:0] product_phase1_3; // sfix41_En32
  wire signed [36:0] mulcsd_temp_10; // sfix37_En32
  wire signed [40:0] product_phase1_4; // sfix41_En32
  wire signed [39:0] mulcsd_temp_11; // sfix40_En32
  wire signed [40:0] product_phase1_5; // sfix41_En32
  wire signed [38:0] mulcsd_temp_12; // sfix39_En32
  wire signed [40:0] product_phase1_6; // sfix41_En32
  wire signed [31:0] mulcsd_temp_13; // sfix32_En32
  wire signed [40:0] product_phase1_7; // sfix41_En32
  wire signed [33:0] mulcsd_temp_14; // sfix34_En32
  wire signed [40:0] product_phase2_1; // sfix41_En32
  wire signed [28:0] mulcsd_temp_15; // sfix29_En32
  wire signed [40:0] product_phase2_2; // sfix41_En32
  wire signed [35:0] mulcsd_temp_16; // sfix36_En32
  wire signed [40:0] product_phase2_3; // sfix41_En32
  wire signed [37:0] mulcsd_temp_17; // sfix38_En32
  wire signed [40:0] product_phase2_4; // sfix41_En32
  wire signed [40:0] mulcsd_temp_18; // sfix41_En32
  wire signed [40:0] product_phase2_5; // sfix41_En32
  wire signed [37:0] mulcsd_temp_19; // sfix38_En32
  wire signed [40:0] product_phase2_6; // sfix41_En32
  wire signed [35:0] mulcsd_temp_20; // sfix36_En32
  wire signed [40:0] product_phase2_7; // sfix41_En32
  wire signed [28:0] mulcsd_temp_21; // sfix29_En32
  wire signed [40:0] product_phase3_1; // sfix41_En32
  wire signed [33:0] mulcsd_temp_22; // sfix34_En32
  wire signed [40:0] product_phase3_2; // sfix41_En32
  wire signed [31:0] mulcsd_temp_23; // sfix32_En32
  wire signed [40:0] product_phase3_3; // sfix41_En32
  wire signed [38:0] mulcsd_temp_24; // sfix39_En32
  wire signed [40:0] product_phase3_4; // sfix41_En32
  wire signed [39:0] mulcsd_temp_25; // sfix40_En32
  wire signed [40:0] product_phase3_5; // sfix41_En32
  wire signed [36:0] mulcsd_temp_26; // sfix37_En32
  wire signed [40:0] product_phase3_6; // sfix41_En32
  wire signed [34:0] mulcsd_temp_27; // sfix35_En32
  wire signed [40:0] product_phase3_7; // sfix41_En32
  wire signed [30:0] mulcsd_temp_28; // sfix31_En32
  reg  signed [40:0] product_pipeline_phase0_1; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_2; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_3; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_4; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_5; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_6; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_7; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase0_8; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_1; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_2; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_3; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_4; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_5; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_6; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase1_7; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_1; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_2; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_3; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_4; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_5; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_6; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase2_7; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_1; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_2; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_3; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_4; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_5; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_6; // sfix41_En32
  reg  signed [40:0] product_pipeline_phase3_7; // sfix41_En32
  wire signed [41:0] quantized_sum; // sfix42_En32
  wire signed [41:0] sumvector1 [0:14] ; // sfix42_En32
  wire signed [41:0] add_signext; // sfix42_En32
  wire signed [41:0] add_signext_1; // sfix42_En32
  wire signed [42:0] add_temp; // sfix43_En32
  wire signed [40:0] add_signext_2; // sfix41_En32
  wire signed [40:0] add_signext_3; // sfix41_En32
  wire signed [40:0] add_signext_4; // sfix41_En32
  wire signed [40:0] add_signext_5; // sfix41_En32
  wire signed [40:0] add_signext_6; // sfix41_En32
  wire signed [40:0] add_signext_7; // sfix41_En32
  wire signed [40:0] add_signext_8; // sfix41_En32
  wire signed [40:0] add_signext_9; // sfix41_En32
  wire signed [40:0] add_signext_10; // sfix41_En32
  wire signed [40:0] add_signext_11; // sfix41_En32
  wire signed [40:0] add_signext_12; // sfix41_En32
  wire signed [40:0] add_signext_13; // sfix41_En32
  wire signed [40:0] add_signext_14; // sfix41_En32
  wire signed [40:0] add_signext_15; // sfix41_En32
  wire signed [40:0] add_signext_16; // sfix41_En32
  wire signed [40:0] add_signext_17; // sfix41_En32
  wire signed [40:0] add_signext_18; // sfix41_En32
  wire signed [40:0] add_signext_19; // sfix41_En32
  wire signed [40:0] add_signext_20; // sfix41_En32
  wire signed [40:0] add_signext_21; // sfix41_En32
  wire signed [40:0] add_signext_22; // sfix41_En32
  wire signed [40:0] add_signext_23; // sfix41_En32
  wire signed [40:0] add_signext_24; // sfix41_En32
  wire signed [40:0] add_signext_25; // sfix41_En32
  wire signed [40:0] add_signext_26; // sfix41_En32
  wire signed [40:0] add_signext_27; // sfix41_En32
  reg  signed [41:0] sumdelay_pipeline1 [0:14] ; // sfix42_En32
  wire signed [41:0] sumvector2 [0:7] ; // sfix42_En32
  wire signed [41:0] add_signext_28; // sfix42_En32
  wire signed [41:0] add_signext_29; // sfix42_En32
  wire signed [42:0] add_temp_1; // sfix43_En32
  wire signed [41:0] add_signext_30; // sfix42_En32
  wire signed [41:0] add_signext_31; // sfix42_En32
  wire signed [42:0] add_temp_2; // sfix43_En32
  wire signed [41:0] add_signext_32; // sfix42_En32
  wire signed [41:0] add_signext_33; // sfix42_En32
  wire signed [42:0] add_temp_3; // sfix43_En32
  wire signed [41:0] add_signext_34; // sfix42_En32
  wire signed [41:0] add_signext_35; // sfix42_En32
  wire signed [42:0] add_temp_4; // sfix43_En32
  wire signed [41:0] add_signext_36; // sfix42_En32
  wire signed [41:0] add_signext_37; // sfix42_En32
  wire signed [42:0] add_temp_5; // sfix43_En32
  wire signed [41:0] add_signext_38; // sfix42_En32
  wire signed [41:0] add_signext_39; // sfix42_En32
  wire signed [42:0] add_temp_6; // sfix43_En32
  wire signed [41:0] add_signext_40; // sfix42_En32
  wire signed [41:0] add_signext_41; // sfix42_En32
  wire signed [42:0] add_temp_7; // sfix43_En32
  reg  signed [41:0] sumdelay_pipeline2 [0:7] ; // sfix42_En32
  wire signed [41:0] sumvector3 [0:3] ; // sfix42_En32
  wire signed [41:0] add_signext_42; // sfix42_En32
  wire signed [41:0] add_signext_43; // sfix42_En32
  wire signed [42:0] add_temp_8; // sfix43_En32
  wire signed [41:0] add_signext_44; // sfix42_En32
  wire signed [41:0] add_signext_45; // sfix42_En32
  wire signed [42:0] add_temp_9; // sfix43_En32
  wire signed [41:0] add_signext_46; // sfix42_En32
  wire signed [41:0] add_signext_47; // sfix42_En32
  wire signed [42:0] add_temp_10; // sfix43_En32
  wire signed [41:0] add_signext_48; // sfix42_En32
  wire signed [41:0] add_signext_49; // sfix42_En32
  wire signed [42:0] add_temp_11; // sfix43_En32
  reg  signed [41:0] sumdelay_pipeline3 [0:3] ; // sfix42_En32
  wire signed [41:0] sumvector4 [0:1] ; // sfix42_En32
  wire signed [41:0] add_signext_50; // sfix42_En32
  wire signed [41:0] add_signext_51; // sfix42_En32
  wire signed [42:0] add_temp_12; // sfix43_En32
  wire signed [41:0] add_signext_52; // sfix42_En32
  wire signed [41:0] add_signext_53; // sfix42_En32
  wire signed [42:0] add_temp_13; // sfix43_En32
  reg  signed [41:0] sumdelay_pipeline4 [0:1] ; // sfix42_En32
  wire signed [41:0] sum5; // sfix42_En32
  wire signed [41:0] add_signext_54; // sfix42_En32
  wire signed [41:0] add_signext_55; // sfix42_En32
  wire signed [42:0] add_temp_14; // sfix43_En32
  wire signed [31:0] output_typeconvert; // sfix32_En32
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  reg  ce_delayline9; // boolean
  reg  ce_delayline10; // boolean
  reg  ce_delayline11; // boolean
  reg  ce_delayline12; // boolean
  reg  ce_delayline13; // boolean
  reg  ce_delayline14; // boolean
  reg  ce_delayline15; // boolean
  reg  ce_delayline16; // boolean
  reg  ce_delayline17; // boolean
  reg  ce_delayline18; // boolean
  reg  ce_delayline19; // boolean
  reg  ce_delayline20; // boolean
  wire ce_gated; // boolean
  reg  signed [31:0] output_register; // sfix32_En32

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable_stage3 == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[3 : 1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable_stage3;

  assign  phase_1 = ring_count[1]  && clk_enable_stage3;

  assign  phase_2 = ring_count[2]  && clk_enable_stage3;

  assign  phase_3 = ring_count[3]  && clk_enable_stage3;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_0;
      end
    end // ce_output_register

  assign input_typeconvert = filter_in_stage3;

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase0[0] <= input_typeconvert;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase1[0] <= input_typeconvert;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
        end
      end
    end // Delay_Pipeline_Phase1_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase2_process
      if (reset == 1'b1) begin
        input_pipeline_phase2[0] <= 0;
        input_pipeline_phase2[1] <= 0;
        input_pipeline_phase2[2] <= 0;
        input_pipeline_phase2[3] <= 0;
        input_pipeline_phase2[4] <= 0;
        input_pipeline_phase2[5] <= 0;
        input_pipeline_phase2[6] <= 0;
      end
      else begin
        if (phase_2 == 1'b1) begin
          input_pipeline_phase2[0] <= input_typeconvert;
          input_pipeline_phase2[1] <= input_pipeline_phase2[0];
          input_pipeline_phase2[2] <= input_pipeline_phase2[1];
          input_pipeline_phase2[3] <= input_pipeline_phase2[2];
          input_pipeline_phase2[4] <= input_pipeline_phase2[3];
          input_pipeline_phase2[5] <= input_pipeline_phase2[4];
          input_pipeline_phase2[6] <= input_pipeline_phase2[5];
        end
      end
    end // Delay_Pipeline_Phase2_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase3_process
      if (reset == 1'b1) begin
        input_pipeline_phase3[0] <= 0;
        input_pipeline_phase3[1] <= 0;
        input_pipeline_phase3[2] <= 0;
        input_pipeline_phase3[3] <= 0;
        input_pipeline_phase3[4] <= 0;
        input_pipeline_phase3[5] <= 0;
        input_pipeline_phase3[6] <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          input_pipeline_phase3[0] <= input_typeconvert;
          input_pipeline_phase3[1] <= input_pipeline_phase3[0];
          input_pipeline_phase3[2] <= input_pipeline_phase3[1];
          input_pipeline_phase3[3] <= input_pipeline_phase3[2];
          input_pipeline_phase3[4] <= input_pipeline_phase3[3];
          input_pipeline_phase3[5] <= input_pipeline_phase3[4];
          input_pipeline_phase3[6] <= input_pipeline_phase3[5];
        end
      end
    end // Delay_Pipeline_Phase3_process


  assign mulcsd_temp = - (
        $signed({input_typeconvert, 4'b0000}) +
        $signed({input_typeconvert, 3'b000}) -
        $signed({input_typeconvert, 1'b0}));
  assign product_phase0_1 = $signed({{12{mulcsd_temp[28]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[0], 9'b000000000}) +
        $signed({input_pipeline_phase0[0], 4'b0000}) +
        input_pipeline_phase0[0];
  assign product_phase0_2 = $signed({{7{mulcsd_temp_1[33]}}, mulcsd_temp_1});

  assign mulcsd_temp_2 = 
        $signed({input_pipeline_phase0[1], 13'b0000000000000}) -
        $signed({input_pipeline_phase0[1], 11'b00000000000}) +
        $signed({input_pipeline_phase0[1], 7'b0000000}) +
        $signed({input_pipeline_phase0[1], 5'b00000}) -
        $signed({input_pipeline_phase0[1], 3'b000}) +
        $signed({input_pipeline_phase0[1], 2'b00}) -
        input_pipeline_phase0[1];
  assign product_phase0_3 = $signed({{3{mulcsd_temp_2[37]}}, mulcsd_temp_2});

  assign mulcsd_temp_3 = 
        $signed({input_pipeline_phase0[2], 11'b00000000000}) +
        $signed({input_pipeline_phase0[2], 9'b000000000}) +
        $signed({input_pipeline_phase0[2], 7'b0000000}) +
        $signed({input_pipeline_phase0[2], 4'b0000}) -
        $signed({input_pipeline_phase0[2], 2'b00});
  assign product_phase0_4 = $signed({{5{mulcsd_temp_3[35]}}, mulcsd_temp_3});

  assign mulcsd_temp_4 = 
        $signed({input_pipeline_phase0[3], 11'b00000000000}) +
        $signed({input_pipeline_phase0[3], 9'b000000000}) +
        $signed({input_pipeline_phase0[3], 7'b0000000}) +
        $signed({input_pipeline_phase0[3], 4'b0000}) -
        $signed({input_pipeline_phase0[3], 2'b00});
  assign product_phase0_5 = $signed({{5{mulcsd_temp_4[35]}}, mulcsd_temp_4});

  assign mulcsd_temp_5 = 
        $signed({input_pipeline_phase0[4], 13'b0000000000000}) -
        $signed({input_pipeline_phase0[4], 11'b00000000000}) +
        $signed({input_pipeline_phase0[4], 7'b0000000}) +
        $signed({input_pipeline_phase0[4], 5'b00000}) -
        $signed({input_pipeline_phase0[4], 3'b000}) +
        $signed({input_pipeline_phase0[4], 2'b00}) -
        input_pipeline_phase0[4];
  assign product_phase0_6 = $signed({{3{mulcsd_temp_5[37]}}, mulcsd_temp_5});

  assign mulcsd_temp_6 = 
        $signed({input_pipeline_phase0[5], 9'b000000000}) +
        $signed({input_pipeline_phase0[5], 4'b0000}) +
        input_pipeline_phase0[5];
  assign product_phase0_7 = $signed({{7{mulcsd_temp_6[33]}}, mulcsd_temp_6});

  assign mulcsd_temp_7 = - (
        $signed({input_pipeline_phase0[6], 4'b0000}) +
        $signed({input_pipeline_phase0[6], 3'b000}) -
        $signed({input_pipeline_phase0[6], 1'b0}));
  assign product_phase0_8 = $signed({{12{mulcsd_temp_7[28]}}, mulcsd_temp_7});

  assign mulcsd_temp_8 = - (
        $signed({input_pipeline_phase1[0], 6'b000000}) +
        $signed({input_pipeline_phase1[0], 3'b000}) +
        $signed({input_pipeline_phase1[0], 2'b00}) -
        input_pipeline_phase1[0]);
  assign product_phase1_1 = $signed({{10{mulcsd_temp_8[30]}}, mulcsd_temp_8});

  assign mulcsd_temp_9 = - (
        $signed({input_pipeline_phase1[1], 10'b0000000000}) -
        $signed({input_pipeline_phase1[1], 7'b0000000}) +
        $signed({input_pipeline_phase1[1], 6'b000000}) -
        $signed({input_pipeline_phase1[1], 4'b0000}) +
        $signed({input_pipeline_phase1[1], 3'b000}) -
        $signed({input_pipeline_phase1[1], 1'b0}));
  assign product_phase1_2 = $signed({{6{mulcsd_temp_9[34]}}, mulcsd_temp_9});

  assign mulcsd_temp_10 = 
        $signed({input_pipeline_phase1[2], 12'b000000000000}) +
        $signed({input_pipeline_phase1[2], 10'b0000000000}) -
        $signed({input_pipeline_phase1[2], 8'b00000000}) +
        $signed({input_pipeline_phase1[2], 5'b00000}) +
        $signed({input_pipeline_phase1[2], 2'b00});
  assign product_phase1_3 = $signed({{4{mulcsd_temp_10[36]}}, mulcsd_temp_10});

  assign mulcsd_temp_11 = 
        $signed({input_pipeline_phase1[3], 15'b000000000000000}) +
        $signed({input_pipeline_phase1[3], 14'b00000000000000}) -
        $signed({input_pipeline_phase1[3], 11'b00000000000}) +
        $signed({input_pipeline_phase1[3], 5'b00000}) +
        $signed({input_pipeline_phase1[3], 3'b000}) -
        $signed({input_pipeline_phase1[3], 1'b0});
  assign product_phase1_4 = $signed({{1{mulcsd_temp_11[39]}}, mulcsd_temp_11});

  assign mulcsd_temp_12 = - (
        $signed({input_pipeline_phase1[4], 14'b00000000000000}) +
        $signed({input_pipeline_phase1[4], 11'b00000000000}) +
        $signed({input_pipeline_phase1[4], 9'b000000000}) -
        $signed({input_pipeline_phase1[4], 6'b000000}) +
        $signed({input_pipeline_phase1[4], 1'b0}));
  assign product_phase1_5 = $signed({{2{mulcsd_temp_12[38]}}, mulcsd_temp_12});

  assign mulcsd_temp_13 = 
        $signed({input_pipeline_phase1[5], 7'b0000000}) +
        $signed({input_pipeline_phase1[5], 6'b000000}) -
        $signed({input_pipeline_phase1[5], 1'b0});
  assign product_phase1_6 = $signed({{9{mulcsd_temp_13[31]}}, mulcsd_temp_13});

  assign mulcsd_temp_14 = 
        $signed({input_pipeline_phase1[6], 9'b000000000}) -
        $signed({input_pipeline_phase1[6], 6'b000000}) +
        $signed({input_pipeline_phase1[6], 3'b000}) -
        input_pipeline_phase1[6];
  assign product_phase1_7 = $signed({{7{mulcsd_temp_14[33]}}, mulcsd_temp_14});

  assign mulcsd_temp_15 = 
        $signed({input_pipeline_phase2[0], 4'b0000}) +
        $signed({input_pipeline_phase2[0], 2'b00}) +
        input_pipeline_phase2[0];
  assign product_phase2_1 = $signed({{12{mulcsd_temp_15[28]}}, mulcsd_temp_15});

  assign mulcsd_temp_16 = - (
        $signed({input_pipeline_phase2[1], 11'b00000000000}) +
        $signed({input_pipeline_phase2[1], 9'b000000000}) -
        $signed({input_pipeline_phase2[1], 6'b000000}) +
        $signed({input_pipeline_phase2[1], 5'b00000}) -
        $signed({input_pipeline_phase2[1], 3'b000}) +
        input_pipeline_phase2[1]);
  assign product_phase2_2 = $signed({{5{mulcsd_temp_16[35]}}, mulcsd_temp_16});

  assign mulcsd_temp_17 = - (
        $signed({input_pipeline_phase2[2], 13'b0000000000000}) +
        $signed({input_pipeline_phase2[2], 10'b0000000000}) +
        $signed({input_pipeline_phase2[2], 8'b00000000}) +
        $signed({input_pipeline_phase2[2], 7'b0000000}) -
        $signed({input_pipeline_phase2[2], 3'b000}) +
        input_pipeline_phase2[2]);
  assign product_phase2_3 = $signed({{3{mulcsd_temp_17[37]}}, mulcsd_temp_17});

  assign mulcsd_temp_18 = 
        $signed({input_pipeline_phase2[3], 16'b0000000000000000}) +
        $signed({input_pipeline_phase2[3], 12'b000000000000}) +
        $signed({input_pipeline_phase2[3], 10'b0000000000}) +
        $signed({input_pipeline_phase2[3], 6'b000000}) +
        $signed({input_pipeline_phase2[3], 3'b000}) +
        $signed({input_pipeline_phase2[3], 1'b0});
  assign product_phase2_4 = mulcsd_temp_18;

  assign mulcsd_temp_19 = - (
        $signed({input_pipeline_phase2[4], 13'b0000000000000}) +
        $signed({input_pipeline_phase2[4], 10'b0000000000}) +
        $signed({input_pipeline_phase2[4], 8'b00000000}) +
        $signed({input_pipeline_phase2[4], 7'b0000000}) -
        $signed({input_pipeline_phase2[4], 3'b000}) +
        input_pipeline_phase2[4]);
  assign product_phase2_5 = $signed({{3{mulcsd_temp_19[37]}}, mulcsd_temp_19});

  assign mulcsd_temp_20 = - (
        $signed({input_pipeline_phase2[5], 11'b00000000000}) +
        $signed({input_pipeline_phase2[5], 9'b000000000}) -
        $signed({input_pipeline_phase2[5], 6'b000000}) +
        $signed({input_pipeline_phase2[5], 5'b00000}) -
        $signed({input_pipeline_phase2[5], 3'b000}) +
        input_pipeline_phase2[5]);
  assign product_phase2_6 = $signed({{5{mulcsd_temp_20[35]}}, mulcsd_temp_20});

  assign mulcsd_temp_21 = 
        $signed({input_pipeline_phase2[6], 4'b0000}) +
        $signed({input_pipeline_phase2[6], 2'b00}) +
        input_pipeline_phase2[6];
  assign product_phase2_7 = $signed({{12{mulcsd_temp_21[28]}}, mulcsd_temp_21});

  assign mulcsd_temp_22 = 
        $signed({input_pipeline_phase3[0], 9'b000000000}) -
        $signed({input_pipeline_phase3[0], 6'b000000}) +
        $signed({input_pipeline_phase3[0], 3'b000}) -
        input_pipeline_phase3[0];
  assign product_phase3_1 = $signed({{7{mulcsd_temp_22[33]}}, mulcsd_temp_22});

  assign mulcsd_temp_23 = 
        $signed({input_pipeline_phase3[1], 7'b0000000}) +
        $signed({input_pipeline_phase3[1], 6'b000000}) -
        $signed({input_pipeline_phase3[1], 1'b0});
  assign product_phase3_2 = $signed({{9{mulcsd_temp_23[31]}}, mulcsd_temp_23});

  assign mulcsd_temp_24 = - (
        $signed({input_pipeline_phase3[2], 14'b00000000000000}) +
        $signed({input_pipeline_phase3[2], 11'b00000000000}) +
        $signed({input_pipeline_phase3[2], 9'b000000000}) -
        $signed({input_pipeline_phase3[2], 6'b000000}) +
        $signed({input_pipeline_phase3[2], 1'b0}));
  assign product_phase3_3 = $signed({{2{mulcsd_temp_24[38]}}, mulcsd_temp_24});

  assign mulcsd_temp_25 = 
        $signed({input_pipeline_phase3[3], 15'b000000000000000}) +
        $signed({input_pipeline_phase3[3], 14'b00000000000000}) -
        $signed({input_pipeline_phase3[3], 11'b00000000000}) +
        $signed({input_pipeline_phase3[3], 5'b00000}) +
        $signed({input_pipeline_phase3[3], 3'b000}) -
        $signed({input_pipeline_phase3[3], 1'b0});
  assign product_phase3_4 = $signed({{1{mulcsd_temp_25[39]}}, mulcsd_temp_25});

  assign mulcsd_temp_26 = 
        $signed({input_pipeline_phase3[4], 12'b000000000000}) +
        $signed({input_pipeline_phase3[4], 10'b0000000000}) -
        $signed({input_pipeline_phase3[4], 8'b00000000}) +
        $signed({input_pipeline_phase3[4], 5'b00000}) +
        $signed({input_pipeline_phase3[4], 2'b00});
  assign product_phase3_5 = $signed({{4{mulcsd_temp_26[36]}}, mulcsd_temp_26});

  assign mulcsd_temp_27 = - (
        $signed({input_pipeline_phase3[5], 10'b0000000000}) -
        $signed({input_pipeline_phase3[5], 7'b0000000}) +
        $signed({input_pipeline_phase3[5], 6'b000000}) -
        $signed({input_pipeline_phase3[5], 4'b0000}) +
        $signed({input_pipeline_phase3[5], 3'b000}) -
        $signed({input_pipeline_phase3[5], 1'b0}));
  assign product_phase3_6 = $signed({{6{mulcsd_temp_27[34]}}, mulcsd_temp_27});

  assign mulcsd_temp_28 = - (
        $signed({input_pipeline_phase3[6], 6'b000000}) +
        $signed({input_pipeline_phase3[6], 3'b000}) +
        $signed({input_pipeline_phase3[6], 2'b00}) -
        input_pipeline_phase3[6]);
  assign product_phase3_7 = $signed({{10{mulcsd_temp_28[30]}}, mulcsd_temp_28});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process3
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase1_1 <= 0;
        product_pipeline_phase2_1 <= 0;
        product_pipeline_phase3_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase2_2 <= 0;
        product_pipeline_phase3_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase1_3 <= 0;
        product_pipeline_phase2_3 <= 0;
        product_pipeline_phase3_3 <= 0;
        product_pipeline_phase0_4 <= 0;
        product_pipeline_phase1_4 <= 0;
        product_pipeline_phase2_4 <= 0;
        product_pipeline_phase3_4 <= 0;
        product_pipeline_phase0_5 <= 0;
        product_pipeline_phase1_5 <= 0;
        product_pipeline_phase2_5 <= 0;
        product_pipeline_phase3_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase1_6 <= 0;
        product_pipeline_phase2_6 <= 0;
        product_pipeline_phase3_6 <= 0;
        product_pipeline_phase0_7 <= 0;
        product_pipeline_phase1_7 <= 0;
        product_pipeline_phase2_7 <= 0;
        product_pipeline_phase3_7 <= 0;
        product_pipeline_phase0_8 <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase1_1 <= product_phase1_1;
          product_pipeline_phase2_1 <= product_phase2_1;
          product_pipeline_phase3_1 <= product_phase3_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase2_2 <= product_phase2_2;
          product_pipeline_phase3_2 <= product_phase3_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase1_3 <= product_phase1_3;
          product_pipeline_phase2_3 <= product_phase2_3;
          product_pipeline_phase3_3 <= product_phase3_3;
          product_pipeline_phase0_4 <= product_phase0_4;
          product_pipeline_phase1_4 <= product_phase1_4;
          product_pipeline_phase2_4 <= product_phase2_4;
          product_pipeline_phase3_4 <= product_phase3_4;
          product_pipeline_phase0_5 <= product_phase0_5;
          product_pipeline_phase1_5 <= product_phase1_5;
          product_pipeline_phase2_5 <= product_phase2_5;
          product_pipeline_phase3_5 <= product_phase3_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase1_6 <= product_phase1_6;
          product_pipeline_phase2_6 <= product_phase2_6;
          product_pipeline_phase3_6 <= product_phase3_6;
          product_pipeline_phase0_7 <= product_phase0_7;
          product_pipeline_phase1_7 <= product_phase1_7;
          product_pipeline_phase2_7 <= product_phase2_7;
          product_pipeline_phase3_7 <= product_phase3_7;
          product_pipeline_phase0_8 <= product_phase0_8;
        end
      end
    end // product_pipeline_process3

  assign quantized_sum = $signed({{1{product_pipeline_phase3_1[40]}}, product_pipeline_phase3_1});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{1{product_pipeline_phase3_2[40]}}, product_pipeline_phase3_2});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[41:0];

  assign add_signext_2 = product_pipeline_phase3_3;
  assign add_signext_3 = product_pipeline_phase3_4;
  assign sumvector1[1] = add_signext_2 + add_signext_3;

  assign add_signext_4 = product_pipeline_phase3_5;
  assign add_signext_5 = product_pipeline_phase3_6;
  assign sumvector1[2] = add_signext_4 + add_signext_5;

  assign add_signext_6 = product_pipeline_phase3_7;
  assign add_signext_7 = product_pipeline_phase2_1;
  assign sumvector1[3] = add_signext_6 + add_signext_7;

  assign add_signext_8 = product_pipeline_phase2_2;
  assign add_signext_9 = product_pipeline_phase2_3;
  assign sumvector1[4] = add_signext_8 + add_signext_9;

  assign add_signext_10 = product_pipeline_phase2_4;
  assign add_signext_11 = product_pipeline_phase2_5;
  assign sumvector1[5] = add_signext_10 + add_signext_11;

  assign add_signext_12 = product_pipeline_phase2_6;
  assign add_signext_13 = product_pipeline_phase2_7;
  assign sumvector1[6] = add_signext_12 + add_signext_13;

  assign add_signext_14 = product_pipeline_phase1_1;
  assign add_signext_15 = product_pipeline_phase1_2;
  assign sumvector1[7] = add_signext_14 + add_signext_15;

  assign add_signext_16 = product_pipeline_phase1_3;
  assign add_signext_17 = product_pipeline_phase1_4;
  assign sumvector1[8] = add_signext_16 + add_signext_17;

  assign add_signext_18 = product_pipeline_phase1_5;
  assign add_signext_19 = product_pipeline_phase1_6;
  assign sumvector1[9] = add_signext_18 + add_signext_19;

  assign add_signext_20 = product_pipeline_phase1_7;
  assign add_signext_21 = product_pipeline_phase0_1;
  assign sumvector1[10] = add_signext_20 + add_signext_21;

  assign add_signext_22 = product_pipeline_phase0_2;
  assign add_signext_23 = product_pipeline_phase0_3;
  assign sumvector1[11] = add_signext_22 + add_signext_23;

  assign add_signext_24 = product_pipeline_phase0_4;
  assign add_signext_25 = product_pipeline_phase0_5;
  assign sumvector1[12] = add_signext_24 + add_signext_25;

  assign add_signext_26 = product_pipeline_phase0_6;
  assign add_signext_27 = product_pipeline_phase0_7;
  assign sumvector1[13] = add_signext_26 + add_signext_27;

  assign sumvector1[14] = $signed({{1{product_pipeline_phase0_8[40]}}, product_pipeline_phase0_8});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
        sumdelay_pipeline1[9] <= 0;
        sumdelay_pipeline1[10] <= 0;
        sumdelay_pipeline1[11] <= 0;
        sumdelay_pipeline1[12] <= 0;
        sumdelay_pipeline1[13] <= 0;
        sumdelay_pipeline1[14] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
          sumdelay_pipeline1[9] <= sumvector1[9];
          sumdelay_pipeline1[10] <= sumvector1[10];
          sumdelay_pipeline1[11] <= sumvector1[11];
          sumdelay_pipeline1[12] <= sumvector1[12];
          sumdelay_pipeline1[13] <= sumvector1[13];
          sumdelay_pipeline1[14] <= sumvector1[14];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_28 = sumdelay_pipeline1[0];
  assign add_signext_29 = sumdelay_pipeline1[1];
  assign add_temp_1 = add_signext_28 + add_signext_29;
  assign sumvector2[0] = add_temp_1[41:0];

  assign add_signext_30 = sumdelay_pipeline1[2];
  assign add_signext_31 = sumdelay_pipeline1[3];
  assign add_temp_2 = add_signext_30 + add_signext_31;
  assign sumvector2[1] = add_temp_2[41:0];

  assign add_signext_32 = sumdelay_pipeline1[4];
  assign add_signext_33 = sumdelay_pipeline1[5];
  assign add_temp_3 = add_signext_32 + add_signext_33;
  assign sumvector2[2] = add_temp_3[41:0];

  assign add_signext_34 = sumdelay_pipeline1[6];
  assign add_signext_35 = sumdelay_pipeline1[7];
  assign add_temp_4 = add_signext_34 + add_signext_35;
  assign sumvector2[3] = add_temp_4[41:0];

  assign add_signext_36 = sumdelay_pipeline1[8];
  assign add_signext_37 = sumdelay_pipeline1[9];
  assign add_temp_5 = add_signext_36 + add_signext_37;
  assign sumvector2[4] = add_temp_5[41:0];

  assign add_signext_38 = sumdelay_pipeline1[10];
  assign add_signext_39 = sumdelay_pipeline1[11];
  assign add_temp_6 = add_signext_38 + add_signext_39;
  assign sumvector2[5] = add_temp_6[41:0];

  assign add_signext_40 = sumdelay_pipeline1[12];
  assign add_signext_41 = sumdelay_pipeline1[13];
  assign add_temp_7 = add_signext_40 + add_signext_41;
  assign sumvector2[6] = add_temp_7[41:0];

  assign sumvector2[7] = sumdelay_pipeline1[14];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
        sumdelay_pipeline2[5] <= 0;
        sumdelay_pipeline2[6] <= 0;
        sumdelay_pipeline2[7] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
          sumdelay_pipeline2[5] <= sumvector2[5];
          sumdelay_pipeline2[6] <= sumvector2[6];
          sumdelay_pipeline2[7] <= sumvector2[7];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_42 = sumdelay_pipeline2[0];
  assign add_signext_43 = sumdelay_pipeline2[1];
  assign add_temp_8 = add_signext_42 + add_signext_43;
  assign sumvector3[0] = add_temp_8[41:0];

  assign add_signext_44 = sumdelay_pipeline2[2];
  assign add_signext_45 = sumdelay_pipeline2[3];
  assign add_temp_9 = add_signext_44 + add_signext_45;
  assign sumvector3[1] = add_temp_9[41:0];

  assign add_signext_46 = sumdelay_pipeline2[4];
  assign add_signext_47 = sumdelay_pipeline2[5];
  assign add_temp_10 = add_signext_46 + add_signext_47;
  assign sumvector3[2] = add_temp_10[41:0];

  assign add_signext_48 = sumdelay_pipeline2[6];
  assign add_signext_49 = sumdelay_pipeline2[7];
  assign add_temp_11 = add_signext_48 + add_signext_49;
  assign sumvector3[3] = add_temp_11[41:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
        sumdelay_pipeline3[3] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
          sumdelay_pipeline3[3] <= sumvector3[3];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_50 = sumdelay_pipeline3[0];
  assign add_signext_51 = sumdelay_pipeline3[1];
  assign add_temp_12 = add_signext_50 + add_signext_51;
  assign sumvector4[0] = add_temp_12[41:0];

  assign add_signext_52 = sumdelay_pipeline3[2];
  assign add_signext_53 = sumdelay_pipeline3[3];
  assign add_temp_13 = add_signext_52 + add_signext_53;
  assign sumvector4[1] = add_temp_13[41:0];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_54 = sumdelay_pipeline4[0];
  assign add_signext_55 = sumdelay_pipeline4[1];
  assign add_temp_14 = add_signext_54 + add_signext_55;
  assign sum5 = add_temp_14[41:0];

  assign output_typeconvert = sum5[31:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
        ce_delayline9 <= 1'b0;
        ce_delayline10 <= 1'b0;
        ce_delayline11 <= 1'b0;
        ce_delayline12 <= 1'b0;
        ce_delayline13 <= 1'b0;
        ce_delayline14 <= 1'b0;
        ce_delayline15 <= 1'b0;
        ce_delayline16 <= 1'b0;
        ce_delayline17 <= 1'b0;
        ce_delayline18 <= 1'b0;
        ce_delayline19 <= 1'b0;
        ce_delayline20 <= 1'b0;
      end
      else begin
        if (clk_enable_stage3 == 1'b1) begin
          ce_delayline1 <= clk_enable_stage3;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
          ce_delayline9 <= ce_delayline8;
          ce_delayline10 <= ce_delayline9;
          ce_delayline11 <= ce_delayline10;
          ce_delayline12 <= ce_delayline11;
          ce_delayline13 <= ce_delayline12;
          ce_delayline14 <= ce_delayline13;
          ce_delayline15 <= ce_delayline14;
          ce_delayline16 <= ce_delayline15;
          ce_delayline17 <= ce_delayline16;
          ce_delayline18 <= ce_delayline17;
          ce_delayline19 <= ce_delayline18;
          ce_delayline20 <= ce_delayline19;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline20 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out_stage3 = ce_gated;
  assign filter_out_stage3 = output_register;
endmodule  // CASCADE_D520_stage3
