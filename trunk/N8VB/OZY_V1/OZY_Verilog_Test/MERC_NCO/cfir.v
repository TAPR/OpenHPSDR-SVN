// -------------------------------------------------------------
//
// Module: cfir
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-11 15:48:18
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: cfir
// TargetDirectory: c:\data
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 9
// Filter Length      : 17
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s16,14 -> [-2 2)
// Input              : s16,0 -> [-32768 32768)
// Filter Internals   : Full Precision
//   Output           : s32,14 -> [-131072 131072)  (auto determined)
//   Product          : s31,14 -> [-65536 65536)  (auto determined)
//   Accumulator      : s32,14 -> [-131072 131072)  (auto determined)
//   Round Mode       : No rounding
//   Overflow Mode    : No overflow
//
// Design Method Information
// Design Algorithm : equiripple
//
// Design Options
// DensityFactor : 16
// MinOrder      : any
// MinPhase      : false
// StopbandDecay : 80
// StopbandShape : linear
//
// Design Specifications
// Sampling Frequency : 0.39063 MHz
// Response           : CIC Compensator
// Specification      : Fp,Fst,Ap,Ast
// MultirateType      : Decimator
// DecimationFactor   : 2e-006 MHz
// NumberOfSections   : 5e-006 MHz
// DifferentialDelay  : 1e-006 MHz
// Passband Edge      : 0.096 MHz
// Stopband Edge      : 0.192 MHz
// Passband Ripple    : 0.01 dB
// Stopband Atten.    : 80 dB
//
// Measurements
// Sampling Frequency : 0.39063 MHz
// Passband Edge      : 0.096 MHz
// 3-dB Point         : 0.15741 MHz
// 6-dB Point         : 0.16165 MHz
// Stopband Edge      : 0.192 MHz
// Passband Ripple    : 0.0045181 dB
// Stopband Atten.    : 75.1995 dB
// Transition Width   : 0.096 MHz
//
// Implementation Cost
// Number of Multipliers : 17
// Number of Adders      : 16
// Number of States      : 16
// MultPerInputSample    : 8.5
// AddPerInputSample     : 8
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cfir 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16
  output  signed [31:0] filter_out; //sfix32_En14
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: cfir
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b0000000001000010; //sfix16_En14
  parameter signed [15:0] coeffphase1_2 = 16'b0000001010110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_3 = 16'b1111110111110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_4 = 16'b1110101001000100; //sfix16_En14
  parameter signed [15:0] coeffphase1_5 = 16'b0100100110101010; //sfix16_En14
  parameter signed [15:0] coeffphase1_6 = 16'b1110101001000100; //sfix16_En14
  parameter signed [15:0] coeffphase1_7 = 16'b1111110111110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_8 = 16'b0000001010110011; //sfix16_En14
  parameter signed [15:0] coeffphase1_9 = 16'b0000000001000010; //sfix16_En14
  parameter signed [15:0] coeffphase2_1 = 16'b1111111011001001; //sfix16_En14
  parameter signed [15:0] coeffphase2_2 = 16'b1111110101000100; //sfix16_En14
  parameter signed [15:0] coeffphase2_3 = 16'b0000110010101010; //sfix16_En14
  parameter signed [15:0] coeffphase2_4 = 16'b0000011101001001; //sfix16_En14
  parameter signed [15:0] coeffphase2_5 = 16'b0000011101001001; //sfix16_En14
  parameter signed [15:0] coeffphase2_6 = 16'b0000110010101010; //sfix16_En14
  parameter signed [15:0] coeffphase2_7 = 16'b1111110101000100; //sfix16_En14
  parameter signed [15:0] coeffphase2_8 = 16'b1111111011001001; //sfix16_En14
  parameter signed [15:0] coeffphase2_9 = 16'b0000000000000000; //sfix16_En14
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [15:0] input_register; // sfix16
  reg  signed [15:0] input_pipeline_phase0 [0:7] ; // sfix16
  reg  signed [15:0] input_pipeline_phase1 [0:7] ; // sfix16
  wire signed [30:0] product_phase0_1; // sfix31_En14
  wire signed [22:0] mulcsd_temp; // sfix23_En14
  wire signed [30:0] product_phase0_2; // sfix31_En14
  wire signed [25:0] mulcsd_temp_1; // sfix26_En14
  wire signed [30:0] product_phase0_3; // sfix31_En14
  wire signed [25:0] mulcsd_temp_2; // sfix26_En14
  wire signed [30:0] product_phase0_4; // sfix31_En14
  wire signed [28:0] mulcsd_temp_3; // sfix29_En14
  wire signed [30:0] product_phase0_5; // sfix31_En14
  wire signed [30:0] mulcsd_temp_4; // sfix31_En14
  wire signed [30:0] product_phase0_6; // sfix31_En14
  wire signed [28:0] mulcsd_temp_5; // sfix29_En14
  wire signed [30:0] product_phase0_7; // sfix31_En14
  wire signed [25:0] mulcsd_temp_6; // sfix26_En14
  wire signed [30:0] product_phase0_8; // sfix31_En14
  wire signed [25:0] mulcsd_temp_7; // sfix26_En14
  wire signed [30:0] product_phase0_9; // sfix31_En14
  wire signed [22:0] mulcsd_temp_8; // sfix23_En14
  wire signed [30:0] product_phase1_1; // sfix31_En14
  wire signed [24:0] mulcsd_temp_9; // sfix25_En14
  wire signed [30:0] product_phase1_2; // sfix31_En14
  wire signed [25:0] mulcsd_temp_10; // sfix26_En14
  wire signed [30:0] product_phase1_3; // sfix31_En14
  wire signed [28:0] mulcsd_temp_11; // sfix29_En14
  wire signed [30:0] product_phase1_4; // sfix31_En14
  wire signed [27:0] mulcsd_temp_12; // sfix28_En14
  wire signed [30:0] product_phase1_5; // sfix31_En14
  wire signed [27:0] mulcsd_temp_13; // sfix28_En14
  wire signed [30:0] product_phase1_6; // sfix31_En14
  wire signed [28:0] mulcsd_temp_14; // sfix29_En14
  wire signed [30:0] product_phase1_7; // sfix31_En14
  wire signed [25:0] mulcsd_temp_15; // sfix26_En14
  wire signed [30:0] product_phase1_8; // sfix31_En14
  wire signed [24:0] mulcsd_temp_16; // sfix25_En14
  reg  signed [30:0] product_pipeline_phase0_1; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_2; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_3; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_4; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_5; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_6; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_7; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_8; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase0_9; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_1; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_2; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_3; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_4; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_5; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_6; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_7; // sfix31_En14
  reg  signed [30:0] product_pipeline_phase1_8; // sfix31_En14
  wire signed [31:0] quantized_sum; // sfix32_En14
  wire signed [31:0] sumvector1 [0:8] ; // sfix32_En14
  wire signed [31:0] add_signext; // sfix32_En14
  wire signed [31:0] add_signext_1; // sfix32_En14
  wire signed [32:0] add_temp; // sfix33_En14
  wire signed [30:0] add_signext_2; // sfix31_En14
  wire signed [30:0] add_signext_3; // sfix31_En14
  wire signed [30:0] add_signext_4; // sfix31_En14
  wire signed [30:0] add_signext_5; // sfix31_En14
  wire signed [30:0] add_signext_6; // sfix31_En14
  wire signed [30:0] add_signext_7; // sfix31_En14
  wire signed [30:0] add_signext_8; // sfix31_En14
  wire signed [30:0] add_signext_9; // sfix31_En14
  wire signed [30:0] add_signext_10; // sfix31_En14
  wire signed [30:0] add_signext_11; // sfix31_En14
  wire signed [30:0] add_signext_12; // sfix31_En14
  wire signed [30:0] add_signext_13; // sfix31_En14
  wire signed [30:0] add_signext_14; // sfix31_En14
  wire signed [30:0] add_signext_15; // sfix31_En14
  reg  signed [31:0] sumdelay_pipeline1 [0:8] ; // sfix32_En14
  wire signed [31:0] sumvector2 [0:4] ; // sfix32_En14
  wire signed [31:0] add_signext_16; // sfix32_En14
  wire signed [31:0] add_signext_17; // sfix32_En14
  wire signed [32:0] add_temp_1; // sfix33_En14
  wire signed [31:0] add_signext_18; // sfix32_En14
  wire signed [31:0] add_signext_19; // sfix32_En14
  wire signed [32:0] add_temp_2; // sfix33_En14
  wire signed [31:0] add_signext_20; // sfix32_En14
  wire signed [31:0] add_signext_21; // sfix32_En14
  wire signed [32:0] add_temp_3; // sfix33_En14
  wire signed [31:0] add_signext_22; // sfix32_En14
  wire signed [31:0] add_signext_23; // sfix32_En14
  wire signed [32:0] add_temp_4; // sfix33_En14
  reg  signed [31:0] sumdelay_pipeline2 [0:4] ; // sfix32_En14
  wire signed [31:0] sumvector3 [0:2] ; // sfix32_En14
  wire signed [31:0] add_signext_24; // sfix32_En14
  wire signed [31:0] add_signext_25; // sfix32_En14
  wire signed [32:0] add_temp_5; // sfix33_En14
  wire signed [31:0] add_signext_26; // sfix32_En14
  wire signed [31:0] add_signext_27; // sfix32_En14
  wire signed [32:0] add_temp_6; // sfix33_En14
  reg  signed [31:0] sumdelay_pipeline3 [0:2] ; // sfix32_En14
  wire signed [31:0] sumvector4 [0:1] ; // sfix32_En14
  wire signed [31:0] add_signext_28; // sfix32_En14
  wire signed [31:0] add_signext_29; // sfix32_En14
  wire signed [32:0] add_temp_7; // sfix33_En14
  reg  signed [31:0] sumdelay_pipeline4 [0:1] ; // sfix32_En14
  wire signed [31:0] sum5; // sfix32_En14
  wire signed [31:0] add_signext_30; // sfix32_En14
  wire signed [31:0] add_signext_31; // sfix32_En14
  wire signed [32:0] add_temp_8; // sfix33_En14
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  reg  ce_delayline7; // boolean
  reg  ce_delayline8; // boolean
  reg  ce_delayline9; // boolean
  reg  ce_delayline10; // boolean
  wire ce_gated; // boolean
  reg  signed [31:0] output_register; // sfix32_En14

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
        input_pipeline_phase0[3] <= 0;
        input_pipeline_phase0[4] <= 0;
        input_pipeline_phase0[5] <= 0;
        input_pipeline_phase0[6] <= 0;
        input_pipeline_phase0[7] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
          input_pipeline_phase0[3] <= input_pipeline_phase0[2];
          input_pipeline_phase0[4] <= input_pipeline_phase0[3];
          input_pipeline_phase0[5] <= input_pipeline_phase0[4];
          input_pipeline_phase0[6] <= input_pipeline_phase0[5];
          input_pipeline_phase0[7] <= input_pipeline_phase0[6];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
        input_pipeline_phase1[2] <= 0;
        input_pipeline_phase1[3] <= 0;
        input_pipeline_phase1[4] <= 0;
        input_pipeline_phase1[5] <= 0;
        input_pipeline_phase1[6] <= 0;
        input_pipeline_phase1[7] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
          input_pipeline_phase1[2] <= input_pipeline_phase1[1];
          input_pipeline_phase1[3] <= input_pipeline_phase1[2];
          input_pipeline_phase1[4] <= input_pipeline_phase1[3];
          input_pipeline_phase1[5] <= input_pipeline_phase1[4];
          input_pipeline_phase1[6] <= input_pipeline_phase1[5];
          input_pipeline_phase1[7] <= input_pipeline_phase1[6];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mulcsd_temp = 
        $signed({input_register, 6'b000000}) +
        $signed({input_register, 1'b0});
  assign product_phase0_1 = $signed({{8{mulcsd_temp[22]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[0], 9'b000000000}) +
        $signed({input_pipeline_phase0[0], 7'b0000000}) +
        $signed({input_pipeline_phase0[0], 6'b000000}) -
        $signed({input_pipeline_phase0[0], 4'b0000}) +
        $signed({input_pipeline_phase0[0], 2'b00}) -
        input_pipeline_phase0[0];
  assign product_phase0_2 = $signed({{5{mulcsd_temp_1[25]}}, mulcsd_temp_1});

  assign mulcsd_temp_2 = - (
        $signed({input_pipeline_phase0[1], 9'b000000000}) +
        $signed({input_pipeline_phase0[1], 4'b0000}) -
        $signed({input_pipeline_phase0[1], 2'b00}) +
        input_pipeline_phase0[1]);
  assign product_phase0_3 = $signed({{5{mulcsd_temp_2[25]}}, mulcsd_temp_2});

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase0[2], 12'b000000000000}) +
        $signed({input_pipeline_phase0[2], 10'b0000000000}) +
        $signed({input_pipeline_phase0[2], 9'b000000000}) -
        $signed({input_pipeline_phase0[2], 7'b0000000}) +
        $signed({input_pipeline_phase0[2], 6'b000000}) -
        $signed({input_pipeline_phase0[2], 2'b00}));
  assign product_phase0_4 = $signed({{2{mulcsd_temp_3[28]}}, mulcsd_temp_3});

  assign mulcsd_temp_4 = 
        $signed({input_pipeline_phase0[3], 14'b00000000000000}) +
        $signed({input_pipeline_phase0[3], 11'b00000000000}) +
        $signed({input_pipeline_phase0[3], 9'b000000000}) -
        $signed({input_pipeline_phase0[3], 7'b0000000}) +
        $signed({input_pipeline_phase0[3], 5'b00000}) +
        $signed({input_pipeline_phase0[3], 3'b000}) +
        $signed({input_pipeline_phase0[3], 1'b0});
  assign product_phase0_5 = mulcsd_temp_4;

  assign mulcsd_temp_5 = - (
        $signed({input_pipeline_phase0[4], 12'b000000000000}) +
        $signed({input_pipeline_phase0[4], 10'b0000000000}) +
        $signed({input_pipeline_phase0[4], 9'b000000000}) -
        $signed({input_pipeline_phase0[4], 7'b0000000}) +
        $signed({input_pipeline_phase0[4], 6'b000000}) -
        $signed({input_pipeline_phase0[4], 2'b00}));
  assign product_phase0_6 = $signed({{2{mulcsd_temp_5[28]}}, mulcsd_temp_5});

  assign mulcsd_temp_6 = - (
        $signed({input_pipeline_phase0[5], 9'b000000000}) +
        $signed({input_pipeline_phase0[5], 4'b0000}) -
        $signed({input_pipeline_phase0[5], 2'b00}) +
        input_pipeline_phase0[5]);
  assign product_phase0_7 = $signed({{5{mulcsd_temp_6[25]}}, mulcsd_temp_6});

  assign mulcsd_temp_7 = 
        $signed({input_pipeline_phase0[6], 9'b000000000}) +
        $signed({input_pipeline_phase0[6], 7'b0000000}) +
        $signed({input_pipeline_phase0[6], 6'b000000}) -
        $signed({input_pipeline_phase0[6], 4'b0000}) +
        $signed({input_pipeline_phase0[6], 2'b00}) -
        input_pipeline_phase0[6];
  assign product_phase0_8 = $signed({{5{mulcsd_temp_7[25]}}, mulcsd_temp_7});

  assign mulcsd_temp_8 = 
        $signed({input_pipeline_phase0[7], 6'b000000}) +
        $signed({input_pipeline_phase0[7], 1'b0});
  assign product_phase0_9 = $signed({{8{mulcsd_temp_8[22]}}, mulcsd_temp_8});

  assign mulcsd_temp_9 = - (
        $signed({input_pipeline_phase1[0], 8'b00000000}) +
        $signed({input_pipeline_phase1[0], 6'b000000}) -
        $signed({input_pipeline_phase1[0], 4'b0000}) +
        $signed({input_pipeline_phase1[0], 3'b000}) -
        input_pipeline_phase1[0]);
  assign product_phase1_1 = $signed({{6{mulcsd_temp_9[24]}}, mulcsd_temp_9});

  assign mulcsd_temp_10 = - (
        $signed({input_pipeline_phase1[1], 9'b000000000}) +
        $signed({input_pipeline_phase1[1], 7'b0000000}) +
        $signed({input_pipeline_phase1[1], 6'b000000}) -
        $signed({input_pipeline_phase1[1], 2'b00}));
  assign product_phase1_2 = $signed({{5{mulcsd_temp_10[25]}}, mulcsd_temp_10});

  assign mulcsd_temp_11 = 
        $signed({input_pipeline_phase1[2], 12'b000000000000}) -
        $signed({input_pipeline_phase1[2], 10'b0000000000}) +
        $signed({input_pipeline_phase1[2], 7'b0000000}) +
        $signed({input_pipeline_phase1[2], 5'b00000}) +
        $signed({input_pipeline_phase1[2], 3'b000}) +
        $signed({input_pipeline_phase1[2], 1'b0});
  assign product_phase1_3 = $signed({{2{mulcsd_temp_11[28]}}, mulcsd_temp_11});

  assign mulcsd_temp_12 = 
        $signed({input_pipeline_phase1[3], 11'b00000000000}) -
        $signed({input_pipeline_phase1[3], 8'b00000000}) +
        $signed({input_pipeline_phase1[3], 6'b000000}) +
        $signed({input_pipeline_phase1[3], 3'b000}) +
        input_pipeline_phase1[3];
  assign product_phase1_4 = $signed({{3{mulcsd_temp_12[27]}}, mulcsd_temp_12});

  assign mulcsd_temp_13 = 
        $signed({input_pipeline_phase1[4], 11'b00000000000}) -
        $signed({input_pipeline_phase1[4], 8'b00000000}) +
        $signed({input_pipeline_phase1[4], 6'b000000}) +
        $signed({input_pipeline_phase1[4], 3'b000}) +
        input_pipeline_phase1[4];
  assign product_phase1_5 = $signed({{3{mulcsd_temp_13[27]}}, mulcsd_temp_13});

  assign mulcsd_temp_14 = 
        $signed({input_pipeline_phase1[5], 12'b000000000000}) -
        $signed({input_pipeline_phase1[5], 10'b0000000000}) +
        $signed({input_pipeline_phase1[5], 7'b0000000}) +
        $signed({input_pipeline_phase1[5], 5'b00000}) +
        $signed({input_pipeline_phase1[5], 3'b000}) +
        $signed({input_pipeline_phase1[5], 1'b0});
  assign product_phase1_6 = $signed({{2{mulcsd_temp_14[28]}}, mulcsd_temp_14});

  assign mulcsd_temp_15 = - (
        $signed({input_pipeline_phase1[6], 9'b000000000}) +
        $signed({input_pipeline_phase1[6], 7'b0000000}) +
        $signed({input_pipeline_phase1[6], 6'b000000}) -
        $signed({input_pipeline_phase1[6], 2'b00}));
  assign product_phase1_7 = $signed({{5{mulcsd_temp_15[25]}}, mulcsd_temp_15});

  assign mulcsd_temp_16 = - (
        $signed({input_pipeline_phase1[7], 8'b00000000}) +
        $signed({input_pipeline_phase1[7], 6'b000000}) -
        $signed({input_pipeline_phase1[7], 4'b0000}) +
        $signed({input_pipeline_phase1[7], 3'b000}) -
        input_pipeline_phase1[7]);
  assign product_phase1_8 = $signed({{6{mulcsd_temp_16[24]}}, mulcsd_temp_16});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase1_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase1_3 <= 0;
        product_pipeline_phase0_4 <= 0;
        product_pipeline_phase1_4 <= 0;
        product_pipeline_phase0_5 <= 0;
        product_pipeline_phase1_5 <= 0;
        product_pipeline_phase0_6 <= 0;
        product_pipeline_phase1_6 <= 0;
        product_pipeline_phase0_7 <= 0;
        product_pipeline_phase1_7 <= 0;
        product_pipeline_phase0_8 <= 0;
        product_pipeline_phase1_8 <= 0;
        product_pipeline_phase0_9 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase1_1 <= product_phase1_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase1_3 <= product_phase1_3;
          product_pipeline_phase0_4 <= product_phase0_4;
          product_pipeline_phase1_4 <= product_phase1_4;
          product_pipeline_phase0_5 <= product_phase0_5;
          product_pipeline_phase1_5 <= product_phase1_5;
          product_pipeline_phase0_6 <= product_phase0_6;
          product_pipeline_phase1_6 <= product_phase1_6;
          product_pipeline_phase0_7 <= product_phase0_7;
          product_pipeline_phase1_7 <= product_phase1_7;
          product_pipeline_phase0_8 <= product_phase0_8;
          product_pipeline_phase1_8 <= product_phase1_8;
          product_pipeline_phase0_9 <= product_phase0_9;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{1{product_pipeline_phase1_1[30]}}, product_pipeline_phase1_1});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{1{product_pipeline_phase1_2[30]}}, product_pipeline_phase1_2});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[31:0];

  assign add_signext_2 = product_pipeline_phase1_3;
  assign add_signext_3 = product_pipeline_phase1_4;
  assign sumvector1[1] = add_signext_2 + add_signext_3;

  assign add_signext_4 = product_pipeline_phase1_5;
  assign add_signext_5 = product_pipeline_phase1_6;
  assign sumvector1[2] = add_signext_4 + add_signext_5;

  assign add_signext_6 = product_pipeline_phase1_7;
  assign add_signext_7 = product_pipeline_phase1_8;
  assign sumvector1[3] = add_signext_6 + add_signext_7;

  assign add_signext_8 = product_pipeline_phase0_1;
  assign add_signext_9 = product_pipeline_phase0_2;
  assign sumvector1[4] = add_signext_8 + add_signext_9;

  assign add_signext_10 = product_pipeline_phase0_3;
  assign add_signext_11 = product_pipeline_phase0_4;
  assign sumvector1[5] = add_signext_10 + add_signext_11;

  assign add_signext_12 = product_pipeline_phase0_5;
  assign add_signext_13 = product_pipeline_phase0_6;
  assign sumvector1[6] = add_signext_12 + add_signext_13;

  assign add_signext_14 = product_pipeline_phase0_7;
  assign add_signext_15 = product_pipeline_phase0_8;
  assign sumvector1[7] = add_signext_14 + add_signext_15;

  assign sumvector1[8] = $signed({{1{product_pipeline_phase0_9[30]}}, product_pipeline_phase0_9});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
        sumdelay_pipeline1[3] <= 0;
        sumdelay_pipeline1[4] <= 0;
        sumdelay_pipeline1[5] <= 0;
        sumdelay_pipeline1[6] <= 0;
        sumdelay_pipeline1[7] <= 0;
        sumdelay_pipeline1[8] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
          sumdelay_pipeline1[3] <= sumvector1[3];
          sumdelay_pipeline1[4] <= sumvector1[4];
          sumdelay_pipeline1[5] <= sumvector1[5];
          sumdelay_pipeline1[6] <= sumvector1[6];
          sumdelay_pipeline1[7] <= sumvector1[7];
          sumdelay_pipeline1[8] <= sumvector1[8];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_16 = sumdelay_pipeline1[0];
  assign add_signext_17 = sumdelay_pipeline1[1];
  assign add_temp_1 = add_signext_16 + add_signext_17;
  assign sumvector2[0] = add_temp_1[31:0];

  assign add_signext_18 = sumdelay_pipeline1[2];
  assign add_signext_19 = sumdelay_pipeline1[3];
  assign add_temp_2 = add_signext_18 + add_signext_19;
  assign sumvector2[1] = add_temp_2[31:0];

  assign add_signext_20 = sumdelay_pipeline1[4];
  assign add_signext_21 = sumdelay_pipeline1[5];
  assign add_temp_3 = add_signext_20 + add_signext_21;
  assign sumvector2[2] = add_temp_3[31:0];

  assign add_signext_22 = sumdelay_pipeline1[6];
  assign add_signext_23 = sumdelay_pipeline1[7];
  assign add_temp_4 = add_signext_22 + add_signext_23;
  assign sumvector2[3] = add_temp_4[31:0];

  assign sumvector2[4] = sumdelay_pipeline1[8];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
        sumdelay_pipeline2[2] <= 0;
        sumdelay_pipeline2[3] <= 0;
        sumdelay_pipeline2[4] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
          sumdelay_pipeline2[2] <= sumvector2[2];
          sumdelay_pipeline2[3] <= sumvector2[3];
          sumdelay_pipeline2[4] <= sumvector2[4];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_24 = sumdelay_pipeline2[0];
  assign add_signext_25 = sumdelay_pipeline2[1];
  assign add_temp_5 = add_signext_24 + add_signext_25;
  assign sumvector3[0] = add_temp_5[31:0];

  assign add_signext_26 = sumdelay_pipeline2[2];
  assign add_signext_27 = sumdelay_pipeline2[3];
  assign add_temp_6 = add_signext_26 + add_signext_27;
  assign sumvector3[1] = add_temp_6[31:0];

  assign sumvector3[2] = sumdelay_pipeline2[4];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process3
      if (reset == 1'b1) begin
        sumdelay_pipeline3[0] <= 0;
        sumdelay_pipeline3[1] <= 0;
        sumdelay_pipeline3[2] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline3[0] <= sumvector3[0];
          sumdelay_pipeline3[1] <= sumvector3[1];
          sumdelay_pipeline3[2] <= sumvector3[2];
        end
      end
    end // sumdelay_pipeline_process3

  assign add_signext_28 = sumdelay_pipeline3[0];
  assign add_signext_29 = sumdelay_pipeline3[1];
  assign add_temp_7 = add_signext_28 + add_signext_29;
  assign sumvector4[0] = add_temp_7[31:0];

  assign sumvector4[1] = sumdelay_pipeline3[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process4
      if (reset == 1'b1) begin
        sumdelay_pipeline4[0] <= 0;
        sumdelay_pipeline4[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline4[0] <= sumvector4[0];
          sumdelay_pipeline4[1] <= sumvector4[1];
        end
      end
    end // sumdelay_pipeline_process4

  assign add_signext_30 = sumdelay_pipeline4[0];
  assign add_signext_31 = sumdelay_pipeline4[1];
  assign add_temp_8 = add_signext_30 + add_signext_31;
  assign sum5 = add_temp_8[31:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
        ce_delayline7 <= 1'b0;
        ce_delayline8 <= 1'b0;
        ce_delayline9 <= 1'b0;
        ce_delayline10 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_delayline1 <= clk_enable;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
          ce_delayline7 <= ce_delayline6;
          ce_delayline8 <= ce_delayline7;
          ce_delayline9 <= ce_delayline8;
          ce_delayline10 <= ce_delayline9;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline10 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= sum5;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_gated;
  assign filter_out = output_register;
endmodule  // cfir
