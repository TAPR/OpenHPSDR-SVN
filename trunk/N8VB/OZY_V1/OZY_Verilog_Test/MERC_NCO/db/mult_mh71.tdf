--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Logic ELements" INPUT_A_FIXED_VALUE="Bx" INPUT_A_IS_CONSTANT="NO" INPUT_B_FIXED_VALUE="Bx" INPUT_B_IS_CONSTANT="NO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=17 LPM_WIDTHB=12 LPM_WIDTHP=29 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_mult 2006:05:18:13:55:50:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_padd 2006:01:12:17:31:50:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ cbx_util_mgl 2006:01:09:10:46:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 257 
SUBDESIGN mult_mh71
( 
	dataa[16..0]	:	input;
	datab[11..0]	:	input;
	result[28..0]	:	output;
) 
VARIABLE
	add10_result[28..0]	:	WIRE;
	add14_result[25..0]	:	WIRE;
	add18_result[21..0]	:	WIRE;
	add22_result[17..0]	:	WIRE;
	add26_result[13..0]	:	WIRE;
	add30_result[9..0]	:	WIRE;
	cs1a[5..0] : carry_sum;
	cs3a[5..0] : carry_sum;
	le2a[17..0] : lcell;
	le4a[17..0] : lcell;
	le5a[17..0] : lcell;
	le6a[17..0] : lcell;
	le7a[17..0] : lcell;
	le8a[17..0] : lcell;
	le9a[17..0] : lcell;
	sft11a[28..0] : soft;
	sft12a[28..0] : soft;
	sft13a[28..0] : soft;
	sft15a[25..0] : soft;
	sft16a[25..0] : soft;
	sft17a[25..0] : soft;
	sft19a[21..0] : soft;
	sft20a[21..0] : soft;
	sft21a[21..0] : soft;
	sft23a[17..0] : soft;
	sft24a[17..0] : soft;
	sft25a[17..0] : soft;
	sft27a[13..0] : soft;
	sft28a[13..0] : soft;
	sft29a[13..0] : soft;
	sft31a[9..0] : soft;
	sft32a[9..0] : soft;
	sft33a[9..0] : soft;
	dataa_node[16..0]	: WIRE;
	datab_node[11..0]	: WIRE;
	final_result_node[28..0]	: WIRE;
	w10w[17..0]	: WIRE;
	w11w[17..0]	: WIRE;
	w195w[17..0]	: WIRE;
	w196w[17..0]	: WIRE;
	w197w[17..0]	: WIRE;
	w205w[17..0]	: WIRE;
	w206w[17..0]	: WIRE;
	w243w	: WIRE;
	w252w	: WIRE;
	w254w[17..0]	: WIRE;
	w255w[17..0]	: WIRE;
	w256w[17..0]	: WIRE;
	w264w[17..0]	: WIRE;
	w265w[17..0]	: WIRE;
	w290w	: WIRE;
	w292w	: WIRE;
	w294w	: WIRE;
	w296w	: WIRE;
	w298w	: WIRE;
	w300w	: WIRE;
	w302w	: WIRE;
	w304w	: WIRE;
	w308w	: WIRE;
	w310w	: WIRE;
	w311w[17..0]	: WIRE;
	w312w[17..0]	: WIRE;
	w313w[17..0]	: WIRE;
	w321w[17..0]	: WIRE;
	w322w[17..0]	: WIRE;
	w339w	: WIRE;
	w341w	: WIRE;
	w343w	: WIRE;
	w345w	: WIRE;
	w347w	: WIRE;
	w349w	: WIRE;
	w351w	: WIRE;
	w353w	: WIRE;
	w355w	: WIRE;
	w357w	: WIRE;
	w359w	: WIRE;
	w361w	: WIRE;
	w363w	: WIRE;
	w365w	: WIRE;
	w367w	: WIRE;
	w369w	: WIRE;
	w373w	: WIRE;
	w375w	: WIRE;
	w376w[17..0]	: WIRE;
	w377w[17..0]	: WIRE;
	w378w[17..0]	: WIRE;
	w386w[17..0]	: WIRE;
	w387w[17..0]	: WIRE;
	w404w	: WIRE;
	w406w	: WIRE;
	w408w	: WIRE;
	w410w	: WIRE;
	w412w	: WIRE;
	w414w	: WIRE;
	w416w	: WIRE;
	w418w	: WIRE;
	w420w	: WIRE;
	w422w	: WIRE;
	w424w	: WIRE;
	w426w	: WIRE;
	w428w	: WIRE;
	w430w	: WIRE;
	w432w	: WIRE;
	w434w	: WIRE;
	w438w	: WIRE;
	w440w	: WIRE;
	w441w[17..0]	: WIRE;
	w442w[17..0]	: WIRE;
	w443w[17..0]	: WIRE;
	w451w[17..0]	: WIRE;
	w452w[17..0]	: WIRE;
	w469w	: WIRE;
	w471w	: WIRE;
	w473w	: WIRE;
	w475w	: WIRE;
	w477w	: WIRE;
	w479w	: WIRE;
	w481w	: WIRE;
	w483w	: WIRE;
	w485w	: WIRE;
	w487w	: WIRE;
	w489w	: WIRE;
	w491w	: WIRE;
	w493w	: WIRE;
	w495w	: WIRE;
	w497w	: WIRE;
	w499w	: WIRE;
	w503w	: WIRE;
	w505w	: WIRE;
	w506w	: WIRE;
	w507w	: WIRE;
	w508w	: WIRE;
	w509w	: WIRE;
	w510w	: WIRE;
	w511w	: WIRE;
	w513w	: WIRE;
	w514w	: WIRE;
	w515w	: WIRE;
	w516w	: WIRE;
	w517w	: WIRE;
	w518w	: WIRE;
	w519w	: WIRE;
	w520w	: WIRE;
	w521w	: WIRE;
	w522w	: WIRE;
	w523w	: WIRE;
	w524w	: WIRE;
	w525w	: WIRE;
	w526w	: WIRE;
	w527w	: WIRE;
	w528w	: WIRE;
	w529w	: WIRE;
	w530w	: WIRE;
	w531w	: WIRE;
	w532w	: WIRE;
	w533w	: WIRE;
	w534w	: WIRE;
	w535w	: WIRE;
	w536w	: WIRE;
	w539w	: WIRE;
	w7w[11..0]	: WIRE;
	w886w[28..0]	: WIRE;
	w8w[17..0]	: WIRE;
	w9w[17..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add18_result[] = sft19a[].out + sft20a[].out;
	add22_result[] = sft23a[].out + sft24a[].out;
	add26_result[] = sft27a[].out + sft28a[].out;
	add30_result[] = sft31a[].out + sft32a[].out;
	cs1a[].cin = ( B"0", ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs1a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[4].cout, ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), ((((((! w7w[7..7]) & w7w[6..6]) & cs1a[2].cout) # ((w7w[7..7] & w7w[6..6]) & (! cs1a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs1a[2].cout)) # ((w7w[7..7] & (! w7w[6..6])) & (! cs1a[2].cout))), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( B"0", ((w7w[8..8] & cs3a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs3a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( (w7w[10..10] $ cs3a[4].cout), ((((((! w7w[9..9]) & (! w7w[8..8])) & cs3a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs3a[3].cout)), ((((((! w7w[7..7]) & (! w7w[6..6])) & cs3a[2].cout) # (((! w7w[7..7]) & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs3a[2].cout)), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le2a[].in = (((((w7w[11..11] & (! w7w[10..10])) & (! cs1a[5].sout)) & (! w10w[])) # ((((! w7w[11..11]) & w7w[10..10]) & cs1a[5].sout) & w10w[])) # ((w7w[11..11] & w7w[10..10]) & cs1a[5].sout));
	le4a[].in = (! ((! w9w[]) & (! (cs3a[5].sout & (w7w[11..11] $ w11w[])))));
	le5a[].in = (! ((! w205w[]) & (! w206w[])));
	le6a[].in = (! ((! w264w[]) & (! w265w[])));
	le7a[].in = (! ((! w321w[]) & (! w322w[])));
	le8a[].in = (! ((! w386w[]) & (! w387w[])));
	le9a[].in = (! ((! w451w[]) & (! w452w[])));
	sft11a[].in = ( w506w, ( (! w8w[17..17]), ( w8w[16..16], ( w533w, ( w511w, ( w499w, ( w497w, ( w434w, ( w432w, ( w369w, ( w367w, ( w304w, ( w302w, ( w300w, ( w298w, ( w296w, ( w294w, ( w292w, ( w243w, ( w349w, ( w347w, ( w345w, ( w343w, ( w341w, ( w339w, ( w254w[1..1], ( w254w[0..0], ( w195w[1..0]))))))))))))))))))))))))))));
	sft12a[].in = ( w539w, ( w536w, ( w535w, ( w534w, ( w532w, ( w530w, ( w510w, ( w495w, ( w493w, ( w430w, ( w428w, ( w365w, ( w363w, ( w361w, ( w359w, ( w357w, ( w355w, ( w353w, ( w290w, ( w410w, ( w408w, ( w406w, ( w404w, ( w514w, ( w375w, ( w513w, ( w310w, ( w539w, w252w))))))))))))))))))))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w539w, ( w506w, ( w8w[15..15], ( w8w[14..14], ( w8w[13..13], ( w8w[12..12], ( w8w[11..11], ( w8w[10..10], ( w8w[9..9], ( w8w[8..8], ( w426w, ( w8w[6..6], ( w8w[5..5], ( w8w[4..4], ( w8w[3..3], ( w8w[2..2], ( w8w[1..1], ( w351w, ( w441w[1..1], ( w441w[0..0], ( w376w[1..1], ( w376w[0..0], ( w311w[1..1], ( w311w[0..0], ( w195w[3..2])))))))))))))))))))))))));
	sft16a[].in = ( w539w, ( w539w, ( (! w441w[17..17]), ( w441w[16..16], ( w441w[15..15], ( w529w, ( w527w, ( w509w, ( w491w, ( w489w, ( w507w, ( w424w, ( w422w, ( w420w, ( w418w, ( w416w, ( w414w, ( w473w, ( w471w, ( w469w, ( w515w, ( w440w, ( w254w[3..3], ( w254w[2..2], ( w539w, w308w)))))))))))))))))))))))));
	sft17a[].in = add14_result[];
	sft19a[].in = ( w539w, ( w506w, ( (! w376w[17..17]), ( w441w[14..14], ( w441w[13..13], ( w441w[12..12], ( w524w, ( w508w, ( w8w[7..7], ( w485w, ( w483w, ( w481w, ( w479w, ( w477w, ( w475w, ( w8w[0..0], ( w376w[3..3], ( w376w[2..2], ( w311w[3..3], ( w311w[2..2], ( w195w[5..5], w373w)))))))))))))))))))));
	sft20a[].in = ( w539w, ( w539w, ( w531w, ( w376w[16..16], ( w528w, ( w526w, ( w525w, ( w523w, ( w487w, ( w522w, ( w521w, ( w520w, ( w519w, ( w518w, ( w517w, ( w412w, ( w516w, ( w505w, ( w254w[5..5], ( w254w[4..4], ( w539w, w195w[4..4])))))))))))))))))))));
	sft21a[].in = add18_result[];
	sft23a[].in = ( w539w, ( w506w, ( w376w[15..15], ( w376w[14..14], ( w441w[11..11], ( w441w[10..10], ( w441w[9..9], ( w441w[8..8], ( w441w[7..7], ( w441w[6..6], ( w441w[5..5], ( w441w[4..4], ( w441w[3..3], ( w441w[2..2], ( w311w[5..5], ( w311w[4..4], ( w195w[7..6])))))))))))))))));
	sft24a[].in = ( w539w, ( w539w, ( (! w311w[17..17]), ( w311w[16..16], ( w376w[13..13], ( w376w[12..12], ( w376w[11..11], ( w376w[10..10], ( w376w[9..9], ( w376w[8..8], ( w376w[7..7], ( w376w[6..6], ( w376w[5..5], ( w376w[4..4], ( w254w[7..7], ( w254w[6..6], ( w539w, w438w)))))))))))))))));
	sft25a[].in = add22_result[];
	sft27a[].in = ( w539w, ( w506w, ( w311w[15..15], ( w311w[14..14], ( w311w[13..13], ( w311w[12..12], ( w311w[11..11], ( w311w[10..10], ( w311w[9..9], ( w311w[8..8], ( w311w[7..7], ( w311w[6..6], ( w195w[9..9], w503w)))))))))))));
	sft28a[].in = ( w539w, ( w539w, ( (! w254w[17..17]), ( w254w[16..16], ( w254w[15..15], ( w254w[14..14], ( w254w[13..13], ( w254w[12..12], ( w254w[11..11], ( w254w[10..10], ( w254w[9..9], ( w254w[8..8], ( w539w, w195w[8..8])))))))))))));
	sft29a[].in = add26_result[];
	sft31a[].in = ( w539w, ( w506w, ( (! w195w[17..17]), ( w195w[16..16], ( w195w[15..15], ( w195w[14..14], ( w195w[13..13], ( w195w[12..12], ( w195w[11..11], w7w[11..11])))))))));
	sft32a[].in = ( w539w, ( w539w, ( w506w, ( w539w, ( w539w, ( w539w, ( w539w, ( w539w, ( w539w, w195w[10..10])))))))));
	sft33a[].in = add30_result[];
	dataa_node[] = ( dataa[16..0]);
	datab_node[] = ( datab[11..0]);
	final_result_node[] = ( w886w[28..0]);
	result[] = ( final_result_node[28..0]);
	w10w[] = ( dataa_node[], B"0");
	w11w[] = ( dataa_node[16..16], dataa_node[]);
	w195w[] = le5a[].out;
	w196w[] = ( dataa_node[], B"0");
	w197w[] = ( dataa_node[16..16], dataa_node[]);
	w205w[] = (((! w196w[]) & cs1a[0].sout) & (! cs3a[0].sout));
	w206w[] = ((((! w197w[]) & cs1a[0].sout) & cs3a[0].sout) # ((w197w[] & (! cs1a[0].sout)) & cs3a[0].sout));
	w243w = sft17a[8..8].out;
	w252w = cs1a[0].sout;
	w254w[] = le6a[].out;
	w255w[] = ( dataa_node[], B"0");
	w256w[] = ( dataa_node[16..16], dataa_node[]);
	w264w[] = (((! w255w[]) & cs1a[1].sout) & (! cs3a[1].sout));
	w265w[] = ((((! w256w[]) & cs1a[1].sout) & cs3a[1].sout) # ((w256w[] & (! cs1a[1].sout)) & cs3a[1].sout));
	w290w = sft21a[6..6].out;
	w292w = sft17a[9..9].out;
	w294w = sft17a[10..10].out;
	w296w = sft17a[11..11].out;
	w298w = sft17a[12..12].out;
	w300w = sft17a[13..13].out;
	w302w = sft17a[14..14].out;
	w304w = sft17a[15..15].out;
	w308w = cs1a[1].sout;
	w310w = sft17a[0..0].out;
	w311w[] = le7a[].out;
	w312w[] = ( dataa_node[], B"0");
	w313w[] = ( dataa_node[16..16], dataa_node[]);
	w321w[] = (((! w312w[]) & cs1a[2].sout) & (! cs3a[2].sout));
	w322w[] = ((((! w313w[]) & cs1a[2].sout) & cs3a[2].sout) # ((w313w[] & (! cs1a[2].sout)) & cs3a[2].sout));
	w339w = sft17a[2..2].out;
	w341w = sft17a[3..3].out;
	w343w = sft17a[4..4].out;
	w345w = sft17a[5..5].out;
	w347w = sft17a[6..6].out;
	w349w = sft17a[7..7].out;
	w351w = sft25a[4..4].out;
	w353w = sft21a[7..7].out;
	w355w = sft21a[8..8].out;
	w357w = sft21a[9..9].out;
	w359w = sft21a[10..10].out;
	w361w = sft21a[11..11].out;
	w363w = sft21a[12..12].out;
	w365w = sft21a[13..13].out;
	w367w = sft17a[16..16].out;
	w369w = sft17a[17..17].out;
	w373w = cs1a[2].sout;
	w375w = sft21a[0..0].out;
	w376w[] = le8a[].out;
	w377w[] = ( dataa_node[], B"0");
	w378w[] = ( dataa_node[16..16], dataa_node[]);
	w386w[] = (((! w377w[]) & cs1a[3].sout) & (! cs3a[3].sout));
	w387w[] = ((((! w378w[]) & cs1a[3].sout) & cs3a[3].sout) # ((w378w[] & (! cs1a[3].sout)) & cs3a[3].sout));
	w404w = sft21a[2..2].out;
	w406w = sft21a[3..3].out;
	w408w = sft21a[4..4].out;
	w410w = sft21a[5..5].out;
	w412w = sft33a[0..0].out;
	w414w = sft25a[5..5].out;
	w416w = sft25a[6..6].out;
	w418w = sft25a[7..7].out;
	w420w = sft25a[8..8].out;
	w422w = sft25a[9..9].out;
	w424w = sft25a[10..10].out;
	w426w = sft25a[11..11].out;
	w428w = sft21a[14..14].out;
	w430w = sft21a[15..15].out;
	w432w = sft17a[18..18].out;
	w434w = sft17a[19..19].out;
	w438w = cs1a[3].sout;
	w440w = sft25a[0..0].out;
	w441w[] = le9a[].out;
	w442w[] = ( dataa_node[], B"0");
	w443w[] = ( dataa_node[16..16], dataa_node[]);
	w451w[] = (((! w442w[]) & cs1a[4].sout) & (! cs3a[4].sout));
	w452w[] = ((((! w443w[]) & cs1a[4].sout) & cs3a[4].sout) # ((w443w[] & (! cs1a[4].sout)) & cs3a[4].sout));
	w469w = sft25a[2..2].out;
	w471w = sft25a[3..3].out;
	w473w = sft29a[2..2].out;
	w475w = sft29a[3..3].out;
	w477w = sft29a[4..4].out;
	w479w = sft29a[5..5].out;
	w481w = sft29a[6..6].out;
	w483w = sft29a[7..7].out;
	w485w = sft29a[8..8].out;
	w487w = sft33a[7..7].out;
	w489w = sft25a[12..12].out;
	w491w = sft25a[13..13].out;
	w493w = sft21a[16..16].out;
	w495w = sft21a[17..17].out;
	w497w = sft17a[20..20].out;
	w499w = sft17a[21..21].out;
	w503w = cs1a[4].sout;
	w505w = sft29a[0..0].out;
	w506w = B"1";
	w507w = sft29a[9..9].out;
	w508w = sft29a[10..10].out;
	w509w = sft25a[14..14].out;
	w510w = sft21a[18..18].out;
	w511w = sft17a[22..22].out;
	w513w = sft17a[1..1].out;
	w514w = sft21a[1..1].out;
	w515w = sft25a[1..1].out;
	w516w = sft29a[1..1].out;
	w517w = sft33a[1..1].out;
	w518w = sft33a[2..2].out;
	w519w = sft33a[3..3].out;
	w520w = sft33a[4..4].out;
	w521w = sft33a[5..5].out;
	w522w = sft33a[6..6].out;
	w523w = sft33a[8..8].out;
	w524w = sft29a[11..11].out;
	w525w = sft33a[9..9].out;
	w526w = sft29a[12..12].out;
	w527w = sft25a[15..15].out;
	w528w = sft29a[13..13].out;
	w529w = sft25a[16..16].out;
	w530w = sft21a[19..19].out;
	w531w = sft25a[17..17].out;
	w532w = sft21a[20..20].out;
	w533w = sft17a[23..23].out;
	w534w = sft21a[21..21].out;
	w535w = sft17a[24..24].out;
	w536w = sft17a[25..25].out;
	w539w = B"0";
	w7w[] = datab_node[];
	w886w[] = ( sft13a[28..27].out, sft13a[26..25].out, sft13a[24..23].out, sft13a[22..21].out, sft13a[20..19].out, sft13a[18..17].out, sft13a[16..15].out, sft13a[14..13].out, sft13a[12..11].out, sft13a[10..9].out, sft13a[8..7].out, sft13a[6..5].out, sft13a[4..3].out, sft13a[2..1].out, sft13a[0..0].out);
	w8w[] = le4a[].out;
	w9w[] = le2a[].out;
END;
--VALID FILE
