--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Logic ELements" INPUT_A_FIXED_VALUE="Bx" INPUT_A_IS_CONSTANT="NO" INPUT_B_FIXED_VALUE="Bx" INPUT_B_IS_CONSTANT="NO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=17 LPM_WIDTHB=7 LPM_WIDTHP=24 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_mult 2006:05:18:13:55:50:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_padd 2006:01:12:17:31:50:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ cbx_util_mgl 2006:01:09:10:46:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 155 
SUBDESIGN mult_5g71
( 
	dataa[16..0]	:	input;
	datab[6..0]	:	input;
	result[23..0]	:	output;
) 
VARIABLE
	add11_result[20..0]	:	WIRE;
	add15_result[17..0]	:	WIRE;
	add19_result[13..0]	:	WIRE;
	add7_result[23..0]	:	WIRE;
	cs1a[3..0] : carry_sum;
	cs3a[2..0] : carry_sum;
	le2a[16..0] : lcell;
	le4a[17..0] : lcell;
	le5a[17..0] : lcell;
	le6a[17..0] : lcell;
	sft10a[23..0] : soft;
	sft12a[20..0] : soft;
	sft13a[20..0] : soft;
	sft14a[20..0] : soft;
	sft16a[17..0] : soft;
	sft17a[17..0] : soft;
	sft18a[17..0] : soft;
	sft20a[13..0] : soft;
	sft21a[13..0] : soft;
	sft22a[13..0] : soft;
	sft8a[23..0] : soft;
	sft9a[23..0] : soft;
	dataa_node[16..0]	: WIRE;
	datab_node[6..0]	: WIRE;
	final_result_node[23..0]	: WIRE;
	w119w[17..0]	: WIRE;
	w120w[17..0]	: WIRE;
	w121w[17..0]	: WIRE;
	w12w[16..0]	: WIRE;
	w130w[17..0]	: WIRE;
	w131w[17..0]	: WIRE;
	w160w	: WIRE;
	w173w	: WIRE;
	w175w[17..0]	: WIRE;
	w176w[17..0]	: WIRE;
	w177w[17..0]	: WIRE;
	w185w[17..0]	: WIRE;
	w186w[17..0]	: WIRE;
	w207w	: WIRE;
	w209w	: WIRE;
	w211w	: WIRE;
	w213w	: WIRE;
	w215w	: WIRE;
	w217w	: WIRE;
	w219w	: WIRE;
	w221w	: WIRE;
	w223w	: WIRE;
	w225w	: WIRE;
	w227w	: WIRE;
	w229w	: WIRE;
	w233w	: WIRE;
	w235w	: WIRE;
	w236w[17..0]	: WIRE;
	w237w[17..0]	: WIRE;
	w238w[17..0]	: WIRE;
	w246w[17..0]	: WIRE;
	w247w[17..0]	: WIRE;
	w264w	: WIRE;
	w266w	: WIRE;
	w268w	: WIRE;
	w270w	: WIRE;
	w272w	: WIRE;
	w274w	: WIRE;
	w276w	: WIRE;
	w278w	: WIRE;
	w280w	: WIRE;
	w282w	: WIRE;
	w284w	: WIRE;
	w286w	: WIRE;
	w288w	: WIRE;
	w290w	: WIRE;
	w292w	: WIRE;
	w294w	: WIRE;
	w298w	: WIRE;
	w300w	: WIRE;
	w301w	: WIRE;
	w302w	: WIRE;
	w303w	: WIRE;
	w304w	: WIRE;
	w306w	: WIRE;
	w307w	: WIRE;
	w308w	: WIRE;
	w309w	: WIRE;
	w310w	: WIRE;
	w311w	: WIRE;
	w312w	: WIRE;
	w313w	: WIRE;
	w314w	: WIRE;
	w315w	: WIRE;
	w316w	: WIRE;
	w317w	: WIRE;
	w318w	: WIRE;
	w319w	: WIRE;
	w320w	: WIRE;
	w321w	: WIRE;
	w322w	: WIRE;
	w323w	: WIRE;
	w324w	: WIRE;
	w327w	: WIRE;
	w552w[23..0]	: WIRE;
	w7w[7..0]	: WIRE;

BEGIN 
	add11_result[] = sft12a[].out + sft13a[].out;
	add15_result[] = sft16a[].out + sft17a[].out;
	add19_result[] = sft20a[].out + sft21a[].out;
	add7_result[] = sft8a[].out + sft9a[].out;
	cs1a[].cin = ( B"0", ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[2].cout, ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le2a[].in = (((w7w[6..6] & cs1a[3].sout) # ((w7w[6..6] & (! cs1a[3].sout)) & (! dataa_node[]))) # (((! w7w[6..6]) & cs1a[3].sout) & dataa_node[]));
	le4a[].in = (! ((! w130w[]) & (! w131w[])));
	le5a[].in = (! ((! w185w[]) & (! w186w[])));
	le6a[].in = (! ((! w246w[]) & (! w247w[])));
	sft10a[].in = add7_result[];
	sft12a[].in = ( w327w, ( w12w[15..15], ( w12w[14..14], ( w12w[13..13], ( w12w[12..12], ( w12w[11..11], ( w12w[10..10], ( w12w[9..9], ( w12w[8..8], ( w12w[7..7], ( w12w[6..6], ( w12w[5..5], ( w12w[4..4], ( w12w[3..3], ( w12w[2..2], ( w12w[1..1], ( w12w[0..0], ( w236w[1..1], ( w236w[0..0], ( w119w[3..2]))))))))))))))))))));
	sft13a[].in = ( w327w, ( (! w236w[17..17]), ( w236w[16..16], ( w236w[15..15], ( w318w, ( w302w, ( w317w, ( w316w, ( w315w, ( w314w, ( w313w, ( w312w, ( w311w, ( w310w, ( w309w, ( w308w, ( w268w, ( w175w[3..3], ( w175w[2..2], ( w327w, w233w))))))))))))))))))));
	sft14a[].in = add11_result[];
	sft16a[].in = ( w327w, ( w301w, ( (! w175w[17..17]), ( w236w[14..14], ( w236w[13..13], ( w236w[12..12], ( w236w[11..11], ( w236w[10..10], ( w236w[9..9], ( w236w[8..8], ( w236w[7..7], ( w236w[6..6], ( w236w[5..5], ( w236w[4..4], ( w236w[3..3], ( w236w[2..2], ( w119w[5..5], w298w)))))))))))))))));
	sft17a[].in = ( w327w, ( w327w, ( w320w, ( w175w[16..16], ( w175w[15..15], ( w175w[14..14], ( w175w[13..13], ( w175w[12..12], ( w175w[11..11], ( w175w[10..10], ( w175w[9..9], ( w175w[8..8], ( w175w[7..7], ( w175w[6..6], ( w175w[5..5], ( w175w[4..4], ( w327w, w119w[4..4])))))))))))))))));
	sft18a[].in = add15_result[];
	sft20a[].in = ( w327w, ( w301w, ( w301w, ( w119w[16..16], ( w119w[15..15], ( w119w[14..14], ( w119w[13..13], ( w119w[12..12], ( w119w[11..11], ( w119w[10..10], ( w119w[9..9], ( w119w[8..8], ( w119w[7..6])))))))))))));
	sft21a[].in = ( w327w, ( w327w, ( (! w119w[17..17]), ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, ( w327w, w7w[6..6])))))))))))));
	sft22a[].in = add19_result[];
	sft8a[].in = ( w301w, ( (! w12w[16..16]), ( w322w, ( w304w, ( w294w, ( w292w, ( w229w, ( w227w, ( w225w, ( w223w, ( w221w, ( w219w, ( w217w, ( w215w, ( w213w, ( w211w, ( w209w, ( w160w, ( w266w, ( w264w, ( w175w[1..1], ( w175w[0..0], ( w119w[1..0])))))))))))))))))))))));
	sft9a[].in = ( w327w, ( w324w, ( w323w, ( w321w, ( w319w, ( w303w, ( w290w, ( w288w, ( w286w, ( w284w, ( w282w, ( w280w, ( w278w, ( w276w, ( w274w, ( w272w, ( w270w, ( w207w, ( w307w, ( w300w, ( w306w, ( w235w, ( w327w, w173w)))))))))))))))))))))));
	dataa_node[] = ( dataa[16..0]);
	datab_node[] = ( datab[6..0]);
	final_result_node[] = ( w552w[23..0]);
	result[] = ( final_result_node[23..0]);
	w119w[] = le4a[].out;
	w120w[] = ( dataa_node[], B"0");
	w121w[] = ( dataa_node[16..16], dataa_node[]);
	w12w[] = le2a[].out;
	w130w[] = (((! w120w[]) & cs1a[0].sout) & (! cs3a[0].sout));
	w131w[] = ((((! w121w[]) & cs1a[0].sout) & cs3a[0].sout) # ((w121w[] & (! cs1a[0].sout)) & cs3a[0].sout));
	w160w = sft14a[4..4].out;
	w173w = cs1a[0].sout;
	w175w[] = le5a[].out;
	w176w[] = ( dataa_node[], B"0");
	w177w[] = ( dataa_node[16..16], dataa_node[]);
	w185w[] = (((! w176w[]) & cs1a[1].sout) & (! cs3a[1].sout));
	w186w[] = ((((! w177w[]) & cs1a[1].sout) & cs3a[1].sout) # ((w177w[] & (! cs1a[1].sout)) & cs3a[1].sout));
	w207w = sft18a[2..2].out;
	w209w = sft14a[5..5].out;
	w211w = sft14a[6..6].out;
	w213w = sft14a[7..7].out;
	w215w = sft14a[8..8].out;
	w217w = sft14a[9..9].out;
	w219w = sft14a[10..10].out;
	w221w = sft14a[11..11].out;
	w223w = sft14a[12..12].out;
	w225w = sft14a[13..13].out;
	w227w = sft14a[14..14].out;
	w229w = sft14a[15..15].out;
	w233w = cs1a[1].sout;
	w235w = sft14a[0..0].out;
	w236w[] = le6a[].out;
	w237w[] = ( dataa_node[], B"0");
	w238w[] = ( dataa_node[16..16], dataa_node[]);
	w246w[] = (((! w237w[]) & cs1a[2].sout) & (! cs3a[2].sout));
	w247w[] = ((((! w238w[]) & cs1a[2].sout) & cs3a[2].sout) # ((w238w[] & (! cs1a[2].sout)) & cs3a[2].sout));
	w264w = sft14a[2..2].out;
	w266w = sft14a[3..3].out;
	w268w = sft22a[0..0].out;
	w270w = sft18a[3..3].out;
	w272w = sft18a[4..4].out;
	w274w = sft18a[5..5].out;
	w276w = sft18a[6..6].out;
	w278w = sft18a[7..7].out;
	w280w = sft18a[8..8].out;
	w282w = sft18a[9..9].out;
	w284w = sft18a[10..10].out;
	w286w = sft18a[11..11].out;
	w288w = sft18a[12..12].out;
	w290w = sft18a[13..13].out;
	w292w = sft14a[16..16].out;
	w294w = sft14a[17..17].out;
	w298w = cs1a[2].sout;
	w300w = sft18a[0..0].out;
	w301w = B"1";
	w302w = sft22a[11..11].out;
	w303w = sft18a[14..14].out;
	w304w = sft14a[18..18].out;
	w306w = sft14a[1..1].out;
	w307w = sft18a[1..1].out;
	w308w = sft22a[1..1].out;
	w309w = sft22a[2..2].out;
	w310w = sft22a[3..3].out;
	w311w = sft22a[4..4].out;
	w312w = sft22a[5..5].out;
	w313w = sft22a[6..6].out;
	w314w = sft22a[7..7].out;
	w315w = sft22a[8..8].out;
	w316w = sft22a[9..9].out;
	w317w = sft22a[10..10].out;
	w318w = sft22a[12..12].out;
	w319w = sft18a[15..15].out;
	w320w = sft22a[13..13].out;
	w321w = sft18a[16..16].out;
	w322w = sft14a[19..19].out;
	w323w = sft18a[17..17].out;
	w324w = sft14a[20..20].out;
	w327w = B"0";
	w552w[] = ( sft10a[23..23].out, sft10a[22..22].out, sft10a[21..21].out, sft10a[20..20].out, sft10a[19..19].out, sft10a[18..18].out, sft10a[17..17].out, sft10a[16..16].out, sft10a[15..15].out, sft10a[14..14].out, sft10a[13..13].out, sft10a[12..12].out, sft10a[11..11].out, sft10a[10..10].out, sft10a[9..9].out, sft10a[8..8].out, sft10a[7..7].out, sft10a[6..6].out, sft10a[5..5].out, sft10a[4..4].out, sft10a[3..3].out, sft10a[2..2].out, sft10a[1..1].out, sft10a[0..0].out);
	w7w[] = ( datab_node[6..6], datab_node[]);
END;
--VALID FILE
