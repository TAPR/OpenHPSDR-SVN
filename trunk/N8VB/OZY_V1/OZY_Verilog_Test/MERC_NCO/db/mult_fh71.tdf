--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Logic ELements" INPUT_A_FIXED_VALUE="Bx" INPUT_A_IS_CONSTANT="NO" INPUT_B_FIXED_VALUE="Bx" INPUT_B_IS_CONSTANT="NO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=17 LPM_WIDTHB=13 LPM_WIDTHP=30 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_mult 2006:05:18:13:55:50:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_padd 2006:01:12:17:31:50:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ cbx_util_mgl 2006:01:09:10:46:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 275 
SUBDESIGN mult_fh71
( 
	dataa[16..0]	:	input;
	datab[12..0]	:	input;
	result[29..0]	:	output;
) 
VARIABLE
	add10_result[29..0]	:	WIRE;
	add14_result[26..0]	:	WIRE;
	add18_result[23..0]	:	WIRE;
	add22_result[19..0]	:	WIRE;
	add26_result[13..0]	:	WIRE;
	add30_result[9..0]	:	WIRE;
	add34_result[11..0]	:	WIRE;
	cs1a[6..0] : carry_sum;
	cs3a[5..0] : carry_sum;
	le2a[16..0] : lcell;
	le4a[17..0] : lcell;
	le5a[17..0] : lcell;
	le6a[17..0] : lcell;
	le7a[17..0] : lcell;
	le8a[17..0] : lcell;
	le9a[17..0] : lcell;
	sft11a[29..0] : soft;
	sft12a[29..0] : soft;
	sft13a[29..0] : soft;
	sft15a[26..0] : soft;
	sft16a[26..0] : soft;
	sft17a[26..0] : soft;
	sft19a[23..0] : soft;
	sft20a[23..0] : soft;
	sft21a[23..0] : soft;
	sft23a[19..0] : soft;
	sft24a[19..0] : soft;
	sft25a[19..0] : soft;
	sft27a[13..0] : soft;
	sft28a[13..0] : soft;
	sft29a[13..0] : soft;
	sft31a[9..0] : soft;
	sft32a[9..0] : soft;
	sft33a[9..0] : soft;
	sft35a[11..0] : soft;
	sft36a[11..0] : soft;
	sft37a[11..0] : soft;
	dataa_node[16..0]	: WIRE;
	datab_node[12..0]	: WIRE;
	final_result_node[29..0]	: WIRE;
	w1014w[29..0]	: WIRE;
	w12w[16..0]	: WIRE;
	w203w[17..0]	: WIRE;
	w204w[17..0]	: WIRE;
	w205w[17..0]	: WIRE;
	w214w[17..0]	: WIRE;
	w215w[17..0]	: WIRE;
	w256w	: WIRE;
	w263w	: WIRE;
	w265w[17..0]	: WIRE;
	w266w[17..0]	: WIRE;
	w267w[17..0]	: WIRE;
	w275w[17..0]	: WIRE;
	w276w[17..0]	: WIRE;
	w303w	: WIRE;
	w305w	: WIRE;
	w307w	: WIRE;
	w309w	: WIRE;
	w311w	: WIRE;
	w313w	: WIRE;
	w317w	: WIRE;
	w319w	: WIRE;
	w320w[17..0]	: WIRE;
	w321w[17..0]	: WIRE;
	w322w[17..0]	: WIRE;
	w330w[17..0]	: WIRE;
	w331w[17..0]	: WIRE;
	w348w	: WIRE;
	w350w	: WIRE;
	w352w	: WIRE;
	w354w	: WIRE;
	w356w	: WIRE;
	w358w	: WIRE;
	w360w	: WIRE;
	w362w	: WIRE;
	w364w	: WIRE;
	w366w	: WIRE;
	w368w	: WIRE;
	w370w	: WIRE;
	w372w	: WIRE;
	w374w	: WIRE;
	w376w	: WIRE;
	w378w	: WIRE;
	w382w	: WIRE;
	w384w	: WIRE;
	w385w[17..0]	: WIRE;
	w386w[17..0]	: WIRE;
	w387w[17..0]	: WIRE;
	w395w[17..0]	: WIRE;
	w396w[17..0]	: WIRE;
	w413w	: WIRE;
	w415w	: WIRE;
	w417w	: WIRE;
	w419w	: WIRE;
	w421w	: WIRE;
	w423w	: WIRE;
	w425w	: WIRE;
	w427w	: WIRE;
	w429w	: WIRE;
	w431w	: WIRE;
	w433w	: WIRE;
	w435w	: WIRE;
	w437w	: WIRE;
	w439w	: WIRE;
	w441w	: WIRE;
	w443w	: WIRE;
	w447w	: WIRE;
	w449w	: WIRE;
	w450w[17..0]	: WIRE;
	w451w[17..0]	: WIRE;
	w452w[17..0]	: WIRE;
	w460w[17..0]	: WIRE;
	w461w[17..0]	: WIRE;
	w478w	: WIRE;
	w480w	: WIRE;
	w482w	: WIRE;
	w484w	: WIRE;
	w486w	: WIRE;
	w488w	: WIRE;
	w490w	: WIRE;
	w492w	: WIRE;
	w494w	: WIRE;
	w496w	: WIRE;
	w498w	: WIRE;
	w500w	: WIRE;
	w502w	: WIRE;
	w504w	: WIRE;
	w506w	: WIRE;
	w508w	: WIRE;
	w512w	: WIRE;
	w514w	: WIRE;
	w515w[17..0]	: WIRE;
	w516w[17..0]	: WIRE;
	w517w[17..0]	: WIRE;
	w525w[17..0]	: WIRE;
	w526w[17..0]	: WIRE;
	w543w	: WIRE;
	w545w	: WIRE;
	w547w	: WIRE;
	w549w	: WIRE;
	w551w	: WIRE;
	w553w	: WIRE;
	w555w	: WIRE;
	w557w	: WIRE;
	w559w	: WIRE;
	w561w	: WIRE;
	w563w	: WIRE;
	w565w	: WIRE;
	w567w	: WIRE;
	w569w	: WIRE;
	w571w	: WIRE;
	w573w	: WIRE;
	w577w	: WIRE;
	w579w	: WIRE;
	w580w	: WIRE;
	w581w	: WIRE;
	w582w	: WIRE;
	w583w	: WIRE;
	w584w	: WIRE;
	w585w	: WIRE;
	w586w	: WIRE;
	w588w	: WIRE;
	w589w	: WIRE;
	w590w	: WIRE;
	w591w	: WIRE;
	w592w	: WIRE;
	w593w	: WIRE;
	w594w	: WIRE;
	w595w	: WIRE;
	w596w	: WIRE;
	w597w	: WIRE;
	w598w	: WIRE;
	w599w	: WIRE;
	w600w	: WIRE;
	w601w	: WIRE;
	w602w	: WIRE;
	w603w	: WIRE;
	w604w	: WIRE;
	w605w	: WIRE;
	w606w	: WIRE;
	w607w	: WIRE;
	w608w	: WIRE;
	w609w	: WIRE;
	w610w	: WIRE;
	w611w	: WIRE;
	w612w	: WIRE;
	w615w	: WIRE;
	w7w[13..0]	: WIRE;

BEGIN 
	add10_result[] = sft11a[].out + sft12a[].out;
	add14_result[] = sft15a[].out + sft16a[].out;
	add18_result[] = sft19a[].out + sft20a[].out;
	add22_result[] = sft23a[].out + sft24a[].out;
	add26_result[] = sft27a[].out + sft28a[].out;
	add30_result[] = sft31a[].out + sft32a[].out;
	add34_result[] = sft35a[].out + sft36a[].out;
	cs1a[].cin = ( B"0", ((w7w[10..10] & cs1a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs1a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs1a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs1a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs1a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs1a[].sin = ( cs1a[5].cout, ((((((! w7w[11..11]) & w7w[10..10]) & cs1a[4].cout) # ((w7w[11..11] & w7w[10..10]) & (! cs1a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs1a[4].cout)) # ((w7w[11..11] & (! w7w[10..10])) & (! cs1a[4].cout))), ((((((! w7w[9..9]) & w7w[8..8]) & cs1a[3].cout) # ((w7w[9..9] & w7w[8..8]) & (! cs1a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs1a[3].cout)) # ((w7w[9..9] & (! w7w[8..8])) & (! cs1a[3].cout))), ((((((! w7w[7..7]) & w7w[6..6]) & cs1a[2].cout) # ((w7w[7..7] & w7w[6..6]) & (! cs1a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs1a[2].cout)) # ((w7w[7..7] & (! w7w[6..6])) & (! cs1a[2].cout))), ((((((! w7w[5..5]) & w7w[4..4]) & cs1a[1].cout) # ((w7w[5..5] & w7w[4..4]) & (! cs1a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs1a[1].cout)) # ((w7w[5..5] & (! w7w[4..4])) & (! cs1a[1].cout))), ((((((! w7w[3..3]) & w7w[2..2]) & cs1a[0].cout) # ((w7w[3..3] & w7w[2..2]) & (! cs1a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs1a[0].cout)) # ((w7w[3..3] & (! w7w[2..2])) & (! cs1a[0].cout))), w7w[1..1]);
	cs3a[].cin = ( ((w7w[10..10] & cs3a[4].cout) # w7w[11..11]), ((w7w[8..8] & cs3a[3].cout) # w7w[9..9]), ((w7w[6..6] & cs3a[2].cout) # w7w[7..7]), ((w7w[4..4] & cs3a[1].cout) # w7w[5..5]), ((w7w[2..2] & cs3a[0].cout) # w7w[3..3]), w7w[1..1]);
	cs3a[].sin = ( ((((((! w7w[11..11]) & (! w7w[10..10])) & cs3a[4].cout) # (((! w7w[11..11]) & w7w[10..10]) & (! cs3a[4].cout))) # ((w7w[11..11] & w7w[10..10]) & (! cs3a[4].cout))) # ((w7w[11..11] & (! w7w[10..10])) & cs3a[4].cout)), ((((((! w7w[9..9]) & (! w7w[8..8])) & cs3a[3].cout) # (((! w7w[9..9]) & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & w7w[8..8]) & (! cs3a[3].cout))) # ((w7w[9..9] & (! w7w[8..8])) & cs3a[3].cout)), ((((((! w7w[7..7]) & (! w7w[6..6])) & cs3a[2].cout) # (((! w7w[7..7]) & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & w7w[6..6]) & (! cs3a[2].cout))) # ((w7w[7..7] & (! w7w[6..6])) & cs3a[2].cout)), ((((((! w7w[5..5]) & (! w7w[4..4])) & cs3a[1].cout) # (((! w7w[5..5]) & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & w7w[4..4]) & (! cs3a[1].cout))) # ((w7w[5..5] & (! w7w[4..4])) & cs3a[1].cout)), ((((((! w7w[3..3]) & (! w7w[2..2])) & cs3a[0].cout) # (((! w7w[3..3]) & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & w7w[2..2]) & (! cs3a[0].cout))) # ((w7w[3..3] & (! w7w[2..2])) & cs3a[0].cout)), w7w[0..0]);
	le2a[].in = (((w7w[12..12] & cs1a[6].sout) # ((w7w[12..12] & (! cs1a[6].sout)) & (! dataa_node[]))) # (((! w7w[12..12]) & cs1a[6].sout) & dataa_node[]));
	le4a[].in = (! ((! w214w[]) & (! w215w[])));
	le5a[].in = (! ((! w275w[]) & (! w276w[])));
	le6a[].in = (! ((! w330w[]) & (! w331w[])));
	le7a[].in = (! ((! w395w[]) & (! w396w[])));
	le8a[].in = (! ((! w460w[]) & (! w461w[])));
	le9a[].in = (! ((! w525w[]) & (! w526w[])));
	sft11a[].in = ( w580w, ( (! w12w[16..16]), ( w610w, ( w586w, ( w573w, ( w571w, ( w508w, ( w506w, ( w443w, ( w441w, ( w378w, ( w376w, ( w313w, ( w311w, ( w309w, ( w307w, ( w305w, ( w256w, ( w362w, ( w360w, ( w358w, ( w356w, ( w354w, ( w352w, ( w350w, ( w348w, ( w265w[1..1], ( w265w[0..0], ( w203w[1..0])))))))))))))))))))))))))))));
	sft12a[].in = ( w615w, ( w612w, ( w611w, ( w609w, ( w607w, ( w585w, ( w569w, ( w567w, ( w504w, ( w502w, ( w439w, ( w437w, ( w374w, ( w372w, ( w370w, ( w368w, ( w366w, ( w303w, ( w423w, ( w421w, ( w419w, ( w417w, ( w415w, ( w413w, ( w589w, ( w384w, ( w588w, ( w319w, ( w615w, w263w)))))))))))))))))))))))))))));
	sft13a[].in = add10_result[];
	sft15a[].in = ( w615w, ( w12w[15..15], ( w12w[14..14], ( w12w[13..13], ( w12w[12..12], ( w12w[11..11], ( w12w[10..10], ( w12w[9..9], ( w12w[8..8], ( w500w, ( w498w, ( w435w, ( w433w, ( w431w, ( w429w, ( w427w, ( w364w, ( w515w[1..1], ( w482w, ( w450w[1..1], ( w450w[0..0], ( w385w[1..1], ( w385w[0..0], ( w320w[1..1], ( w320w[0..0], ( w203w[3..2]))))))))))))))))))))))))));
	sft16a[].in = ( w615w, ( (! w515w[17..17]), ( w515w[16..16], ( w515w[15..15], ( w606w, ( w604w, ( w584w, ( w565w, ( w563w, ( w599w, ( w582w, ( w557w, ( w555w, ( w553w, ( w551w, ( w549w, ( w486w, ( w484w, ( w579w, ( w480w, ( w478w, ( w590w, ( w449w, ( w265w[3..3], ( w265w[2..2], ( w615w, w317w))))))))))))))))))))))))));
	sft17a[].in = add14_result[];
	sft19a[].in = ( w615w, ( w580w, ( (! w450w[17..17]), ( w515w[14..14], ( w515w[13..13], ( w515w[12..12], ( w601w, ( w583w, ( w561w, ( w559w, ( w496w, ( w494w, ( w492w, ( w490w, ( w488w, ( w425w, ( w545w, ( w515w[0..0], ( w385w[3..3], ( w385w[2..2], ( w320w[3..3], ( w320w[2..2], ( w203w[5..5], w382w)))))))))))))))))))))));
	sft20a[].in = ( w615w, ( w615w, ( w608w, ( w450w[16..16], ( w605w, ( w603w, ( w602w, ( w600w, ( w598w, ( w597w, ( w581w, ( w596w, ( w595w, ( w594w, ( w593w, ( w547w, ( w592w, ( w543w, ( w591w, ( w514w, ( w265w[5..5], ( w265w[4..4], ( w615w, w203w[4..4])))))))))))))))))))))));
	sft21a[].in = add18_result[];
	sft23a[].in = ( w615w, ( w580w, ( w450w[15..15], ( w450w[14..14], ( w515w[11..11], ( w515w[10..10], ( w12w[7..7], ( w12w[6..6], ( w12w[5..5], ( w12w[4..4], ( w12w[3..3], ( w12w[2..2], ( w12w[1..1], ( w12w[0..0], ( w450w[3..3], ( w450w[2..2], ( w320w[5..5], ( w320w[4..4], ( w203w[7..6])))))))))))))))))));
	sft24a[].in = ( w615w, ( w615w, ( (! w385w[17..17]), ( w385w[16..16], ( w450w[13..13], ( w450w[12..12], ( w515w[9..9], ( w515w[8..8], ( w515w[7..7], ( w515w[6..6], ( w515w[5..5], ( w515w[4..4], ( w515w[3..3], ( w515w[2..2], ( w385w[5..5], ( w385w[4..4], ( w265w[7..7], ( w265w[6..6], ( w615w, w447w)))))))))))))))))));
	sft25a[].in = add22_result[];
	sft27a[].in = ( w615w, ( w580w, ( w320w[15..15], ( w450w[10..10], ( w450w[9..9], ( w450w[8..8], ( w450w[7..7], ( w450w[6..6], ( w450w[5..5], ( w450w[4..4], ( w320w[7..7], ( w320w[6..6], ( w203w[9..9], w512w)))))))))))));
	sft28a[].in = ( w615w, ( w615w, ( (! w265w[17..17]), ( w385w[12..12], ( w385w[11..11], ( w385w[10..10], ( w385w[9..9], ( w385w[8..8], ( w385w[7..7], ( w385w[6..6], ( w265w[9..9], ( w265w[8..8], ( w615w, w203w[8..8])))))))))))));
	sft29a[].in = add26_result[];
	sft31a[].in = ( w615w, ( w320w[14..14], ( w320w[13..13], ( w320w[12..12], ( w320w[11..11], ( w320w[10..10], ( w320w[9..9], ( w320w[8..8], ( w203w[11..11], w577w)))))))));
	sft32a[].in = ( w615w, ( w265w[16..16], ( w265w[15..15], ( w265w[14..14], ( w265w[13..13], ( w265w[12..12], ( w265w[11..11], ( w7w[12..12], ( w615w, w203w[10..10])))))))));
	sft33a[].in = add30_result[];
	sft35a[].in = ( w615w, ( w580w, ( w385w[15..15], ( w385w[14..14], ( w450w[11..11], ( w580w, ( (! w203w[17..17]), ( w203w[16..16], ( w203w[15..15], ( w203w[14..14], ( w203w[13..13], w265w[10..10])))))))))));
	sft36a[].in = ( w615w, ( w615w, ( (! w320w[17..17]), ( w320w[16..16], ( w385w[13..13], ( w615w, ( w580w, ( w615w, ( w615w, ( w615w, ( w615w, w203w[12..12])))))))))));
	sft37a[].in = add34_result[];
	dataa_node[] = ( dataa[16..0]);
	datab_node[] = ( datab[12..0]);
	final_result_node[] = ( w1014w[29..0]);
	result[] = ( final_result_node[29..0]);
	w1014w[] = ( sft13a[29..29].out, sft13a[28..28].out, sft13a[27..27].out, sft13a[26..26].out, sft13a[25..25].out, sft13a[24..24].out, sft13a[23..23].out, sft13a[22..22].out, sft13a[21..21].out, sft13a[20..20].out, sft13a[19..19].out, sft13a[18..18].out, sft13a[17..17].out, sft13a[16..16].out, sft13a[15..15].out, sft13a[14..14].out, sft13a[13..13].out, sft13a[12..12].out, sft13a[11..11].out, sft13a[10..10].out, sft13a[9..9].out, sft13a[8..8].out, sft13a[7..7].out, sft13a[6..6].out, sft13a[5..5].out, sft13a[4..4].out, sft13a[3..3].out, sft13a[2..2].out, sft13a[1..1].out, sft13a[0..0].out);
	w12w[] = le2a[].out;
	w203w[] = le4a[].out;
	w204w[] = ( dataa_node[], B"0");
	w205w[] = ( dataa_node[16..16], dataa_node[]);
	w214w[] = (((! w204w[]) & cs1a[0].sout) & (! cs3a[0].sout));
	w215w[] = ((((! w205w[]) & cs1a[0].sout) & cs3a[0].sout) # ((w205w[] & (! cs1a[0].sout)) & cs3a[0].sout));
	w256w = sft17a[10..10].out;
	w263w = cs1a[0].sout;
	w265w[] = le5a[].out;
	w266w[] = ( dataa_node[], B"0");
	w267w[] = ( dataa_node[16..16], dataa_node[]);
	w275w[] = (((! w266w[]) & cs1a[1].sout) & (! cs3a[1].sout));
	w276w[] = ((((! w267w[]) & cs1a[1].sout) & cs3a[1].sout) # ((w267w[] & (! cs1a[1].sout)) & cs3a[1].sout));
	w303w = sft21a[8..8].out;
	w305w = sft17a[11..11].out;
	w307w = sft17a[12..12].out;
	w309w = sft17a[13..13].out;
	w311w = sft17a[14..14].out;
	w313w = sft17a[15..15].out;
	w317w = cs1a[1].sout;
	w319w = sft17a[0..0].out;
	w320w[] = le6a[].out;
	w321w[] = ( dataa_node[], B"0");
	w322w[] = ( dataa_node[16..16], dataa_node[]);
	w330w[] = (((! w321w[]) & cs1a[2].sout) & (! cs3a[2].sout));
	w331w[] = ((((! w322w[]) & cs1a[2].sout) & cs3a[2].sout) # ((w322w[] & (! cs1a[2].sout)) & cs3a[2].sout));
	w348w = sft17a[2..2].out;
	w350w = sft17a[3..3].out;
	w352w = sft17a[4..4].out;
	w354w = sft17a[5..5].out;
	w356w = sft17a[6..6].out;
	w358w = sft17a[7..7].out;
	w360w = sft17a[8..8].out;
	w362w = sft17a[9..9].out;
	w364w = sft25a[6..6].out;
	w366w = sft21a[9..9].out;
	w368w = sft21a[10..10].out;
	w370w = sft21a[11..11].out;
	w372w = sft21a[12..12].out;
	w374w = sft21a[13..13].out;
	w376w = sft17a[16..16].out;
	w378w = sft17a[17..17].out;
	w382w = cs1a[2].sout;
	w384w = sft21a[0..0].out;
	w385w[] = le7a[].out;
	w386w[] = ( dataa_node[], B"0");
	w387w[] = ( dataa_node[16..16], dataa_node[]);
	w395w[] = (((! w386w[]) & cs1a[3].sout) & (! cs3a[3].sout));
	w396w[] = ((((! w387w[]) & cs1a[3].sout) & cs3a[3].sout) # ((w387w[] & (! cs1a[3].sout)) & cs3a[3].sout));
	w413w = sft21a[2..2].out;
	w415w = sft21a[3..3].out;
	w417w = sft21a[4..4].out;
	w419w = sft21a[5..5].out;
	w421w = sft21a[6..6].out;
	w423w = sft21a[7..7].out;
	w425w = sft33a[2..2].out;
	w427w = sft25a[7..7].out;
	w429w = sft25a[8..8].out;
	w431w = sft25a[9..9].out;
	w433w = sft25a[10..10].out;
	w435w = sft25a[11..11].out;
	w437w = sft21a[14..14].out;
	w439w = sft21a[15..15].out;
	w441w = sft17a[18..18].out;
	w443w = sft17a[19..19].out;
	w447w = cs1a[3].sout;
	w449w = sft25a[0..0].out;
	w450w[] = le8a[].out;
	w451w[] = ( dataa_node[], B"0");
	w452w[] = ( dataa_node[16..16], dataa_node[]);
	w460w[] = (((! w451w[]) & cs1a[4].sout) & (! cs3a[4].sout));
	w461w[] = ((((! w452w[]) & cs1a[4].sout) & cs3a[4].sout) # ((w452w[] & (! cs1a[4].sout)) & cs3a[4].sout));
	w478w = sft25a[2..2].out;
	w480w = sft25a[3..3].out;
	w482w = sft25a[4..4].out;
	w484w = sft25a[5..5].out;
	w486w = sft29a[4..4].out;
	w488w = sft33a[3..3].out;
	w490w = sft33a[4..4].out;
	w492w = sft33a[5..5].out;
	w494w = sft33a[6..6].out;
	w496w = sft33a[7..7].out;
	w498w = sft25a[12..12].out;
	w500w = sft25a[13..13].out;
	w502w = sft21a[16..16].out;
	w504w = sft21a[17..17].out;
	w506w = sft17a[20..20].out;
	w508w = sft17a[21..21].out;
	w512w = cs1a[4].sout;
	w514w = sft29a[0..0].out;
	w515w[] = le9a[].out;
	w516w[] = ( dataa_node[], B"0");
	w517w[] = ( dataa_node[16..16], dataa_node[]);
	w525w[] = (((! w516w[]) & cs1a[5].sout) & (! cs3a[5].sout));
	w526w[] = ((((! w517w[]) & cs1a[5].sout) & cs3a[5].sout) # ((w517w[] & (! cs1a[5].sout)) & cs3a[5].sout));
	w543w = sft33a[0..0].out;
	w545w = sft29a[3..3].out;
	w547w = sft37a[0..0].out;
	w549w = sft29a[5..5].out;
	w551w = sft29a[6..6].out;
	w553w = sft29a[7..7].out;
	w555w = sft29a[8..8].out;
	w557w = sft29a[9..9].out;
	w559w = sft33a[8..8].out;
	w561w = sft29a[11..11].out;
	w563w = sft25a[14..14].out;
	w565w = sft25a[15..15].out;
	w567w = sft21a[18..18].out;
	w569w = sft21a[19..19].out;
	w571w = sft17a[22..22].out;
	w573w = sft17a[23..23].out;
	w577w = cs1a[5].sout;
	w579w = sft29a[2..2].out;
	w580w = B"1";
	w581w = sft37a[5..5].out;
	w582w = sft29a[10..10].out;
	w583w = sft37a[8..8].out;
	w584w = sft25a[16..16].out;
	w585w = sft21a[20..20].out;
	w586w = sft17a[24..24].out;
	w588w = sft17a[1..1].out;
	w589w = sft21a[1..1].out;
	w590w = sft25a[1..1].out;
	w591w = sft29a[1..1].out;
	w592w = sft33a[1..1].out;
	w593w = sft37a[1..1].out;
	w594w = sft37a[2..2].out;
	w595w = sft37a[3..3].out;
	w596w = sft37a[4..4].out;
	w597w = sft37a[6..6].out;
	w598w = sft33a[9..9].out;
	w599w = sft37a[7..7].out;
	w600w = sft29a[12..12].out;
	w601w = sft37a[9..9].out;
	w602w = sft29a[13..13].out;
	w603w = sft37a[10..10].out;
	w604w = sft25a[17..17].out;
	w605w = sft37a[11..11].out;
	w606w = sft25a[18..18].out;
	w607w = sft21a[21..21].out;
	w608w = sft25a[19..19].out;
	w609w = sft21a[22..22].out;
	w610w = sft17a[25..25].out;
	w611w = sft21a[23..23].out;
	w612w = sft17a[26..26].out;
	w615w = B"0";
	w7w[] = ( datab_node[12..12], datab_node[]);
END;
--VALID FILE
