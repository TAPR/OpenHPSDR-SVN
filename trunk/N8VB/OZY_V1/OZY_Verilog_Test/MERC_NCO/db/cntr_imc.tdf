--lpm_counter CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" lpm_direction="UP" lpm_modulus=3 lpm_width=2 clk_en clock q
--VERSION_BEGIN 6.0 cbx_cycloneii 2006:02:07:15:19:20:SJ cbx_lpm_add_sub 2006:01:09:11:17:20:SJ cbx_lpm_compare 2006:01:09:11:15:40:SJ cbx_lpm_counter 2006:03:23:14:19:24:SJ cbx_lpm_decode 2006:01:09:11:16:44:SJ cbx_mgl 2006:05:17:10:06:16:SJ cbx_stratix 2006:05:17:09:28:32:SJ cbx_stratixii 2006:03:03:09:35:36:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_lcell_comb (cin, dataa, datab, datac, datad)
WITH ( 	LUT_MASK,	SUM_LUTC_INPUT) 
RETURNS ( combout, cout);
FUNCTION cycloneii_lcell_ff (aclr, clk, datain, ena, sclr, sdata, sload)
RETURNS ( regout);

--synthesis_resources = lut 3 reg 2 
SUBDESIGN cntr_imc
( 
	clk_en	:	input;
	clock	:	input;
	q[1..0]	:	output;
) 
VARIABLE 
	counter_comb_bita0 : cycloneii_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_comb_bita1 : cycloneii_lcell_comb
		WITH (
			LUT_MASK = "5A90",
			SUM_LUTC_INPUT = "cin"
		);
	counter_reg_bit6a[1..0] : cycloneii_lcell_ff;
	cmpr7_aeb_int	:	WIRE;
	cmpr7_aeb	:	WIRE;
	cmpr7_dataa[1..0]	:	WIRE;
	cmpr7_datab[1..0]	:	WIRE;
	aclr_actual	: WIRE;
	cnt_en	: NODE;
	compare_result	: WIRE;
	cout_actual	: WIRE;
	data[1..0]	: NODE;
	external_cin	: WIRE;
	modulus_bus[1..0]	: WIRE;
	modulus_trigger	: WIRE;
	s_val[1..0]	: WIRE;
	safe_q[1..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;

BEGIN 
	counter_comb_bita[1..0].cin = ( counter_comb_bita[0].cout, external_cin);
	counter_comb_bita[1..0].dataa = ( counter_reg_bit6a[1..0].regout);
	counter_comb_bita[1..0].datab = ( updown_dir, updown_dir);
	counter_comb_bita[1..0].datad = ( B"1", B"1");
	counter_reg_bit6a[].aclr = aclr_actual;
	counter_reg_bit6a[].clk = clock;
	counter_reg_bit6a[].datain = ( counter_comb_bita[1..0].combout);
	counter_reg_bit6a[].ena = (clk_en & (((sclr # sset) # sload) # cnt_en));
	counter_reg_bit6a[].sdata = ((! sclr) & ((sset & s_val[]) # ((! sset) & ((sload & data[]) # (((! sload) & modulus_bus[]) & (! updown_dir))))));
	counter_reg_bit6a[].sload = (((sclr # sset) # sload) # modulus_trigger);
	IF (cmpr7_dataa[] == cmpr7_datab[]) THEN
		cmpr7_aeb_int = VCC;
	ELSE
		cmpr7_aeb_int = GND;
	END IF;
	cmpr7_aeb = cmpr7_aeb_int;
	cmpr7_dataa[] = safe_q[];
	cmpr7_datab[] = modulus_bus[];
	aclr_actual = B"0";
	cnt_en = VCC;
	compare_result = cmpr7_aeb;
	cout_actual = (counter_comb_bita[1].cout # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	modulus_bus[] = B"10";
	modulus_trigger = cout_actual;
	q[] = safe_q[];
	s_val[] = B"11";
	safe_q[] = counter_reg_bit6a[].regout;
	sclr = GND;
	sload = GND;
	sset = GND;
	time_to_clear = compare_result;
	updown_dir = B"1";
END;
--VALID FILE
