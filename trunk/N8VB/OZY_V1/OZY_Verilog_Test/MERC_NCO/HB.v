// -------------------------------------------------------------
//
// Module: HB
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2006-09-20 11:10:39
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: HB
// TargetDirectory: c:\data
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// AddPipelineRegisters: On
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 4
// Filter Length      : 7
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s16,15 -> [-1 1)
// Input              : s16,15 -> [-1 1)
// Filter Internals   : Specify Precision
//   Output           : s20,30 -> [-4.882813e-004 4.882813e-004)
//   Product          : s30,30 -> [-5.000000e-001 5.000000e-001)
//   Accumulator      : s32,30 -> [-2 2)
//   Round Mode       : convergent
//   Overflow Mode    : wrap
//
// Implementation Cost
// Number of Multipliers : 5
// Number of Adders      : 4
// Number of States      : 6
// MultPerInputSample    : 2.5
// AddPerInputSample     : 2
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HB 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [19:0] filter_out; //sfix20_En30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: HB
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111101111001101; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b0010010000110001; //sfix16_En15
  parameter signed [15:0] coeffphase1_3 = 16'b0010010000110001; //sfix16_En15
  parameter signed [15:0] coeffphase1_4 = 16'b1111101111001101; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b0100000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_3 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase2_4 = 16'b0000000000000000; //sfix16_En15
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [15:0] input_register; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase0 [0:2] ; // sfix16_En15
  reg  signed [15:0] input_pipeline_phase1 [0:1] ; // sfix16_En15
  wire signed [29:0] product_phase0_1; // sfix30_En30
  wire signed [26:0] mulcsd_temp; // sfix27_En30
  wire signed [29:0] product_phase0_2; // sfix30_En30
  wire signed [29:0] mulcsd_temp_1; // sfix30_En30
  wire signed [29:0] product_phase0_3; // sfix30_En30
  wire signed [29:0] mulcsd_temp_2; // sfix30_En30
  wire signed [29:0] product_phase0_4; // sfix30_En30
  wire signed [26:0] mulcsd_temp_3; // sfix27_En30
  wire signed [29:0] product_phase1_2; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_1; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_2; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_3; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase0_4; // sfix30_En30
  reg  signed [29:0] product_pipeline_phase1_2; // sfix30_En30
  wire signed [31:0] quantized_sum; // sfix32_En30
  wire signed [31:0] sumvector1 [0:2] ; // sfix32_En30
  wire signed [31:0] add_signext; // sfix32_En30
  wire signed [31:0] add_signext_1; // sfix32_En30
  wire signed [32:0] add_temp; // sfix33_En30
  wire signed [29:0] add_signext_2; // sfix30_En30
  wire signed [29:0] add_signext_3; // sfix30_En30
  wire signed [30:0] add_temp_1; // sfix31_En30
  reg  signed [31:0] sumdelay_pipeline1 [0:2] ; // sfix32_En30
  wire signed [31:0] sumvector2 [0:1] ; // sfix32_En30
  wire signed [31:0] add_signext_4; // sfix32_En30
  wire signed [31:0] add_signext_5; // sfix32_En30
  wire signed [32:0] add_temp_2; // sfix33_En30
  reg  signed [31:0] sumdelay_pipeline2 [0:1] ; // sfix32_En30
  wire signed [31:0] sum3; // sfix32_En30
  wire signed [31:0] add_signext_6; // sfix32_En30
  wire signed [31:0] add_signext_7; // sfix32_En30
  wire signed [32:0] add_temp_3; // sfix33_En30
  wire signed [19:0] output_typeconvert; // sfix20_En30
  reg  ce_delayline1; // boolean
  reg  ce_delayline2; // boolean
  reg  ce_delayline3; // boolean
  reg  ce_delayline4; // boolean
  reg  ce_delayline5; // boolean
  reg  ce_delayline6; // boolean
  wire ce_gated; // boolean
  reg  signed [19:0] output_register; // sfix20_En30

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
        input_pipeline_phase0[2] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
          input_pipeline_phase0[2] <= input_pipeline_phase0[1];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mulcsd_temp = - (
        $signed({input_register, 10'b0000000000}) +
        $signed({input_register, 6'b000000}) -
        $signed({input_register, 4'b0000}) +
        $signed({input_register, 2'b00}) -
        input_register);
  assign product_phase0_1 = $signed({{3{mulcsd_temp[26]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[0], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[0], 10'b0000000000}) +
        $signed({input_pipeline_phase0[0], 6'b000000}) -
        $signed({input_pipeline_phase0[0], 4'b0000}) +
        input_pipeline_phase0[0];
  assign product_phase0_2 = mulcsd_temp_1;

  assign mulcsd_temp_2 = 
        $signed({input_pipeline_phase0[1], 13'b0000000000000}) +
        $signed({input_pipeline_phase0[1], 10'b0000000000}) +
        $signed({input_pipeline_phase0[1], 6'b000000}) -
        $signed({input_pipeline_phase0[1], 4'b0000}) +
        input_pipeline_phase0[1];
  assign product_phase0_3 = mulcsd_temp_2;

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase0[2], 10'b0000000000}) +
        $signed({input_pipeline_phase0[2], 6'b000000}) -
        $signed({input_pipeline_phase0[2], 4'b0000}) +
        $signed({input_pipeline_phase0[2], 2'b00}) -
        input_pipeline_phase0[2]);
  assign product_phase0_4 = $signed({{3{mulcsd_temp_3[26]}}, mulcsd_temp_3});

  assign product_phase1_2 = $signed({input_pipeline_phase1[1][15:0], 14'b00000000000000});

  always @ (posedge clk or posedge reset)
    begin: product_pipeline_process1
      if (reset == 1'b1) begin
        product_pipeline_phase0_1 <= 0;
        product_pipeline_phase0_2 <= 0;
        product_pipeline_phase1_2 <= 0;
        product_pipeline_phase0_3 <= 0;
        product_pipeline_phase0_4 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          product_pipeline_phase0_1 <= product_phase0_1;
          product_pipeline_phase0_2 <= product_phase0_2;
          product_pipeline_phase1_2 <= product_phase1_2;
          product_pipeline_phase0_3 <= product_phase0_3;
          product_pipeline_phase0_4 <= product_phase0_4;
        end
      end
    end // product_pipeline_process1

  assign quantized_sum = $signed({{2{product_pipeline_phase1_2[29]}}, product_pipeline_phase1_2});

  assign add_signext = quantized_sum;
  assign add_signext_1 = $signed({{2{product_pipeline_phase0_1[29]}}, product_pipeline_phase0_1});
  assign add_temp = add_signext + add_signext_1;
  assign sumvector1[0] = add_temp[31:0];

  assign add_signext_2 = product_pipeline_phase0_2;
  assign add_signext_3 = product_pipeline_phase0_3;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sumvector1[1] = $signed({{1{add_temp_1[30]}}, add_temp_1});

  assign sumvector1[2] = $signed({{2{product_pipeline_phase0_4[29]}}, product_pipeline_phase0_4});

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
        sumdelay_pipeline1[2] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
          sumdelay_pipeline1[2] <= sumvector1[2];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_4 = sumdelay_pipeline1[0];
  assign add_signext_5 = sumdelay_pipeline1[1];
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sumvector2[0] = add_temp_2[31:0];

  assign sumvector2[1] = sumdelay_pipeline1[2];

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process2
      if (reset == 1'b1) begin
        sumdelay_pipeline2[0] <= 0;
        sumdelay_pipeline2[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          sumdelay_pipeline2[0] <= sumvector2[0];
          sumdelay_pipeline2[1] <= sumvector2[1];
        end
      end
    end // sumdelay_pipeline_process2

  assign add_signext_6 = sumdelay_pipeline2[0];
  assign add_signext_7 = sumdelay_pipeline2[1];
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum3 = add_temp_3[31:0];

  assign output_typeconvert = sum3[19:0];

  always @ (posedge clk or posedge reset)
    begin: ce_delay
      if (reset == 1'b1) begin
        ce_delayline1 <= 1'b0;
        ce_delayline2 <= 1'b0;
        ce_delayline3 <= 1'b0;
        ce_delayline4 <= 1'b0;
        ce_delayline5 <= 1'b0;
        ce_delayline6 <= 1'b0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ce_delayline1 <= clk_enable;
          ce_delayline2 <= ce_delayline1;
          ce_delayline3 <= ce_delayline2;
          ce_delayline4 <= ce_delayline3;
          ce_delayline5 <= ce_delayline4;
          ce_delayline6 <= ce_delayline5;
        end
      end
    end // ce_delay

  assign ce_gated =  ce_delayline6 & ce_out_reg;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_gated;
  assign filter_out = output_register;
endmodule  // HB
