                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : FreeWare ANSI-C Compiler
                              3 ; Version 2.5.0 #1020 (May  8 2005)
                              4 ; This file generated Fri Aug 04 13:42:02 2006
                              5 ;--------------------------------------------------------
                              6 	.module spi
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _bitALTERA_DCLK
                             13 	.globl _bitALTERA_DATA0
                             14 	.globl _bitS_IN
                             15 	.globl _bitS_OUT
                             16 	.globl _bitS_CLK
                             17 	.globl _EIPX6
                             18 	.globl _EIPX5
                             19 	.globl _EIPX4
                             20 	.globl _PI2C
                             21 	.globl _PUSB
                             22 	.globl _EIEX6
                             23 	.globl _EIEX5
                             24 	.globl _EIEX4
                             25 	.globl _EI2C
                             26 	.globl _EIUSB
                             27 	.globl _SMOD1
                             28 	.globl _ERESI
                             29 	.globl _RESI
                             30 	.globl _INT6
                             31 	.globl _CY
                             32 	.globl _AC
                             33 	.globl _F0
                             34 	.globl _RS1
                             35 	.globl _RS0
                             36 	.globl _OV
                             37 	.globl _FL
                             38 	.globl _P
                             39 	.globl _TF2
                             40 	.globl _EXF2
                             41 	.globl _RCLK
                             42 	.globl _TCLK
                             43 	.globl _EXEN2
                             44 	.globl _TR2
                             45 	.globl _C_T2
                             46 	.globl _CP_RL2
                             47 	.globl _SM01
                             48 	.globl _SM11
                             49 	.globl _SM21
                             50 	.globl _REN1
                             51 	.globl _TB81
                             52 	.globl _RB81
                             53 	.globl _TI1
                             54 	.globl _RI1
                             55 	.globl _PS1
                             56 	.globl _PT2
                             57 	.globl _PS0
                             58 	.globl _PT1
                             59 	.globl _PX1
                             60 	.globl _PT0
                             61 	.globl _PX0
                             62 	.globl _EA
                             63 	.globl _ES1
                             64 	.globl _ET2
                             65 	.globl _ES0
                             66 	.globl _ET1
                             67 	.globl _EX1
                             68 	.globl _ET0
                             69 	.globl _EX0
                             70 	.globl _SM0
                             71 	.globl _SM1
                             72 	.globl _SM2
                             73 	.globl _REN
                             74 	.globl _TB8
                             75 	.globl _RB8
                             76 	.globl _TI
                             77 	.globl _RI
                             78 	.globl _TF1
                             79 	.globl _TR1
                             80 	.globl _TF0
                             81 	.globl _TR0
                             82 	.globl _IE1
                             83 	.globl _IT1
                             84 	.globl _IE0
                             85 	.globl _IT0
                             86 	.globl _SEL
                             87 	.globl _EIP
                             88 	.globl _B
                             89 	.globl _EIE
                             90 	.globl _ACC
                             91 	.globl _EICON
                             92 	.globl _PSW
                             93 	.globl _TH2
                             94 	.globl _TL2
                             95 	.globl _RCAP2H
                             96 	.globl _RCAP2L
                             97 	.globl _T2CON
                             98 	.globl _SBUF1
                             99 	.globl _SCON1
                            100 	.globl _GPIFSGLDATLNOX
                            101 	.globl _GPIFSGLDATLX
                            102 	.globl _GPIFSGLDATH
                            103 	.globl _GPIFTRIG
                            104 	.globl _EP01STAT
                            105 	.globl _IP
                            106 	.globl _OEE
                            107 	.globl _OED
                            108 	.globl _OEC
                            109 	.globl _OEB
                            110 	.globl _OEA
                            111 	.globl _IOE
                            112 	.globl _IOD
                            113 	.globl _AUTOPTRSETUP
                            114 	.globl _EP68FIFOFLGS
                            115 	.globl _EP24FIFOFLGS
                            116 	.globl _EP2468STAT
                            117 	.globl _IE
                            118 	.globl _INT4CLR
                            119 	.globl _INT2CLR
                            120 	.globl _IOC
                            121 	.globl _AUTODAT2
                            122 	.globl _AUTOPTRL2
                            123 	.globl _AUTOPTRH2
                            124 	.globl _AUTODAT1
                            125 	.globl _APTR1L
                            126 	.globl _APTR1H
                            127 	.globl _SBUF0
                            128 	.globl _SCON0
                            129 	.globl _MPAGE
                            130 	.globl _EXIF
                            131 	.globl _IOB
                            132 	.globl _CKCON
                            133 	.globl _TH1
                            134 	.globl _TH0
                            135 	.globl _TL1
                            136 	.globl _TL0
                            137 	.globl _TMOD
                            138 	.globl _TCON
                            139 	.globl _PCON
                            140 	.globl _DPS
                            141 	.globl _DPH1
                            142 	.globl _DPL1
                            143 	.globl _DPH
                            144 	.globl _DPL
                            145 	.globl _SP
                            146 	.globl _IOA
                            147 	.globl _EP8FIFOBUF
                            148 	.globl _EP6FIFOBUF
                            149 	.globl _EP4FIFOBUF
                            150 	.globl _EP2FIFOBUF
                            151 	.globl _EP1INBUF
                            152 	.globl _EP1OUTBUF
                            153 	.globl _EP0BUF
                            154 	.globl _CT4
                            155 	.globl _CT3
                            156 	.globl _CT2
                            157 	.globl _CT1
                            158 	.globl _USBTEST
                            159 	.globl _TESTCFG
                            160 	.globl _DBUG
                            161 	.globl _UDMACRCQUAL
                            162 	.globl _UDMACRCL
                            163 	.globl _UDMACRCH
                            164 	.globl _GPIFHOLDAMOUNT
                            165 	.globl _FLOWSTBHPERIOD
                            166 	.globl _FLOWSTBEDGE
                            167 	.globl _FLOWSTB
                            168 	.globl _FLOWHOLDOFF
                            169 	.globl _FLOWEQ1CTL
                            170 	.globl _FLOWEQ0CTL
                            171 	.globl _FLOWLOGIC
                            172 	.globl _FLOWSTATE
                            173 	.globl _GPIFABORT
                            174 	.globl _GPIFREADYSTAT
                            175 	.globl _GPIFREADYCFG
                            176 	.globl _XGPIFSGLDATLNOX
                            177 	.globl _XGPIFSGLDATLX
                            178 	.globl _XGPIFSGLDATH
                            179 	.globl _EP8GPIFTRIG
                            180 	.globl _EP8GPIFPFSTOP
                            181 	.globl _EP8GPIFFLGSEL
                            182 	.globl _EP6GPIFTRIG
                            183 	.globl _EP6GPIFPFSTOP
                            184 	.globl _EP6GPIFFLGSEL
                            185 	.globl _EP4GPIFTRIG
                            186 	.globl _EP4GPIFPFSTOP
                            187 	.globl _EP4GPIFFLGSEL
                            188 	.globl _EP2GPIFTRIG
                            189 	.globl _EP2GPIFPFSTOP
                            190 	.globl _EP2GPIFFLGSEL
                            191 	.globl _GPIFTCB0
                            192 	.globl _GPIFTCB1
                            193 	.globl _GPIFTCB2
                            194 	.globl _GPIFTCB3
                            195 	.globl _GPIFADRL
                            196 	.globl _GPIFADRH
                            197 	.globl _GPIFCTLCFG
                            198 	.globl _GPIFIDLECTL
                            199 	.globl _GPIFIDLECS
                            200 	.globl _GPIFWFSELECT
                            201 	.globl _SETUPDAT
                            202 	.globl _SUDPTRCTL
                            203 	.globl _SUDPTRL
                            204 	.globl _SUDPTRH
                            205 	.globl _EP8FIFOBCL
                            206 	.globl _EP8FIFOBCH
                            207 	.globl _EP6FIFOBCL
                            208 	.globl _EP6FIFOBCH
                            209 	.globl _EP4FIFOBCL
                            210 	.globl _EP4FIFOBCH
                            211 	.globl _EP2FIFOBCL
                            212 	.globl _EP2FIFOBCH
                            213 	.globl _EP8FIFOFLGS
                            214 	.globl _EP6FIFOFLGS
                            215 	.globl _EP4FIFOFLGS
                            216 	.globl _EP2FIFOFLGS
                            217 	.globl _EP8CS
                            218 	.globl _EP6CS
                            219 	.globl _EP4CS
                            220 	.globl _EP2CS
                            221 	.globl _EP1INCS
                            222 	.globl _EP1OUTCS
                            223 	.globl _EP0CS
                            224 	.globl _EP8BCL
                            225 	.globl _EP8BCH
                            226 	.globl _EP6BCL
                            227 	.globl _EP6BCH
                            228 	.globl _EP4BCL
                            229 	.globl _EP4BCH
                            230 	.globl _EP2BCL
                            231 	.globl _EP2BCH
                            232 	.globl _EP1INBC
                            233 	.globl _EP1OUTBC
                            234 	.globl _EP0BCL
                            235 	.globl _EP0BCH
                            236 	.globl _FNADDR
                            237 	.globl _MICROFRAME
                            238 	.globl _USBFRAMEL
                            239 	.globl _USBFRAMEH
                            240 	.globl _TOGCTL
                            241 	.globl _WAKEUPCS
                            242 	.globl _SUSPEND
                            243 	.globl _USBCS
                            244 	.globl _XAUTODAT2
                            245 	.globl _XAUTODAT1
                            246 	.globl _I2CTL
                            247 	.globl _I2DAT
                            248 	.globl _I2CS
                            249 	.globl _PORTECFG
                            250 	.globl _PORTCCFG
                            251 	.globl _PORTACFG
                            252 	.globl _INTSETUP
                            253 	.globl _INT4IVEC
                            254 	.globl _INT2IVEC
                            255 	.globl _CLRERRCNT
                            256 	.globl _ERRCNTLIM
                            257 	.globl _USBERRIRQ
                            258 	.globl _USBERRIE
                            259 	.globl _GPIFIRQ
                            260 	.globl _GPIFIE
                            261 	.globl _EPIRQ
                            262 	.globl _EPIE
                            263 	.globl _USBIRQ
                            264 	.globl _USBIE
                            265 	.globl _NAKIRQ
                            266 	.globl _NAKIE
                            267 	.globl _IBNIRQ
                            268 	.globl _IBNIE
                            269 	.globl _EP8FIFOIRQ
                            270 	.globl _EP8FIFOIE
                            271 	.globl _EP6FIFOIRQ
                            272 	.globl _EP6FIFOIE
                            273 	.globl _EP4FIFOIRQ
                            274 	.globl _EP4FIFOIE
                            275 	.globl _EP2FIFOIRQ
                            276 	.globl _EP2FIFOIE
                            277 	.globl _OUTPKTEND
                            278 	.globl _INPKTEND
                            279 	.globl _EP8ISOINPKTS
                            280 	.globl _EP6ISOINPKTS
                            281 	.globl _EP4ISOINPKTS
                            282 	.globl _EP2ISOINPKTS
                            283 	.globl _EP8FIFOPFL
                            284 	.globl _EP8FIFOPFH
                            285 	.globl _EP6FIFOPFL
                            286 	.globl _EP6FIFOPFH
                            287 	.globl _EP4FIFOPFL
                            288 	.globl _EP4FIFOPFH
                            289 	.globl _EP2FIFOPFL
                            290 	.globl _EP2FIFOPFH
                            291 	.globl _EP8AUTOINLENL
                            292 	.globl _EP8AUTOINLENH
                            293 	.globl _EP6AUTOINLENL
                            294 	.globl _EP6AUTOINLENH
                            295 	.globl _EP4AUTOINLENL
                            296 	.globl _EP4AUTOINLENH
                            297 	.globl _EP2AUTOINLENL
                            298 	.globl _EP2AUTOINLENH
                            299 	.globl _EP8FIFOCFG
                            300 	.globl _EP6FIFOCFG
                            301 	.globl _EP4FIFOCFG
                            302 	.globl _EP2FIFOCFG
                            303 	.globl _EP8CFG
                            304 	.globl _EP6CFG
                            305 	.globl _EP4CFG
                            306 	.globl _EP2CFG
                            307 	.globl _EP1INCFG
                            308 	.globl _EP1OUTCFG
                            309 	.globl _REVCTL
                            310 	.globl _REVID
                            311 	.globl _FIFOPINPOLAR
                            312 	.globl _UART230
                            313 	.globl _BPADDRL
                            314 	.globl _BPADDRH
                            315 	.globl _BREAKPT
                            316 	.globl _FIFORESET
                            317 	.globl _PINFLAGSCD
                            318 	.globl _PINFLAGSAB
                            319 	.globl _IFCONFIG
                            320 	.globl _CPUCS
                            321 	.globl _RES_WAVEDATA_END
                            322 	.globl _GPIF_WAVE_DATA
                            323 	.globl _read_bytes_msb_PARM_2
                            324 	.globl _write_bytes_msb_PARM_2
                            325 	.globl _spi_write_PARM_6
                            326 	.globl _spi_write_PARM_5
                            327 	.globl _spi_write_PARM_4
                            328 	.globl _spi_write_PARM_3
                            329 	.globl _spi_write_PARM_2
                            330 	.globl _spi_read_PARM_6
                            331 	.globl _spi_read_PARM_5
                            332 	.globl _spi_read_PARM_4
                            333 	.globl _spi_read_PARM_3
                            334 	.globl _spi_read_PARM_2
                            335 	.globl _init_spi
                            336 	.globl _spi_read
                            337 	.globl _spi_write
                            338 ;--------------------------------------------------------
                            339 ; special function registers
                            340 ;--------------------------------------------------------
                            341 	.area RSEG    (DATA)
                    0080    342 _IOA	=	0x0080
                    0081    343 _SP	=	0x0081
                    0082    344 _DPL	=	0x0082
                    0083    345 _DPH	=	0x0083
                    0084    346 _DPL1	=	0x0084
                    0085    347 _DPH1	=	0x0085
                    0086    348 _DPS	=	0x0086
                    0087    349 _PCON	=	0x0087
                    0088    350 _TCON	=	0x0088
                    0089    351 _TMOD	=	0x0089
                    008A    352 _TL0	=	0x008a
                    008B    353 _TL1	=	0x008b
                    008C    354 _TH0	=	0x008c
                    008D    355 _TH1	=	0x008d
                    008E    356 _CKCON	=	0x008e
                    0090    357 _IOB	=	0x0090
                    0091    358 _EXIF	=	0x0091
                    0092    359 _MPAGE	=	0x0092
                    0098    360 _SCON0	=	0x0098
                    0099    361 _SBUF0	=	0x0099
                    009A    362 _APTR1H	=	0x009a
                    009B    363 _APTR1L	=	0x009b
                    009C    364 _AUTODAT1	=	0x009c
                    009D    365 _AUTOPTRH2	=	0x009d
                    009E    366 _AUTOPTRL2	=	0x009e
                    009F    367 _AUTODAT2	=	0x009f
                    00A0    368 _IOC	=	0x00a0
                    00A1    369 _INT2CLR	=	0x00a1
                    00A2    370 _INT4CLR	=	0x00a2
                    00A8    371 _IE	=	0x00a8
                    00AA    372 _EP2468STAT	=	0x00aa
                    00AB    373 _EP24FIFOFLGS	=	0x00ab
                    00AC    374 _EP68FIFOFLGS	=	0x00ac
                    00AF    375 _AUTOPTRSETUP	=	0x00af
                    00B0    376 _IOD	=	0x00b0
                    00B1    377 _IOE	=	0x00b1
                    00B2    378 _OEA	=	0x00b2
                    00B3    379 _OEB	=	0x00b3
                    00B4    380 _OEC	=	0x00b4
                    00B5    381 _OED	=	0x00b5
                    00B6    382 _OEE	=	0x00b6
                    00B8    383 _IP	=	0x00b8
                    00BA    384 _EP01STAT	=	0x00ba
                    00BB    385 _GPIFTRIG	=	0x00bb
                    00BD    386 _GPIFSGLDATH	=	0x00bd
                    00BE    387 _GPIFSGLDATLX	=	0x00be
                    00BF    388 _GPIFSGLDATLNOX	=	0x00bf
                    00C0    389 _SCON1	=	0x00c0
                    00C1    390 _SBUF1	=	0x00c1
                    00C8    391 _T2CON	=	0x00c8
                    00CA    392 _RCAP2L	=	0x00ca
                    00CB    393 _RCAP2H	=	0x00cb
                    00CC    394 _TL2	=	0x00cc
                    00CD    395 _TH2	=	0x00cd
                    00D0    396 _PSW	=	0x00d0
                    00D8    397 _EICON	=	0x00d8
                    00E0    398 _ACC	=	0x00e0
                    00E8    399 _EIE	=	0x00e8
                    00F0    400 _B	=	0x00f0
                    00F8    401 _EIP	=	0x00f8
                            402 ;--------------------------------------------------------
                            403 ; special function bits 
                            404 ;--------------------------------------------------------
                            405 	.area RSEG    (DATA)
                    0086    406 _SEL	=	0x0086
                    0088    407 _IT0	=	0x0088
                    0089    408 _IE0	=	0x0089
                    008A    409 _IT1	=	0x008a
                    008B    410 _IE1	=	0x008b
                    008C    411 _TR0	=	0x008c
                    008D    412 _TF0	=	0x008d
                    008E    413 _TR1	=	0x008e
                    008F    414 _TF1	=	0x008f
                    0098    415 _RI	=	0x0098
                    0099    416 _TI	=	0x0099
                    009A    417 _RB8	=	0x009a
                    009B    418 _TB8	=	0x009b
                    009C    419 _REN	=	0x009c
                    009D    420 _SM2	=	0x009d
                    009E    421 _SM1	=	0x009e
                    009F    422 _SM0	=	0x009f
                    00A8    423 _EX0	=	0x00a8
                    00A9    424 _ET0	=	0x00a9
                    00AA    425 _EX1	=	0x00aa
                    00AB    426 _ET1	=	0x00ab
                    00AC    427 _ES0	=	0x00ac
                    00AD    428 _ET2	=	0x00ad
                    00AE    429 _ES1	=	0x00ae
                    00AF    430 _EA	=	0x00af
                    00B8    431 _PX0	=	0x00b8
                    00B9    432 _PT0	=	0x00b9
                    00BA    433 _PX1	=	0x00ba
                    00BB    434 _PT1	=	0x00bb
                    00BC    435 _PS0	=	0x00bc
                    00BD    436 _PT2	=	0x00bd
                    00BE    437 _PS1	=	0x00be
                    00C0    438 _RI1	=	0x00c0
                    00C1    439 _TI1	=	0x00c1
                    00C2    440 _RB81	=	0x00c2
                    00C3    441 _TB81	=	0x00c3
                    00C4    442 _REN1	=	0x00c4
                    00C5    443 _SM21	=	0x00c5
                    00C6    444 _SM11	=	0x00c6
                    00C7    445 _SM01	=	0x00c7
                    00C8    446 _CP_RL2	=	0x00c8
                    00C9    447 _C_T2	=	0x00c9
                    00CA    448 _TR2	=	0x00ca
                    00CB    449 _EXEN2	=	0x00cb
                    00CC    450 _TCLK	=	0x00cc
                    00CD    451 _RCLK	=	0x00cd
                    00CE    452 _EXF2	=	0x00ce
                    00CF    453 _TF2	=	0x00cf
                    00D0    454 _P	=	0x00d0
                    00D1    455 _FL	=	0x00d1
                    00D2    456 _OV	=	0x00d2
                    00D3    457 _RS0	=	0x00d3
                    00D4    458 _RS1	=	0x00d4
                    00D5    459 _F0	=	0x00d5
                    00D6    460 _AC	=	0x00d6
                    00D7    461 _CY	=	0x00d7
                    00DB    462 _INT6	=	0x00db
                    00DC    463 _RESI	=	0x00dc
                    00DD    464 _ERESI	=	0x00dd
                    00DF    465 _SMOD1	=	0x00df
                    00E8    466 _EIUSB	=	0x00e8
                    00E9    467 _EI2C	=	0x00e9
                    00EA    468 _EIEX4	=	0x00ea
                    00EB    469 _EIEX5	=	0x00eb
                    00EC    470 _EIEX6	=	0x00ec
                    00F8    471 _PUSB	=	0x00f8
                    00F9    472 _PI2C	=	0x00f9
                    00FA    473 _EIPX4	=	0x00fa
                    00FB    474 _EIPX5	=	0x00fb
                    00FC    475 _EIPX6	=	0x00fc
                    0080    476 _bitS_CLK	=	0x0080
                    0081    477 _bitS_OUT	=	0x0081
                    0083    478 _bitS_IN	=	0x0083
                    00A0    479 _bitALTERA_DATA0	=	0x00a0
                    00A2    480 _bitALTERA_DCLK	=	0x00a2
                            481 ;--------------------------------------------------------
                            482 ; overlayable register banks 
                            483 ;--------------------------------------------------------
                            484 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     485 	.ds 8
                            486 ;--------------------------------------------------------
                            487 ; internal ram data
                            488 ;--------------------------------------------------------
                            489 	.area DSEG    (DATA)
   0000                     490 _spi_read_PARM_2::
   0000                     491 	.ds 1
   0001                     492 _spi_read_PARM_3::
   0001                     493 	.ds 1
   0002                     494 _spi_read_PARM_4::
   0002                     495 	.ds 1
   0003                     496 _spi_read_PARM_5::
   0003                     497 	.ds 2
   0005                     498 _spi_read_PARM_6::
   0005                     499 	.ds 1
   0006                     500 _spi_write_PARM_2::
   0006                     501 	.ds 1
   0007                     502 _spi_write_PARM_3::
   0007                     503 	.ds 1
   0008                     504 _spi_write_PARM_4::
   0008                     505 	.ds 1
   0009                     506 _spi_write_PARM_5::
   0009                     507 	.ds 2
   000B                     508 _spi_write_PARM_6::
   000B                     509 	.ds 1
   000C                     510 _write_bytes_msb_PARM_2::
   000C                     511 	.ds 1
   000D                     512 _read_bytes_msb_PARM_2::
   000D                     513 	.ds 1
                            514 ;--------------------------------------------------------
                            515 ; overlayable items in internal ram 
                            516 ;--------------------------------------------------------
                            517 	.area	OSEG    (OVR,DATA)
                            518 	.area	OSEG    (OVR,DATA)
                            519 	.area	OSEG    (OVR,DATA)
                            520 ;--------------------------------------------------------
                            521 ; indirectly addressable internal ram data
                            522 ;--------------------------------------------------------
                            523 	.area ISEG    (DATA)
                            524 ;--------------------------------------------------------
                            525 ; bit data
                            526 ;--------------------------------------------------------
                            527 	.area BSEG    (BIT)
                            528 ;--------------------------------------------------------
                            529 ; paged external ram data
                            530 ;--------------------------------------------------------
                            531 	.area PSEG    (PAG,XDATA)
                            532 ;--------------------------------------------------------
                            533 ; external ram data
                            534 ;--------------------------------------------------------
                            535 	.area XSEG    (XDATA)
                    E400    536 _GPIF_WAVE_DATA	=	0xe400
                    E480    537 _RES_WAVEDATA_END	=	0xe480
                    E600    538 _CPUCS	=	0xe600
                    E601    539 _IFCONFIG	=	0xe601
                    E602    540 _PINFLAGSAB	=	0xe602
                    E603    541 _PINFLAGSCD	=	0xe603
                    E604    542 _FIFORESET	=	0xe604
                    E605    543 _BREAKPT	=	0xe605
                    E606    544 _BPADDRH	=	0xe606
                    E607    545 _BPADDRL	=	0xe607
                    E608    546 _UART230	=	0xe608
                    E609    547 _FIFOPINPOLAR	=	0xe609
                    E60A    548 _REVID	=	0xe60a
                    E60B    549 _REVCTL	=	0xe60b
                    E610    550 _EP1OUTCFG	=	0xe610
                    E611    551 _EP1INCFG	=	0xe611
                    E612    552 _EP2CFG	=	0xe612
                    E613    553 _EP4CFG	=	0xe613
                    E614    554 _EP6CFG	=	0xe614
                    E615    555 _EP8CFG	=	0xe615
                    E618    556 _EP2FIFOCFG	=	0xe618
                    E619    557 _EP4FIFOCFG	=	0xe619
                    E61A    558 _EP6FIFOCFG	=	0xe61a
                    E61B    559 _EP8FIFOCFG	=	0xe61b
                    E620    560 _EP2AUTOINLENH	=	0xe620
                    E621    561 _EP2AUTOINLENL	=	0xe621
                    E622    562 _EP4AUTOINLENH	=	0xe622
                    E623    563 _EP4AUTOINLENL	=	0xe623
                    E624    564 _EP6AUTOINLENH	=	0xe624
                    E625    565 _EP6AUTOINLENL	=	0xe625
                    E626    566 _EP8AUTOINLENH	=	0xe626
                    E627    567 _EP8AUTOINLENL	=	0xe627
                    E630    568 _EP2FIFOPFH	=	0xe630
                    E631    569 _EP2FIFOPFL	=	0xe631
                    E632    570 _EP4FIFOPFH	=	0xe632
                    E633    571 _EP4FIFOPFL	=	0xe633
                    E634    572 _EP6FIFOPFH	=	0xe634
                    E635    573 _EP6FIFOPFL	=	0xe635
                    E636    574 _EP8FIFOPFH	=	0xe636
                    E637    575 _EP8FIFOPFL	=	0xe637
                    E640    576 _EP2ISOINPKTS	=	0xe640
                    E641    577 _EP4ISOINPKTS	=	0xe641
                    E642    578 _EP6ISOINPKTS	=	0xe642
                    E643    579 _EP8ISOINPKTS	=	0xe643
                    E648    580 _INPKTEND	=	0xe648
                    E649    581 _OUTPKTEND	=	0xe649
                    E650    582 _EP2FIFOIE	=	0xe650
                    E651    583 _EP2FIFOIRQ	=	0xe651
                    E652    584 _EP4FIFOIE	=	0xe652
                    E653    585 _EP4FIFOIRQ	=	0xe653
                    E654    586 _EP6FIFOIE	=	0xe654
                    E655    587 _EP6FIFOIRQ	=	0xe655
                    E656    588 _EP8FIFOIE	=	0xe656
                    E657    589 _EP8FIFOIRQ	=	0xe657
                    E658    590 _IBNIE	=	0xe658
                    E659    591 _IBNIRQ	=	0xe659
                    E65A    592 _NAKIE	=	0xe65a
                    E65B    593 _NAKIRQ	=	0xe65b
                    E65C    594 _USBIE	=	0xe65c
                    E65D    595 _USBIRQ	=	0xe65d
                    E65E    596 _EPIE	=	0xe65e
                    E65F    597 _EPIRQ	=	0xe65f
                    E660    598 _GPIFIE	=	0xe660
                    E661    599 _GPIFIRQ	=	0xe661
                    E662    600 _USBERRIE	=	0xe662
                    E663    601 _USBERRIRQ	=	0xe663
                    E664    602 _ERRCNTLIM	=	0xe664
                    E665    603 _CLRERRCNT	=	0xe665
                    E666    604 _INT2IVEC	=	0xe666
                    E667    605 _INT4IVEC	=	0xe667
                    E668    606 _INTSETUP	=	0xe668
                    E670    607 _PORTACFG	=	0xe670
                    E671    608 _PORTCCFG	=	0xe671
                    E672    609 _PORTECFG	=	0xe672
                    E678    610 _I2CS	=	0xe678
                    E679    611 _I2DAT	=	0xe679
                    E67A    612 _I2CTL	=	0xe67a
                    E67B    613 _XAUTODAT1	=	0xe67b
                    E67C    614 _XAUTODAT2	=	0xe67c
                    E680    615 _USBCS	=	0xe680
                    E681    616 _SUSPEND	=	0xe681
                    E682    617 _WAKEUPCS	=	0xe682
                    E683    618 _TOGCTL	=	0xe683
                    E684    619 _USBFRAMEH	=	0xe684
                    E685    620 _USBFRAMEL	=	0xe685
                    E686    621 _MICROFRAME	=	0xe686
                    E687    622 _FNADDR	=	0xe687
                    E68A    623 _EP0BCH	=	0xe68a
                    E68B    624 _EP0BCL	=	0xe68b
                    E68D    625 _EP1OUTBC	=	0xe68d
                    E68F    626 _EP1INBC	=	0xe68f
                    E690    627 _EP2BCH	=	0xe690
                    E691    628 _EP2BCL	=	0xe691
                    E694    629 _EP4BCH	=	0xe694
                    E695    630 _EP4BCL	=	0xe695
                    E698    631 _EP6BCH	=	0xe698
                    E699    632 _EP6BCL	=	0xe699
                    E69C    633 _EP8BCH	=	0xe69c
                    E69D    634 _EP8BCL	=	0xe69d
                    E6A0    635 _EP0CS	=	0xe6a0
                    E6A1    636 _EP1OUTCS	=	0xe6a1
                    E6A2    637 _EP1INCS	=	0xe6a2
                    E6A3    638 _EP2CS	=	0xe6a3
                    E6A4    639 _EP4CS	=	0xe6a4
                    E6A5    640 _EP6CS	=	0xe6a5
                    E6A6    641 _EP8CS	=	0xe6a6
                    E6A7    642 _EP2FIFOFLGS	=	0xe6a7
                    E6A8    643 _EP4FIFOFLGS	=	0xe6a8
                    E6A9    644 _EP6FIFOFLGS	=	0xe6a9
                    E6AA    645 _EP8FIFOFLGS	=	0xe6aa
                    E6AB    646 _EP2FIFOBCH	=	0xe6ab
                    E6AC    647 _EP2FIFOBCL	=	0xe6ac
                    E6AD    648 _EP4FIFOBCH	=	0xe6ad
                    E6AE    649 _EP4FIFOBCL	=	0xe6ae
                    E6AF    650 _EP6FIFOBCH	=	0xe6af
                    E6B0    651 _EP6FIFOBCL	=	0xe6b0
                    E6B1    652 _EP8FIFOBCH	=	0xe6b1
                    E6B2    653 _EP8FIFOBCL	=	0xe6b2
                    E6B3    654 _SUDPTRH	=	0xe6b3
                    E6B4    655 _SUDPTRL	=	0xe6b4
                    E6B5    656 _SUDPTRCTL	=	0xe6b5
                    E6B8    657 _SETUPDAT	=	0xe6b8
                    E6C0    658 _GPIFWFSELECT	=	0xe6c0
                    E6C1    659 _GPIFIDLECS	=	0xe6c1
                    E6C2    660 _GPIFIDLECTL	=	0xe6c2
                    E6C3    661 _GPIFCTLCFG	=	0xe6c3
                    E6C4    662 _GPIFADRH	=	0xe6c4
                    E6C5    663 _GPIFADRL	=	0xe6c5
                    E6CE    664 _GPIFTCB3	=	0xe6ce
                    E6CF    665 _GPIFTCB2	=	0xe6cf
                    E6D0    666 _GPIFTCB1	=	0xe6d0
                    E6D1    667 _GPIFTCB0	=	0xe6d1
                    E6D2    668 _EP2GPIFFLGSEL	=	0xe6d2
                    E6D3    669 _EP2GPIFPFSTOP	=	0xe6d3
                    E6D4    670 _EP2GPIFTRIG	=	0xe6d4
                    E6DA    671 _EP4GPIFFLGSEL	=	0xe6da
                    E6DB    672 _EP4GPIFPFSTOP	=	0xe6db
                    E6DC    673 _EP4GPIFTRIG	=	0xe6dc
                    E6E2    674 _EP6GPIFFLGSEL	=	0xe6e2
                    E6E3    675 _EP6GPIFPFSTOP	=	0xe6e3
                    E6E4    676 _EP6GPIFTRIG	=	0xe6e4
                    E6EA    677 _EP8GPIFFLGSEL	=	0xe6ea
                    E6EB    678 _EP8GPIFPFSTOP	=	0xe6eb
                    E6EC    679 _EP8GPIFTRIG	=	0xe6ec
                    E6F0    680 _XGPIFSGLDATH	=	0xe6f0
                    E6F1    681 _XGPIFSGLDATLX	=	0xe6f1
                    E6F2    682 _XGPIFSGLDATLNOX	=	0xe6f2
                    E6F3    683 _GPIFREADYCFG	=	0xe6f3
                    E6F4    684 _GPIFREADYSTAT	=	0xe6f4
                    E6F5    685 _GPIFABORT	=	0xe6f5
                    E6C6    686 _FLOWSTATE	=	0xe6c6
                    E6C7    687 _FLOWLOGIC	=	0xe6c7
                    E6C8    688 _FLOWEQ0CTL	=	0xe6c8
                    E6C9    689 _FLOWEQ1CTL	=	0xe6c9
                    E6CA    690 _FLOWHOLDOFF	=	0xe6ca
                    E6CB    691 _FLOWSTB	=	0xe6cb
                    E6CC    692 _FLOWSTBEDGE	=	0xe6cc
                    E6CD    693 _FLOWSTBHPERIOD	=	0xe6cd
                    E60C    694 _GPIFHOLDAMOUNT	=	0xe60c
                    E67D    695 _UDMACRCH	=	0xe67d
                    E67E    696 _UDMACRCL	=	0xe67e
                    E67F    697 _UDMACRCQUAL	=	0xe67f
                    E6F8    698 _DBUG	=	0xe6f8
                    E6F9    699 _TESTCFG	=	0xe6f9
                    E6FA    700 _USBTEST	=	0xe6fa
                    E6FB    701 _CT1	=	0xe6fb
                    E6FC    702 _CT2	=	0xe6fc
                    E6FD    703 _CT3	=	0xe6fd
                    E6FE    704 _CT4	=	0xe6fe
                    E740    705 _EP0BUF	=	0xe740
                    E780    706 _EP1OUTBUF	=	0xe780
                    E7C0    707 _EP1INBUF	=	0xe7c0
                    F000    708 _EP2FIFOBUF	=	0xf000
                    F400    709 _EP4FIFOBUF	=	0xf400
                    F800    710 _EP6FIFOBUF	=	0xf800
                    FC00    711 _EP8FIFOBUF	=	0xfc00
                            712 ;--------------------------------------------------------
                            713 ; external initialized ram data
                            714 ;--------------------------------------------------------
                            715 	.area CSEG    (CODE)
                            716 	.area GSINIT0 (CODE)
                            717 	.area GSINIT1 (CODE)
                            718 	.area GSINIT2 (CODE)
                            719 	.area GSINIT3 (CODE)
                            720 	.area GSINIT4 (CODE)
                            721 	.area GSINIT5 (CODE)
                            722 ;--------------------------------------------------------
                            723 ; global & static initialisations
                            724 ;--------------------------------------------------------
                            725 	.area CSEG    (CODE)
                            726 	.area GSINIT  (CODE)
                            727 	.area GSFINAL (CODE)
                            728 	.area GSINIT  (CODE)
                            729 ;--------------------------------------------------------
                            730 ; Home
                            731 ;--------------------------------------------------------
                            732 	.area HOME    (CODE)
                            733 	.area CSEG    (CODE)
                            734 ;--------------------------------------------------------
                            735 ; code
                            736 ;--------------------------------------------------------
                            737 	.area CSEG    (CODE)
                            738 ;------------------------------------------------------------
                            739 ;Allocation info for local variables in function 'setup_enables'
                            740 ;------------------------------------------------------------
                            741 ;enables                   Allocated to registers 
                            742 ;------------------------------------------------------------
                            743 ;Initial/src/lib/spi.c:30: setup_enables (unsigned char enables)
                            744 ;	-----------------------------------------
                            745 ;	 function setup_enables
                            746 ;	-----------------------------------------
   0000                     747 _setup_enables:
                    0002    748 	ar2 = 0x02
                    0003    749 	ar3 = 0x03
                    0004    750 	ar4 = 0x04
                    0005    751 	ar5 = 0x05
                    0006    752 	ar6 = 0x06
                    0007    753 	ar7 = 0x07
                    0000    754 	ar0 = 0x00
                    0001    755 	ar1 = 0x01
                            756 ;Initial/src/lib/spi.c:46: }
   0000                     757 00101$:
   0000 22                  758 	ret
                            759 ;------------------------------------------------------------
                            760 ;Allocation info for local variables in function 'init_spi'
                            761 ;------------------------------------------------------------
                            762 ;------------------------------------------------------------
                            763 ;Initial/src/lib/spi.c:51: init_spi (void)
                            764 ;	-----------------------------------------
                            765 ;	 function init_spi
                            766 ;	-----------------------------------------
   0001                     767 _init_spi:
                            768 ;Initial/src/lib/spi.c:53: disable_all ();		/* disable all devs	  */
                            769 ;     genCall
   0001 75 82 00            770 	mov	dpl,#0x00
   0004 12s00r00            771 	lcall	_setup_enables
                            772 ;Initial/src/lib/spi.c:54: bitS_OUT = 0;			/* idle state has CLK = 0 */
                            773 ;     genAssign
   0007 C2 81               774 	clr	_bitS_OUT
   0009                     775 00101$:
   0009 22                  776 	ret
                            777 ;------------------------------------------------------------
                            778 ;Allocation info for local variables in function 'count_bits8'
                            779 ;------------------------------------------------------------
                            780 ;v                         Allocated to registers r2 
                            781 ;count                     Allocated to registers r3 
                            782 ;------------------------------------------------------------
                            783 ;Initial/src/lib/spi.c:85: count_bits8 (unsigned char v)
                            784 ;	-----------------------------------------
                            785 ;	 function count_bits8
                            786 ;	-----------------------------------------
   000A                     787 _count_bits8:
                            788 ;     genReceive
   000A AA 82               789 	mov	r2,dpl
                            790 ;Initial/src/lib/spi.c:87: unsigned char count = 0;
                            791 ;     genAssign
   000C 7B 00               792 	mov	r3,#0x00
                            793 ;Initial/src/lib/spi.c:88: if (v & (1 << 0)) count++;
                            794 ;     genAnd
   000E EA                  795 	mov	a,r2
                            796 ;     genIfxJump
                            797 ;	Peephole 111	removed ljmp by inverse jump logic
   000F 30 E0 02            798 	jnb	acc.0,00102$
   0012                     799 00127$:
                            800 ;     genAssign
   0012 7B 01               801 	mov	r3,#0x01
   0014                     802 00102$:
                            803 ;Initial/src/lib/spi.c:89: if (v & (1 << 1)) count++;
                            804 ;     genAnd
   0014 EA                  805 	mov	a,r2
                            806 ;     genIfxJump
                            807 ;	Peephole 111	removed ljmp by inverse jump logic
   0015 30 E1 01            808 	jnb	acc.1,00104$
   0018                     809 00128$:
                            810 ;     genPlus
                            811 ;     genPlusIncr
   0018 0B                  812 	inc	r3
   0019                     813 00104$:
                            814 ;Initial/src/lib/spi.c:90: if (v & (1 << 2)) count++;
                            815 ;     genAnd
   0019 EA                  816 	mov	a,r2
                            817 ;     genIfxJump
                            818 ;	Peephole 111	removed ljmp by inverse jump logic
   001A 30 E2 01            819 	jnb	acc.2,00106$
   001D                     820 00129$:
                            821 ;     genPlus
                            822 ;     genPlusIncr
   001D 0B                  823 	inc	r3
   001E                     824 00106$:
                            825 ;Initial/src/lib/spi.c:91: if (v & (1 << 3)) count++;
                            826 ;     genAnd
   001E EA                  827 	mov	a,r2
                            828 ;     genIfxJump
                            829 ;	Peephole 111	removed ljmp by inverse jump logic
   001F 30 E3 01            830 	jnb	acc.3,00108$
   0022                     831 00130$:
                            832 ;     genPlus
                            833 ;     genPlusIncr
   0022 0B                  834 	inc	r3
   0023                     835 00108$:
                            836 ;Initial/src/lib/spi.c:92: if (v & (1 << 4)) count++;
                            837 ;     genAnd
   0023 EA                  838 	mov	a,r2
                            839 ;     genIfxJump
                            840 ;	Peephole 111	removed ljmp by inverse jump logic
   0024 30 E4 01            841 	jnb	acc.4,00110$
   0027                     842 00131$:
                            843 ;     genPlus
                            844 ;     genPlusIncr
   0027 0B                  845 	inc	r3
   0028                     846 00110$:
                            847 ;Initial/src/lib/spi.c:93: if (v & (1 << 5)) count++;
                            848 ;     genAnd
   0028 EA                  849 	mov	a,r2
                            850 ;     genIfxJump
                            851 ;	Peephole 111	removed ljmp by inverse jump logic
   0029 30 E5 01            852 	jnb	acc.5,00112$
   002C                     853 00132$:
                            854 ;     genPlus
                            855 ;     genPlusIncr
   002C 0B                  856 	inc	r3
   002D                     857 00112$:
                            858 ;Initial/src/lib/spi.c:94: if (v & (1 << 6)) count++;
                            859 ;     genAnd
   002D EA                  860 	mov	a,r2
                            861 ;     genIfxJump
                            862 ;	Peephole 111	removed ljmp by inverse jump logic
   002E 30 E6 01            863 	jnb	acc.6,00114$
   0031                     864 00133$:
                            865 ;     genPlus
                            866 ;     genPlusIncr
   0031 0B                  867 	inc	r3
   0032                     868 00114$:
                            869 ;Initial/src/lib/spi.c:95: if (v & (1 << 7)) count++;
                            870 ;     genAnd
   0032 EA                  871 	mov	a,r2
                            872 ;     genIfxJump
                            873 ;	Peephole 111	removed ljmp by inverse jump logic
   0033 30 E7 01            874 	jnb	acc.7,00116$
   0036                     875 00134$:
                            876 ;     genPlus
                            877 ;     genPlusIncr
   0036 0B                  878 	inc	r3
   0037                     879 00116$:
                            880 ;Initial/src/lib/spi.c:96: return count;
                            881 ;     genRet
   0037 8B 82               882 	mov	dpl,r3
   0039                     883 00117$:
   0039 22                  884 	ret
                            885 ;------------------------------------------------------------
                            886 ;Allocation info for local variables in function 'spi_read'
                            887 ;------------------------------------------------------------
                            888 ;header_lo                 Allocated with name '_spi_read_PARM_2'
                            889 ;enables                   Allocated with name '_spi_read_PARM_3'
                            890 ;format                    Allocated with name '_spi_read_PARM_4'
                            891 ;buf                       Allocated with name '_spi_read_PARM_5'
                            892 ;len                       Allocated with name '_spi_read_PARM_6'
                            893 ;header_hi                 Allocated to registers r2 
                            894 ;------------------------------------------------------------
                            895 ;Initial/src/lib/spi.c:112: spi_read (unsigned char header_hi, unsigned char header_lo,
                            896 ;	-----------------------------------------
                            897 ;	 function spi_read
                            898 ;	-----------------------------------------
   003A                     899 _spi_read:
                            900 ;     genReceive
   003A AA 82               901 	mov	r2,dpl
                            902 ;Initial/src/lib/spi.c:116: if (count_bits8 (enables) > 1)
                            903 ;     genCall
   003C 85*01 82            904 	mov	dpl,_spi_read_PARM_3
   003F C0 02               905 	push	ar2
   0041 12s00r0A            906 	lcall	_count_bits8
   0044 AB 82               907 	mov	r3,dpl
   0046 D0 02               908 	pop	ar2
                            909 ;     genCmpGt
                            910 ;     genCmp
                            911 ;     genIfxJump
                            912 ;	Peephole 108	removed ljmp by inverse jump logic
                            913 ;	Peephole 132.b	optimized genCmpGt by inverse logic (acc differs)
   0048 EB                  914 	mov	a,r3
   0049 24 FE               915 	add	a,#0xff - 0x01
   004B 50 04               916 	jnc	00102$
   004D                     917 00121$:
                            918 ;Initial/src/lib/spi.c:117: return 0;		// error, too many enables set
                            919 ;     genRet
   004D 75 82 00            920 	mov	dpl,#0x00
                            921 ;	Peephole 112.b	changed ljmp to sjmp
                            922 ;	Peephole 251.b	replaced sjmp to ret with ret
   0050 22                  923 	ret
   0051                     924 00102$:
                            925 ;Initial/src/lib/spi.c:119: setup_enables (enables);
                            926 ;     genCall
   0051 85*01 82            927 	mov	dpl,_spi_read_PARM_3
   0054 C0 02               928 	push	ar2
   0056 12s00r00            929 	lcall	_setup_enables
   0059 D0 02               930 	pop	ar2
                            931 ;Initial/src/lib/spi.c:121: if (format & SPI_FMT_LSB){		// order: LSB
                            932 ;     genAnd
   005B E5*02               933 	mov	a,_spi_read_PARM_4
                            934 ;     genIfxJump
                            935 ;	Peephole 111	removed ljmp by inverse jump logic
   005D 30 E7 04            936 	jnb	acc.7,00111$
   0060                     937 00122$:
                            938 ;Initial/src/lib/spi.c:123: return 0;		// error, not implemented
                            939 ;     genRet
   0060 75 82 00            940 	mov	dpl,#0x00
                            941 ;	Peephole 112.b	changed ljmp to sjmp
                            942 ;	Peephole 251.b	replaced sjmp to ret with ret
   0063 22                  943 	ret
   0064                     944 00111$:
                            945 ;Initial/src/lib/spi.c:145: switch (format & SPI_FMT_HDR_MASK){
                            946 ;     genAnd
   0064 74 60               947 	mov	a,#0x60
   0066 55*02               948 	anl	a,_spi_read_PARM_4
                            949 ;     genCmpEq
                            950 ;	Peephole 112.b	changed ljmp to sjmp
                            951 ;	Peephole 115.b	jump optimization
   0068 FB                  952 	mov	r3,a
   0069 60 23               953 	jz	00107$
   006B                     954 00123$:
                            955 ;     genCmpEq
   006B BB 20 02            956 	cjne	r3,#0x20,00124$
                            957 ;	Peephole 112.b	changed ljmp to sjmp
   006E 80 05               958 	sjmp	00104$
   0070                     959 00124$:
                            960 ;     genCmpEq
                            961 ;	Peephole 112.b	changed ljmp to sjmp
                            962 ;Initial/src/lib/spi.c:148: case SPI_FMT_HDR_1:
                            963 ;	Peephole 112.b	changed ljmp to sjmp
                            964 ;	Peephole 199	optimized misc jump sequence
   0070 BB 40 17            965 	cjne	r3,#0x40,00106$
   0073 80 08               966 	sjmp	00105$
                            967 ;00125$:
   0075                     968 00104$:
                            969 ;Initial/src/lib/spi.c:149: write_byte_msb (header_lo);
                            970 ;     genCall
   0075 85*00 82            971 	mov	dpl,_spi_read_PARM_2
   0078 12s01r01            972 	lcall	_write_byte_msb
                            973 ;Initial/src/lib/spi.c:150: break;
                            974 ;Initial/src/lib/spi.c:151: case SPI_FMT_HDR_2:
                            975 ;	Peephole 112.b	changed ljmp to sjmp
   007B 80 11               976 	sjmp	00107$
   007D                     977 00105$:
                            978 ;Initial/src/lib/spi.c:152: write_byte_msb (header_hi);
                            979 ;     genCall
   007D 8A 82               980 	mov	dpl,r2
   007F 12s01r01            981 	lcall	_write_byte_msb
                            982 ;Initial/src/lib/spi.c:153: write_byte_msb (header_lo);
                            983 ;     genCall
   0082 85*00 82            984 	mov	dpl,_spi_read_PARM_2
   0085 12s01r01            985 	lcall	_write_byte_msb
                            986 ;Initial/src/lib/spi.c:154: break;
                            987 ;Initial/src/lib/spi.c:155: default:
                            988 ;	Peephole 112.b	changed ljmp to sjmp
   0088 80 04               989 	sjmp	00107$
   008A                     990 00106$:
                            991 ;Initial/src/lib/spi.c:156: return 0;		// error
                            992 ;     genRet
   008A 75 82 00            993 	mov	dpl,#0x00
                            994 ;Initial/src/lib/spi.c:157: }
                            995 ;	Peephole 112.b	changed ljmp to sjmp
                            996 ;	Peephole 251.b	replaced sjmp to ret with ret
   008D 22                  997 	ret
   008E                     998 00107$:
                            999 ;Initial/src/lib/spi.c:158: if (len != 0)
                           1000 ;     genCmpEq
   008E E5*05              1001 	mov	a,_spi_read_PARM_6
                           1002 ;	Peephole 110	removed ljmp by inverse jump logic
   0090 60 0C              1003 	jz	00112$
   0092                    1004 00126$:
                           1005 ;Initial/src/lib/spi.c:159: read_bytes_msb (buf, len);
                           1006 ;     genAssign
   0092 85*05*0D           1007 	mov	_read_bytes_msb_PARM_2,_spi_read_PARM_6
                           1008 ;     genCall
   0095 85*03 82           1009 	mov	dpl,_spi_read_PARM_5
   0098 85*04 83           1010 	mov	dph,(_spi_read_PARM_5 + 1)
   009B 12s01rBC           1011 	lcall	_read_bytes_msb
   009E                    1012 00112$:
                           1013 ;Initial/src/lib/spi.c:162: disable_all ();
                           1014 ;     genCall
   009E 75 82 00           1015 	mov	dpl,#0x00
   00A1 12s00r00           1016 	lcall	_setup_enables
                           1017 ;Initial/src/lib/spi.c:163: return 1;		// success
                           1018 ;     genRet
   00A4 75 82 01           1019 	mov	dpl,#0x01
   00A7                    1020 00113$:
   00A7 22                 1021 	ret
                           1022 ;------------------------------------------------------------
                           1023 ;Allocation info for local variables in function 'spi_write'
                           1024 ;------------------------------------------------------------
                           1025 ;header_lo                 Allocated with name '_spi_write_PARM_2'
                           1026 ;enables                   Allocated with name '_spi_write_PARM_3'
                           1027 ;format                    Allocated with name '_spi_write_PARM_4'
                           1028 ;buf                       Allocated with name '_spi_write_PARM_5'
                           1029 ;len                       Allocated with name '_spi_write_PARM_6'
                           1030 ;header_hi                 Allocated to registers r2 
                           1031 ;------------------------------------------------------------
                           1032 ;Initial/src/lib/spi.c:169: spi_write (unsigned char header_hi, unsigned char header_lo,
                           1033 ;	-----------------------------------------
                           1034 ;	 function spi_write
                           1035 ;	-----------------------------------------
   00A8                    1036 _spi_write:
                           1037 ;     genReceive
   00A8 AA 82              1038 	mov	r2,dpl
                           1039 ;Initial/src/lib/spi.c:173: setup_enables (enables);
                           1040 ;     genCall
   00AA 85*07 82           1041 	mov	dpl,_spi_write_PARM_3
   00AD C0 02              1042 	push	ar2
   00AF 12s00r00           1043 	lcall	_setup_enables
   00B2 D0 02              1044 	pop	ar2
                           1045 ;Initial/src/lib/spi.c:175: if (format & SPI_FMT_LSB){		// order: LSB
                           1046 ;     genAnd
   00B4 E5*08              1047 	mov	a,_spi_write_PARM_4
                           1048 ;     genIfxJump
                           1049 ;	Peephole 111	removed ljmp by inverse jump logic
   00B6 30 E7 04           1050 	jnb	acc.7,00109$
   00B9                    1051 00118$:
                           1052 ;Initial/src/lib/spi.c:177: return 0;		// error, not implemented
                           1053 ;     genRet
   00B9 75 82 00           1054 	mov	dpl,#0x00
                           1055 ;	Peephole 112.b	changed ljmp to sjmp
                           1056 ;	Peephole 251.b	replaced sjmp to ret with ret
   00BC 22                 1057 	ret
   00BD                    1058 00109$:
                           1059 ;Initial/src/lib/spi.c:199: switch (format & SPI_FMT_HDR_MASK){
                           1060 ;     genAnd
   00BD 74 60              1061 	mov	a,#0x60
   00BF 55*08              1062 	anl	a,_spi_write_PARM_4
                           1063 ;     genCmpEq
                           1064 ;	Peephole 112.b	changed ljmp to sjmp
                           1065 ;	Peephole 115.b	jump optimization
   00C1 FB                 1066 	mov	r3,a
   00C2 60 23              1067 	jz	00105$
   00C4                    1068 00119$:
                           1069 ;     genCmpEq
   00C4 BB 20 02           1070 	cjne	r3,#0x20,00120$
                           1071 ;	Peephole 112.b	changed ljmp to sjmp
   00C7 80 05              1072 	sjmp	00102$
   00C9                    1073 00120$:
                           1074 ;     genCmpEq
                           1075 ;	Peephole 112.b	changed ljmp to sjmp
                           1076 ;Initial/src/lib/spi.c:202: case SPI_FMT_HDR_1:
                           1077 ;	Peephole 112.b	changed ljmp to sjmp
                           1078 ;	Peephole 199	optimized misc jump sequence
   00C9 BB 40 17           1079 	cjne	r3,#0x40,00104$
   00CC 80 08              1080 	sjmp	00103$
                           1081 ;00121$:
   00CE                    1082 00102$:
                           1083 ;Initial/src/lib/spi.c:203: write_byte_msb (header_lo);
                           1084 ;     genCall
   00CE 85*06 82           1085 	mov	dpl,_spi_write_PARM_2
   00D1 12s01r01           1086 	lcall	_write_byte_msb
                           1087 ;Initial/src/lib/spi.c:204: break;
                           1088 ;Initial/src/lib/spi.c:205: case SPI_FMT_HDR_2:
                           1089 ;	Peephole 112.b	changed ljmp to sjmp
   00D4 80 11              1090 	sjmp	00105$
   00D6                    1091 00103$:
                           1092 ;Initial/src/lib/spi.c:206: write_byte_msb (header_hi);
                           1093 ;     genCall
   00D6 8A 82              1094 	mov	dpl,r2
   00D8 12s01r01           1095 	lcall	_write_byte_msb
                           1096 ;Initial/src/lib/spi.c:207: write_byte_msb (header_lo);
                           1097 ;     genCall
   00DB 85*06 82           1098 	mov	dpl,_spi_write_PARM_2
   00DE 12s01r01           1099 	lcall	_write_byte_msb
                           1100 ;Initial/src/lib/spi.c:208: break;
                           1101 ;Initial/src/lib/spi.c:209: default:
                           1102 ;	Peephole 112.b	changed ljmp to sjmp
   00E1 80 04              1103 	sjmp	00105$
   00E3                    1104 00104$:
                           1105 ;Initial/src/lib/spi.c:210: return 0;		// error
                           1106 ;     genRet
   00E3 75 82 00           1107 	mov	dpl,#0x00
                           1108 ;Initial/src/lib/spi.c:211: }
                           1109 ;	Peephole 112.b	changed ljmp to sjmp
                           1110 ;	Peephole 251.b	replaced sjmp to ret with ret
   00E6 22                 1111 	ret
   00E7                    1112 00105$:
                           1113 ;Initial/src/lib/spi.c:212: if (len != 0)
                           1114 ;     genCmpEq
   00E7 E5*0B              1115 	mov	a,_spi_write_PARM_6
                           1116 ;	Peephole 110	removed ljmp by inverse jump logic
   00E9 60 0C              1117 	jz	00110$
   00EB                    1118 00122$:
                           1119 ;Initial/src/lib/spi.c:213: write_bytes_msb (buf, len);
                           1120 ;     genAssign
   00EB 85*0B*0C           1121 	mov	_write_bytes_msb_PARM_2,_spi_write_PARM_6
                           1122 ;     genCall
   00EE 85*09 82           1123 	mov	dpl,_spi_write_PARM_5
   00F1 85*0A 83           1124 	mov	dph,(_spi_write_PARM_5 + 1)
   00F4 12s01r54           1125 	lcall	_write_bytes_msb
   00F7                    1126 00110$:
                           1127 ;Initial/src/lib/spi.c:216: disable_all ();
                           1128 ;     genCall
   00F7 75 82 00           1129 	mov	dpl,#0x00
   00FA 12s00r00           1130 	lcall	_setup_enables
                           1131 ;Initial/src/lib/spi.c:217: return 1;		// success
                           1132 ;     genRet
   00FD 75 82 01           1133 	mov	dpl,#0x01
   0100                    1134 00111$:
   0100 22                 1135 	ret
                           1136 ;------------------------------------------------------------
                           1137 ;Allocation info for local variables in function 'write_byte_msb'
                           1138 ;------------------------------------------------------------
                           1139 ;v                         Allocated to registers r2 
                           1140 ;------------------------------------------------------------
                           1141 ;Initial/src/lib/spi.c:223: write_byte_msb (unsigned char v)
                           1142 ;	-----------------------------------------
                           1143 ;	 function write_byte_msb
                           1144 ;	-----------------------------------------
   0101                    1145 _write_byte_msb:
                           1146 ;     genReceive
                           1147 ;Initial/src/lib/spi.c:225: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1148 ;     genRLC
                           1149 ;	peephole 177.g	optimized mov sequence
   0101 E5 82              1150 	mov	a,dpl
   0103 FA                 1151 	mov	r2,a
   0104 23                 1152 	rl	a
                           1153 ;Initial/src/lib/spi.c:226: bitS_OUT = v & 0x1;
                           1154 ;     genAnd
                           1155 ;	Peephole 105	removed redundant mov
   0105 FA                 1156 	mov	r2,a
   0106 13                 1157 	rrc	a
   0107 92 81              1158 	mov	_bitS_OUT,c
                           1159 ;Initial/src/lib/spi.c:227: bitS_CLK = 1;
                           1160 ;     genAssign
   0109 D2 80              1161 	setb	_bitS_CLK
                           1162 ;Initial/src/lib/spi.c:228: bitS_CLK = 0;
                           1163 ;     genAssign
   010B C2 80              1164 	clr	_bitS_CLK
                           1165 ;Initial/src/lib/spi.c:230: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1166 ;     genRLC
   010D EA                 1167 	mov	a,r2
   010E 23                 1168 	rl	a
                           1169 ;Initial/src/lib/spi.c:231: bitS_OUT = v & 0x1;
                           1170 ;     genAnd
                           1171 ;	Peephole 105	removed redundant mov
   010F FA                 1172 	mov	r2,a
   0110 13                 1173 	rrc	a
   0111 92 81              1174 	mov	_bitS_OUT,c
                           1175 ;Initial/src/lib/spi.c:232: bitS_CLK = 1;
                           1176 ;     genAssign
   0113 D2 80              1177 	setb	_bitS_CLK
                           1178 ;Initial/src/lib/spi.c:233: bitS_CLK = 0;
                           1179 ;     genAssign
   0115 C2 80              1180 	clr	_bitS_CLK
                           1181 ;Initial/src/lib/spi.c:235: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1182 ;     genRLC
   0117 EA                 1183 	mov	a,r2
   0118 23                 1184 	rl	a
                           1185 ;Initial/src/lib/spi.c:236: bitS_OUT = v & 0x1;
                           1186 ;     genAnd
                           1187 ;	Peephole 105	removed redundant mov
   0119 FA                 1188 	mov	r2,a
   011A 13                 1189 	rrc	a
   011B 92 81              1190 	mov	_bitS_OUT,c
                           1191 ;Initial/src/lib/spi.c:237: bitS_CLK = 1;
                           1192 ;     genAssign
   011D D2 80              1193 	setb	_bitS_CLK
                           1194 ;Initial/src/lib/spi.c:238: bitS_CLK = 0;
                           1195 ;     genAssign
   011F C2 80              1196 	clr	_bitS_CLK
                           1197 ;Initial/src/lib/spi.c:240: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1198 ;     genRLC
   0121 EA                 1199 	mov	a,r2
   0122 23                 1200 	rl	a
                           1201 ;Initial/src/lib/spi.c:241: bitS_OUT = v & 0x1;
                           1202 ;     genAnd
                           1203 ;	Peephole 105	removed redundant mov
   0123 FA                 1204 	mov	r2,a
   0124 13                 1205 	rrc	a
   0125 92 81              1206 	mov	_bitS_OUT,c
                           1207 ;Initial/src/lib/spi.c:242: bitS_CLK = 1;
                           1208 ;     genAssign
   0127 D2 80              1209 	setb	_bitS_CLK
                           1210 ;Initial/src/lib/spi.c:243: bitS_CLK = 0;
                           1211 ;     genAssign
   0129 C2 80              1212 	clr	_bitS_CLK
                           1213 ;Initial/src/lib/spi.c:245: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1214 ;     genRLC
   012B EA                 1215 	mov	a,r2
   012C 23                 1216 	rl	a
                           1217 ;Initial/src/lib/spi.c:246: bitS_OUT = v & 0x1;
                           1218 ;     genAnd
                           1219 ;	Peephole 105	removed redundant mov
   012D FA                 1220 	mov	r2,a
   012E 13                 1221 	rrc	a
   012F 92 81              1222 	mov	_bitS_OUT,c
                           1223 ;Initial/src/lib/spi.c:247: bitS_CLK = 1;
                           1224 ;     genAssign
   0131 D2 80              1225 	setb	_bitS_CLK
                           1226 ;Initial/src/lib/spi.c:248: bitS_CLK = 0;
                           1227 ;     genAssign
   0133 C2 80              1228 	clr	_bitS_CLK
                           1229 ;Initial/src/lib/spi.c:250: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1230 ;     genRLC
   0135 EA                 1231 	mov	a,r2
   0136 23                 1232 	rl	a
                           1233 ;Initial/src/lib/spi.c:251: bitS_OUT = v & 0x1;
                           1234 ;     genAnd
                           1235 ;	Peephole 105	removed redundant mov
   0137 FA                 1236 	mov	r2,a
   0138 13                 1237 	rrc	a
   0139 92 81              1238 	mov	_bitS_OUT,c
                           1239 ;Initial/src/lib/spi.c:252: bitS_CLK = 1;
                           1240 ;     genAssign
   013B D2 80              1241 	setb	_bitS_CLK
                           1242 ;Initial/src/lib/spi.c:253: bitS_CLK = 0;
                           1243 ;     genAssign
   013D C2 80              1244 	clr	_bitS_CLK
                           1245 ;Initial/src/lib/spi.c:255: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1246 ;     genRLC
   013F EA                 1247 	mov	a,r2
   0140 23                 1248 	rl	a
                           1249 ;Initial/src/lib/spi.c:256: bitS_OUT = v & 0x1;
                           1250 ;     genAnd
                           1251 ;	Peephole 105	removed redundant mov
   0141 FA                 1252 	mov	r2,a
   0142 13                 1253 	rrc	a
   0143 92 81              1254 	mov	_bitS_OUT,c
                           1255 ;Initial/src/lib/spi.c:257: bitS_CLK = 1;
                           1256 ;     genAssign
   0145 D2 80              1257 	setb	_bitS_CLK
                           1258 ;Initial/src/lib/spi.c:258: bitS_CLK = 0;
                           1259 ;     genAssign
   0147 C2 80              1260 	clr	_bitS_CLK
                           1261 ;Initial/src/lib/spi.c:260: v = (v << 1) | (v >> 7);	// rotate left (MSB into bottom bit)
                           1262 ;     genRLC
   0149 EA                 1263 	mov	a,r2
   014A 23                 1264 	rl	a
                           1265 ;Initial/src/lib/spi.c:261: bitS_OUT = v & 0x1;
                           1266 ;     genAnd
                           1267 ;	Peephole 105	removed redundant mov
   014B FA                 1268 	mov	r2,a
   014C 13                 1269 	rrc	a
   014D 92 81              1270 	mov	_bitS_OUT,c
                           1271 ;Initial/src/lib/spi.c:262: bitS_CLK = 1;
                           1272 ;     genAssign
   014F D2 80              1273 	setb	_bitS_CLK
                           1274 ;Initial/src/lib/spi.c:263: bitS_CLK = 0;
                           1275 ;     genAssign
   0151 C2 80              1276 	clr	_bitS_CLK
   0153                    1277 00101$:
   0153 22                 1278 	ret
                           1279 ;------------------------------------------------------------
                           1280 ;Allocation info for local variables in function 'write_bytes_msb'
                           1281 ;------------------------------------------------------------
                           1282 ;len                       Allocated with name '_write_bytes_msb_PARM_2'
                           1283 ;buf                       Allocated to registers r2 r3 
                           1284 ;------------------------------------------------------------
                           1285 ;Initial/src/lib/spi.c:267: write_bytes_msb (const xdata unsigned char *buf, unsigned char len)
                           1286 ;	-----------------------------------------
                           1287 ;	 function write_bytes_msb
                           1288 ;	-----------------------------------------
   0154                    1289 _write_bytes_msb:
                           1290 ;     genReceive
   0154 AA 82              1291 	mov	r2,dpl
   0156 AB 83              1292 	mov	r3,dph
                           1293 ;Initial/src/lib/spi.c:269: while (len-- != 0){
                           1294 ;     genAssign
                           1295 ;     genAssign
   0158 AC*0C              1296 	mov	r4,_write_bytes_msb_PARM_2
   015A                    1297 00101$:
                           1298 ;     genAssign
   015A 8C 05              1299 	mov	ar5,r4
                           1300 ;     genMinus
                           1301 ;     genMinusDec
   015C 1C                 1302 	dec	r4
                           1303 ;     genCmpEq
   015D BD 00 01           1304 	cjne	r5,#0x00,00108$
                           1305 ;	Peephole 112.b	changed ljmp to sjmp
                           1306 ;	Peephole 251.b	replaced sjmp to ret with ret
   0160 22                 1307 	ret
   0161                    1308 00108$:
                           1309 ;Initial/src/lib/spi.c:270: write_byte_msb (*buf++);
                           1310 ;     genPointerGet
                           1311 ;     genFarPointerGet
   0161 8A 82              1312 	mov	dpl,r2
   0163 8B 83              1313 	mov	dph,r3
   0165 E0                 1314 	movx	a,@dptr
   0166 FD                 1315 	mov	r5,a
   0167 A3                 1316 	inc	dptr
   0168 AA 82              1317 	mov	r2,dpl
   016A AB 83              1318 	mov	r3,dph
                           1319 ;     genCall
   016C 8D 82              1320 	mov	dpl,r5
   016E C0 02              1321 	push	ar2
   0170 C0 03              1322 	push	ar3
   0172 C0 04              1323 	push	ar4
   0174 12s01r01           1324 	lcall	_write_byte_msb
   0177 D0 04              1325 	pop	ar4
   0179 D0 03              1326 	pop	ar3
   017B D0 02              1327 	pop	ar2
                           1328 ;	Peephole 112.b	changed ljmp to sjmp
   017D 80 DB              1329 	sjmp	00101$
   017F                    1330 00104$:
   017F 22                 1331 	ret
                           1332 ;------------------------------------------------------------
                           1333 ;Allocation info for local variables in function 'read_byte_msb'
                           1334 ;------------------------------------------------------------
                           1335 ;------------------------------------------------------------
                           1336 ;Initial/src/lib/spi.c:326: read_byte_msb (void) _naked
                           1337 ;	-----------------------------------------
                           1338 ;	 function read_byte_msb
                           1339 ;	-----------------------------------------
   0180                    1340 _read_byte_msb:
                           1341 ;	naked function: no prologue.
                           1342 ;Initial/src/lib/spi.c:373: _endasm;
                           1343 ;     genInline
   0180 E4                 1344 	        clr a
   0181 D2 80              1345 	        setb _bitS_CLK
   0183 A2 83              1346 	        mov c, _bitS_IN
   0185 33                 1347 	        rlc a
   0186 C2 80              1348 	        clr _bitS_CLK
   0188 D2 80              1349 	        setb _bitS_CLK
   018A A2 83              1350 	        mov c, _bitS_IN
   018C 33                 1351 	        rlc a
   018D C2 80              1352 	        clr _bitS_CLK
   018F D2 80              1353 	        setb _bitS_CLK
   0191 A2 83              1354 	        mov c, _bitS_IN
   0193 33                 1355 	        rlc a
   0194 C2 80              1356 	        clr _bitS_CLK
   0196 D2 80              1357 	        setb _bitS_CLK
   0198 A2 83              1358 	        mov c, _bitS_IN
   019A 33                 1359 	        rlc a
   019B C2 80              1360 	        clr _bitS_CLK
   019D D2 80              1361 	        setb _bitS_CLK
   019F A2 83              1362 	        mov c, _bitS_IN
   01A1 33                 1363 	        rlc a
   01A2 C2 80              1364 	        clr _bitS_CLK
   01A4 D2 80              1365 	        setb _bitS_CLK
   01A6 A2 83              1366 	        mov c, _bitS_IN
   01A8 33                 1367 	        rlc a
   01A9 C2 80              1368 	        clr _bitS_CLK
   01AB D2 80              1369 	        setb _bitS_CLK
   01AD A2 83              1370 	        mov c, _bitS_IN
   01AF 33                 1371 	        rlc a
   01B0 C2 80              1372 	        clr _bitS_CLK
   01B2 D2 80              1373 	        setb _bitS_CLK
   01B4 A2 83              1374 	        mov c, _bitS_IN
   01B6 33                 1375 	        rlc a
   01B7 C2 80              1376 	        clr _bitS_CLK
   01B9 F5 82              1377 	        mov dpl,a
   01BB 22                 1378 	        ret
   01BC                    1379 00101$:
                           1380 ;	naked function: no epilogue.
                           1381 ;------------------------------------------------------------
                           1382 ;Allocation info for local variables in function 'read_bytes_msb'
                           1383 ;------------------------------------------------------------
                           1384 ;len                       Allocated with name '_read_bytes_msb_PARM_2'
                           1385 ;buf                       Allocated to registers r2 r3 
                           1386 ;------------------------------------------------------------
                           1387 ;Initial/src/lib/spi.c:378: read_bytes_msb (xdata unsigned char *buf, unsigned char len)
                           1388 ;	-----------------------------------------
                           1389 ;	 function read_bytes_msb
                           1390 ;	-----------------------------------------
   01BC                    1391 _read_bytes_msb:
                           1392 ;     genReceive
   01BC AA 82              1393 	mov	r2,dpl
   01BE AB 83              1394 	mov	r3,dph
                           1395 ;Initial/src/lib/spi.c:380: while (len-- != 0){
                           1396 ;     genAssign
                           1397 ;     genAssign
   01C0 AC*0D              1398 	mov	r4,_read_bytes_msb_PARM_2
   01C2                    1399 00101$:
                           1400 ;     genAssign
   01C2 8C 05              1401 	mov	ar5,r4
                           1402 ;     genMinus
                           1403 ;     genMinusDec
   01C4 1C                 1404 	dec	r4
                           1405 ;     genCmpEq
   01C5 BD 00 01           1406 	cjne	r5,#0x00,00108$
                           1407 ;	Peephole 112.b	changed ljmp to sjmp
                           1408 ;	Peephole 251.b	replaced sjmp to ret with ret
   01C8 22                 1409 	ret
   01C9                    1410 00108$:
                           1411 ;Initial/src/lib/spi.c:381: *buf++ = read_byte_msb ();
                           1412 ;     genCall
   01C9 12s01r80           1413 	lcall	_read_byte_msb
   01CC AD 82              1414 	mov	r5,dpl
                           1415 ;     genPointerSet
                           1416 ;     genFarPointerSet
   01CE 8A 82              1417 	mov	dpl,r2
   01D0 8B 83              1418 	mov	dph,r3
   01D2 ED                 1419 	mov	a,r5
   01D3 F0                 1420 	movx	@dptr,a
   01D4 A3                 1421 	inc	dptr
   01D5 AA 82              1422 	mov	r2,dpl
   01D7 AB 83              1423 	mov	r3,dph
                           1424 ;	Peephole 112.b	changed ljmp to sjmp
   01D9 80 E7              1425 	sjmp	00101$
   01DB                    1426 00104$:
   01DB 22                 1427 	ret
                           1428 	.area CSEG    (CODE)
