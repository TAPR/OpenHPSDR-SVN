--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=6 LPM_WIDTHB=13 LPM_WIDTHP=19 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.1 cbx_cycloneii 2006:09:29:19:03:26:SJ cbx_lpm_add_sub 2006:10:10:22:03:24:SJ cbx_lpm_mult 2006:11:01:17:02:48:SJ cbx_mgl 2006:10:27:16:08:48:SJ cbx_padd 2006:11:07:16:02:02:SJ cbx_stratix 2006:09:18:10:47:42:SJ cbx_stratixii 2006:10:13:14:01:30:SJ cbx_util_mgl 2006:11:03:10:32:30:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 109 
SUBDESIGN mult_eao
( 
	dataa[5..0]	:	input;
	datab[12..0]	:	input;
	result[18..0]	:	output;
) 
VARIABLE
	add12_result[15..0]	:	WIRE;
	add16_result[11..0]	:	WIRE;
	add8_result[18..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs4a[2..0] : carry_sum;
	le3a[13..0] : lcell;
	le5a[13..0] : lcell;
	le6a[13..0] : lcell;
	le7a[13..0] : lcell;
	sft10a[18..0] : soft;
	sft11a[18..0] : soft;
	sft13a[15..0] : soft;
	sft14a[15..0] : soft;
	sft15a[15..0] : soft;
	sft17a[11..0] : soft;
	sft18a[11..0] : soft;
	sft19a[11..0] : soft;
	sft9a[18..0] : soft;
	dataa_node[12..0]	: WIRE;
	datab_node[5..0]	: WIRE;
	final_result_node[18..0]	: WIRE;
	w108w[13..0]	: WIRE;
	w109w[13..0]	: WIRE;
	w110w[13..0]	: WIRE;
	w118w[13..0]	: WIRE;
	w119w[13..0]	: WIRE;
	w12w[5..0]	: WIRE;
	w13w[13..0]	: WIRE;
	w144w	: WIRE;
	w14w[13..0]	: WIRE;
	w155w	: WIRE;
	w157w[13..0]	: WIRE;
	w158w[13..0]	: WIRE;
	w159w[13..0]	: WIRE;
	w15w[13..0]	: WIRE;
	w167w[13..0]	: WIRE;
	w168w[13..0]	: WIRE;
	w16w[13..0]	: WIRE;
	w187w	: WIRE;
	w189w	: WIRE;
	w191w	: WIRE;
	w193w	: WIRE;
	w195w	: WIRE;
	w197w	: WIRE;
	w199w	: WIRE;
	w201w	: WIRE;
	w203w	: WIRE;
	w205w	: WIRE;
	w209w	: WIRE;
	w211w	: WIRE;
	w212w	: WIRE;
	w213w	: WIRE;
	w214w	: WIRE;
	w216w	: WIRE;
	w217w	: WIRE;
	w218w	: WIRE;
	w219w	: WIRE;
	w220w	: WIRE;
	w221w	: WIRE;
	w222w	: WIRE;
	w223w	: WIRE;
	w224w	: WIRE;
	w225w	: WIRE;
	w226w	: WIRE;
	w227w	: WIRE;
	w228w	: WIRE;
	w229w	: WIRE;
	w232w	: WIRE;
	w369w[18..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( B"0", ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[1].cout, ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( B"0", ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( (w12w[4..4] $ cs4a[1].cout), ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((((w12w[5..5] & (! w12w[4..4])) & (! cs2a[2].sout)) & (! w15w[])) # ((((! w12w[5..5]) & w12w[4..4]) & cs2a[2].sout) & w15w[])) # ((w12w[5..5] & w12w[4..4]) & cs2a[2].sout));
	le5a[].in = (! ((! w14w[]) & (! (cs4a[2].sout & (w12w[5..5] $ w16w[])))));
	le6a[].in = (! ((! w118w[]) & (! w119w[])));
	le7a[].in = (! ((! w167w[]) & (! w168w[])));
	sft10a[].in = ( w232w, ( w229w, ( w228w, ( w227w, ( w225w, ( w213w, ( w224w, ( w223w, ( w222w, ( w221w, ( w220w, ( w219w, ( w218w, ( w217w, ( w187w, ( w216w, ( w211w, ( w232w, w155w))))))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w232w, ( w212w, ( w13w[11..11], ( w13w[10..10], ( w13w[9..9], ( w13w[8..8], ( w13w[7..7], ( w13w[6..6], ( w13w[5..5], ( w13w[4..4], ( w13w[3..3], ( w13w[2..2], ( w13w[1..1], ( w13w[0..0], ( w108w[3..2])))))))))))))));
	sft14a[].in = ( w232w, ( w232w, ( (! w157w[13..13]), ( w157w[12..12], ( w157w[11..11], ( w157w[10..10], ( w157w[9..9], ( w157w[8..8], ( w157w[7..7], ( w157w[6..6], ( w157w[5..5], ( w157w[4..4], ( w157w[3..3], ( w157w[2..2], ( w232w, w209w)))))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w232w, ( w212w, ( (! w108w[13..13]), ( w108w[12..12], ( w108w[11..11], ( w108w[10..10], ( w108w[9..9], ( w108w[8..8], ( w108w[7..7], ( w108w[6..6], ( w108w[5..4])))))))))));
	sft18a[].in = ( w232w, ( w232w, ( w212w, ( w232w, ( w232w, ( w232w, ( w232w, ( w232w, ( w232w, ( w232w, ( w232w, w12w[5..5])))))))))));
	sft19a[].in = add16_result[];
	sft9a[].in = ( w212w, ( (! w13w[13..13]), ( w13w[12..12], ( w226w, ( w214w, ( w205w, ( w203w, ( w201w, ( w199w, ( w197w, ( w195w, ( w193w, ( w191w, ( w189w, ( w144w, ( w157w[1..1], ( w157w[0..0], ( w108w[1..0]))))))))))))))))));
	dataa_node[] = ( datab[12..0]);
	datab_node[] = ( dataa[5..0]);
	final_result_node[] = ( w369w[18..0]);
	result[] = ( final_result_node[18..0]);
	w108w[] = le6a[].out;
	w109w[] = ( dataa_node[], B"0");
	w110w[] = ( dataa_node[12..12], dataa_node[]);
	w118w[] = (((! w109w[]) & cs2a[0].sout) & (! cs4a[0].sout));
	w119w[] = ((((! w110w[]) & cs2a[0].sout) & cs4a[0].sout) # ((w110w[] & (! cs2a[0].sout)) & cs4a[0].sout));
	w12w[] = datab_node[];
	w13w[] = le5a[].out;
	w144w = sft15a[2..2].out;
	w14w[] = le3a[].out;
	w155w = cs2a[0].sout;
	w157w[] = le7a[].out;
	w158w[] = ( dataa_node[], B"0");
	w159w[] = ( dataa_node[12..12], dataa_node[]);
	w15w[] = ( dataa_node[], B"0");
	w167w[] = (((! w158w[]) & cs2a[1].sout) & (! cs4a[1].sout));
	w168w[] = ((((! w159w[]) & cs2a[1].sout) & cs4a[1].sout) # ((w159w[] & (! cs2a[1].sout)) & cs4a[1].sout));
	w16w[] = ( dataa_node[12..12], dataa_node[]);
	w187w = sft19a[0..0].out;
	w189w = sft15a[3..3].out;
	w191w = sft15a[4..4].out;
	w193w = sft15a[5..5].out;
	w195w = sft15a[6..6].out;
	w197w = sft15a[7..7].out;
	w199w = sft15a[8..8].out;
	w201w = sft15a[9..9].out;
	w203w = sft15a[10..10].out;
	w205w = sft15a[11..11].out;
	w209w = cs2a[1].sout;
	w211w = sft15a[0..0].out;
	w212w = B"1";
	w213w = sft19a[9..9].out;
	w214w = sft15a[12..12].out;
	w216w = sft15a[1..1].out;
	w217w = sft19a[1..1].out;
	w218w = sft19a[2..2].out;
	w219w = sft19a[3..3].out;
	w220w = sft19a[4..4].out;
	w221w = sft19a[5..5].out;
	w222w = sft19a[6..6].out;
	w223w = sft19a[7..7].out;
	w224w = sft19a[8..8].out;
	w225w = sft19a[10..10].out;
	w226w = sft15a[13..13].out;
	w227w = sft19a[11..11].out;
	w228w = sft15a[14..14].out;
	w229w = sft15a[15..15].out;
	w232w = B"0";
	w369w[] = ( sft11a[18..17].out, sft11a[16..15].out, sft11a[14..13].out, sft11a[12..11].out, sft11a[10..9].out, sft11a[8..7].out, sft11a[6..5].out, sft11a[4..3].out, sft11a[2..1].out, sft11a[0..0].out);
END;
--VALID FILE
