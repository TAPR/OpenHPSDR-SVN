--lpm_mult DEDICATED_MULTIPLIER_CIRCUITRY="NO" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="AUTO" LPM_PIPELINE=0 LPM_REPRESENTATION="SIGNED" LPM_WIDTHA=6 LPM_WIDTHB=10 LPM_WIDTHP=16 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 6.1 cbx_cycloneii 2006:09:29:19:03:26:SJ cbx_lpm_add_sub 2006:10:10:22:03:24:SJ cbx_lpm_mult 2006:11:01:17:02:48:SJ cbx_mgl 2006:10:27:16:08:48:SJ cbx_padd 2006:11:07:16:02:02:SJ cbx_stratix 2006:09:18:10:47:42:SJ cbx_stratixii 2006:10:13:14:01:30:SJ cbx_util_mgl 2006:11:03:10:32:30:SJ  VERSION_END


--  Copyright (C) 1991-2006 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION carry_sum (cin, sin)
RETURNS ( cout, sout);
FUNCTION lcell (in)
RETURNS ( out);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 88 
SUBDESIGN mult_8ao
( 
	dataa[5..0]	:	input;
	datab[9..0]	:	input;
	result[15..0]	:	output;
) 
VARIABLE
	add12_result[12..0]	:	WIRE;
	add16_result[8..0]	:	WIRE;
	add8_result[15..0]	:	WIRE;
	cs2a[2..0] : carry_sum;
	cs4a[2..0] : carry_sum;
	le3a[10..0] : lcell;
	le5a[10..0] : lcell;
	le6a[10..0] : lcell;
	le7a[10..0] : lcell;
	sft10a[15..0] : soft;
	sft11a[15..0] : soft;
	sft13a[12..0] : soft;
	sft14a[12..0] : soft;
	sft15a[12..0] : soft;
	sft17a[8..0] : soft;
	sft18a[8..0] : soft;
	sft19a[8..0] : soft;
	sft9a[15..0] : soft;
	dataa_node[9..0]	: WIRE;
	datab_node[5..0]	: WIRE;
	final_result_node[15..0]	: WIRE;
	w102w[10..0]	: WIRE;
	w103w[10..0]	: WIRE;
	w104w[10..0]	: WIRE;
	w112w[10..0]	: WIRE;
	w113w[10..0]	: WIRE;
	w12w[5..0]	: WIRE;
	w138w	: WIRE;
	w13w[10..0]	: WIRE;
	w146w	: WIRE;
	w148w[10..0]	: WIRE;
	w149w[10..0]	: WIRE;
	w14w[10..0]	: WIRE;
	w150w[10..0]	: WIRE;
	w158w[10..0]	: WIRE;
	w159w[10..0]	: WIRE;
	w15w[10..0]	: WIRE;
	w16w[10..0]	: WIRE;
	w178w	: WIRE;
	w180w	: WIRE;
	w182w	: WIRE;
	w184w	: WIRE;
	w186w	: WIRE;
	w188w	: WIRE;
	w190w	: WIRE;
	w194w	: WIRE;
	w196w	: WIRE;
	w197w	: WIRE;
	w198w	: WIRE;
	w199w	: WIRE;
	w201w	: WIRE;
	w202w	: WIRE;
	w203w	: WIRE;
	w204w	: WIRE;
	w205w	: WIRE;
	w206w	: WIRE;
	w207w	: WIRE;
	w208w	: WIRE;
	w209w	: WIRE;
	w210w	: WIRE;
	w211w	: WIRE;
	w214w	: WIRE;
	w324w[15..0]	: WIRE;

BEGIN 
	add12_result[] = sft13a[].out + sft14a[].out;
	add16_result[] = sft17a[].out + sft18a[].out;
	add8_result[] = sft9a[].out + sft10a[].out;
	cs2a[].cin = ( B"0", ((w12w[2..2] & cs2a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs2a[].sin = ( cs2a[1].cout, ((((((! w12w[3..3]) & w12w[2..2]) & cs2a[0].cout) # ((w12w[3..3] & w12w[2..2]) & (! cs2a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs2a[0].cout)) # ((w12w[3..3] & (! w12w[2..2])) & (! cs2a[0].cout))), w12w[1..1]);
	cs4a[].cin = ( B"0", ((w12w[2..2] & cs4a[0].cout) # w12w[3..3]), w12w[1..1]);
	cs4a[].sin = ( (w12w[4..4] $ cs4a[1].cout), ((((((! w12w[3..3]) & (! w12w[2..2])) & cs4a[0].cout) # (((! w12w[3..3]) & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & w12w[2..2]) & (! cs4a[0].cout))) # ((w12w[3..3] & (! w12w[2..2])) & cs4a[0].cout)), w12w[0..0]);
	le3a[].in = (((((w12w[5..5] & (! w12w[4..4])) & (! cs2a[2].sout)) & (! w15w[])) # ((((! w12w[5..5]) & w12w[4..4]) & cs2a[2].sout) & w15w[])) # ((w12w[5..5] & w12w[4..4]) & cs2a[2].sout));
	le5a[].in = (! ((! w14w[]) & (! (cs4a[2].sout & (w12w[5..5] $ w16w[])))));
	le6a[].in = (! ((! w112w[]) & (! w113w[])));
	le7a[].in = (! ((! w158w[]) & (! w159w[])));
	sft10a[].in = ( w214w, ( w211w, ( w210w, ( w209w, ( w207w, ( w198w, ( w206w, ( w205w, ( w204w, ( w203w, ( w202w, ( w178w, ( w201w, ( w196w, ( w214w, w146w)))))))))))))));
	sft11a[].in = add8_result[];
	sft13a[].in = ( w214w, ( w197w, ( w13w[8..8], ( w13w[7..7], ( w13w[6..6], ( w13w[5..5], ( w13w[4..4], ( w13w[3..3], ( w13w[2..2], ( w13w[1..1], ( w13w[0..0], ( w102w[3..2]))))))))))));
	sft14a[].in = ( w214w, ( w214w, ( (! w148w[10..10]), ( w148w[9..9], ( w148w[8..8], ( w148w[7..7], ( w148w[6..6], ( w148w[5..5], ( w148w[4..4], ( w148w[3..3], ( w148w[2..2], ( w214w, w194w))))))))))));
	sft15a[].in = add12_result[];
	sft17a[].in = ( w214w, ( w197w, ( (! w102w[10..10]), ( w102w[9..9], ( w102w[8..8], ( w102w[7..7], ( w102w[6..6], ( w102w[5..4]))))))));
	sft18a[].in = ( w214w, ( w214w, ( w197w, ( w214w, ( w214w, ( w214w, ( w214w, ( w214w, w12w[5..5]))))))));
	sft19a[].in = add16_result[];
	sft9a[].in = ( w197w, ( (! w13w[10..10]), ( w13w[9..9], ( w208w, ( w199w, ( w190w, ( w188w, ( w186w, ( w184w, ( w182w, ( w180w, ( w138w, ( w148w[1..1], ( w148w[0..0], ( w102w[1..0])))))))))))))));
	dataa_node[] = ( datab[9..0]);
	datab_node[] = ( dataa[5..0]);
	final_result_node[] = ( w324w[15..0]);
	result[] = ( final_result_node[15..0]);
	w102w[] = le6a[].out;
	w103w[] = ( dataa_node[], B"0");
	w104w[] = ( dataa_node[9..9], dataa_node[]);
	w112w[] = (((! w103w[]) & cs2a[0].sout) & (! cs4a[0].sout));
	w113w[] = ((((! w104w[]) & cs2a[0].sout) & cs4a[0].sout) # ((w104w[] & (! cs2a[0].sout)) & cs4a[0].sout));
	w12w[] = datab_node[];
	w138w = sft15a[2..2].out;
	w13w[] = le5a[].out;
	w146w = cs2a[0].sout;
	w148w[] = le7a[].out;
	w149w[] = ( dataa_node[], B"0");
	w14w[] = le3a[].out;
	w150w[] = ( dataa_node[9..9], dataa_node[]);
	w158w[] = (((! w149w[]) & cs2a[1].sout) & (! cs4a[1].sout));
	w159w[] = ((((! w150w[]) & cs2a[1].sout) & cs4a[1].sout) # ((w150w[] & (! cs2a[1].sout)) & cs4a[1].sout));
	w15w[] = ( dataa_node[], B"0");
	w16w[] = ( dataa_node[9..9], dataa_node[]);
	w178w = sft19a[0..0].out;
	w180w = sft15a[3..3].out;
	w182w = sft15a[4..4].out;
	w184w = sft15a[5..5].out;
	w186w = sft15a[6..6].out;
	w188w = sft15a[7..7].out;
	w190w = sft15a[8..8].out;
	w194w = cs2a[1].sout;
	w196w = sft15a[0..0].out;
	w197w = B"1";
	w198w = sft19a[6..6].out;
	w199w = sft15a[9..9].out;
	w201w = sft15a[1..1].out;
	w202w = sft19a[1..1].out;
	w203w = sft19a[2..2].out;
	w204w = sft19a[3..3].out;
	w205w = sft19a[4..4].out;
	w206w = sft19a[5..5].out;
	w207w = sft19a[7..7].out;
	w208w = sft15a[10..10].out;
	w209w = sft19a[8..8].out;
	w210w = sft15a[11..11].out;
	w211w = sft15a[12..12].out;
	w214w = B"0";
	w324w[] = ( sft11a[15..15].out, sft11a[14..14].out, sft11a[13..13].out, sft11a[12..12].out, sft11a[11..11].out, sft11a[10..10].out, sft11a[9..9].out, sft11a[8..8].out, sft11a[7..7].out, sft11a[6..6].out, sft11a[5..5].out, sft11a[4..4].out, sft11a[3..3].out, sft11a[2..2].out, sft11a[1..1].out, sft11a[0..0].out);
END;
--VALID FILE
