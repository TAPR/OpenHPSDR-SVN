// -------------------------------------------------------------
//
// Module: CIC3_13
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-02-09 17:09:01
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CIC3_13
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\QS1R_AB_CYCII
// OptimizeForHDL: On
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// CastBeforeSum: On
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure        : Cascaded Integrator-Comb Decimator
// Decimation Factor       : 13
// Differential Delay      : 1
// Number of Sections      : 3
// Stable                  : Yes
// Linear Phase            : Yes (Type 1)
//
// Input                   : s20,15
// Output                  : s24,7
// Filter Internals        : Minimum Word Lengths
//   Integrator Section 1  : s32,15
//   Integrator Section 2  : s31,14
//   Integrator Section 3  : s29,12
//   Comb Section 1        : s28,11
//   Comb Section 2        : s27,10
//   Comb Section 3        : s26,9
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 6
// Number of States      : 6
// MultPerInputSample    : 0
// AddPerInputSample     : 3.2308
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC3_13 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [19:0] filter_in; //sfix20_En15
  output  signed [23:0] filter_out; //sfix24_En7
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: CIC3_13
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [3:0] cur_count; // ufix4
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [19:0] input_register; // sfix20_En15
  //   -- Section 1 Signals 
  wire signed [19:0] section_in1; // sfix20_En15
  wire signed [31:0] section_cast1; // sfix32_En15
  wire signed [31:0] sum1; // sfix32_En15
  reg  signed [31:0] section_out1; // sfix32_En15
  wire signed [31:0] add_cast; // sfix32_En15
  wire signed [31:0] add_cast_1; // sfix32_En15
  wire signed [32:0] add_temp; // sfix33_En15
  //   -- Section 2 Signals 
  wire signed [31:0] section_in2; // sfix32_En15
  wire signed [30:0] section_cast2; // sfix31_En14
  wire signed [30:0] sum2; // sfix31_En14
  reg  signed [30:0] section_out2; // sfix31_En14
  wire signed [30:0] add_cast_2; // sfix31_En14
  wire signed [30:0] add_cast_3; // sfix31_En14
  wire signed [31:0] add_temp_1; // sfix32_En14
  //   -- Section 3 Signals 
  wire signed [30:0] section_in3; // sfix31_En14
  wire signed [28:0] section_cast3; // sfix29_En12
  wire signed [28:0] sum3; // sfix29_En12
  reg  signed [28:0] section_out3; // sfix29_En12
  wire signed [28:0] add_cast_4; // sfix29_En12
  wire signed [28:0] add_cast_5; // sfix29_En12
  wire signed [29:0] add_temp_2; // sfix30_En12
  //   -- Section 4 Signals 
  wire signed [28:0] section_in4; // sfix29_En12
  wire signed [27:0] section_cast4; // sfix28_En11
  reg  signed [27:0] diff1; // sfix28_En11
  wire signed [27:0] section_out4; // sfix28_En11
  wire signed [27:0] sub_cast; // sfix28_En11
  wire signed [27:0] sub_cast_1; // sfix28_En11
  wire signed [28:0] sub_temp; // sfix29_En11
  //   -- Section 5 Signals 
  wire signed [27:0] section_in5; // sfix28_En11
  wire signed [26:0] section_cast5; // sfix27_En10
  reg  signed [26:0] diff2; // sfix27_En10
  wire signed [26:0] section_out5; // sfix27_En10
  wire signed [26:0] sub_cast_2; // sfix27_En10
  wire signed [26:0] sub_cast_3; // sfix27_En10
  wire signed [27:0] sub_temp_1; // sfix28_En10
  //   -- Section 6 Signals 
  wire signed [26:0] section_in6; // sfix27_En10
  wire signed [25:0] section_cast6; // sfix26_En9
  reg  signed [25:0] diff3; // sfix26_En9
  wire signed [25:0] section_out6; // sfix26_En9
  wire signed [25:0] sub_cast_4; // sfix26_En9
  wire signed [25:0] sub_cast_5; // sfix26_En9
  wire signed [26:0] sub_temp_2; // sfix27_En9
  wire signed [23:0] output_typeconvert; // sfix24_En7
  //   
  reg  signed [23:0] output_register; // sfix24_En7

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 4'b0000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 4'b1100) begin
            cur_count <= 4'b0000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 4'b0001 && clk_enable == 1'b1)? 1 : 0;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({{12{section_in1[19]}}, section_in1});

  assign add_cast = section_cast1;
  assign add_cast_1 = section_out1;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[31:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign section_cast2 = section_in2[31:1];

  assign add_cast_2 = section_cast2;
  assign add_cast_3 = section_out2;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[30:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = section_in3[30:2];

  assign add_cast_4 = section_cast3;
  assign add_cast_5 = section_out3;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[28:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Comb ------------------

  assign section_in4 = section_out3;

  assign section_cast4 = section_in4[28:1];

  assign sub_cast = section_cast4;
  assign sub_cast_1 = diff1;
  assign sub_temp = sub_cast - sub_cast_1;
  assign section_out4 = sub_temp[27:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section4
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff1 <= section_cast4;
        end
      end
    end // comb_delay_section4

  //   ------------------ Section # 5 : Comb ------------------

  assign section_in5 = section_out4;

  assign section_cast5 = section_in5[27:1];

  assign sub_cast_2 = section_cast5;
  assign sub_cast_3 = diff2;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign section_out5 = sub_temp_1[26:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section5
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff2 <= section_cast5;
        end
      end
    end // comb_delay_section5

  //   ------------------ Section # 6 : Comb ------------------

  assign section_in6 = section_out5;

  assign section_cast6 = section_in6[26:1];

  assign sub_cast_4 = section_cast6;
  assign sub_cast_5 = diff3;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign section_out6 = sub_temp_2[25:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section6
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff3 <= section_cast6;
        end
      end
    end // comb_delay_section6

  assign output_typeconvert = section_out6[25:2];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // CIC3_13
