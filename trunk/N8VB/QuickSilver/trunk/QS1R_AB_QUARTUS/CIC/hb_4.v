// -------------------------------------------------------------
//
// Module: hb_4
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-30 13:56:07
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: hb_4
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 4
// Polyphase Length   : 2
// Filter Length      : 7
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s8,7 -> [-1 1)
// Input              : s32,15 -> [-65536 65536)
// Filter Internals   : Full Precision
//   Output           : s40,22 -> [-131072 131072)  (auto determined)
//   Product          : s38,22 -> [-32768 32768)  (auto determined)
//   Accumulator      : s40,22 -> [-131072 131072)  (auto determined)
//   Round Mode       : No rounding
//   Overflow Mode    : No overflow
//
// Implementation Cost
// Number of Multipliers : 5
// Number of Adders      : 4
// Number of States      : 4
// MultPerInputSample    : 1.25
// AddPerInputSample     : 1
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hb_4 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32_En15
  output  signed [39:0] filter_out; //sfix40_En22
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: hb_4
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [7:0] coeffphase1_1 = 8'b11111010; //sfix8_En7
  parameter signed [7:0] coeffphase1_2 = 8'b00100110; //sfix8_En7
  parameter signed [7:0] coeffphase2_1 = 8'b00000000; //sfix8_En7
  parameter signed [7:0] coeffphase2_2 = 8'b00000000; //sfix8_En7
  parameter signed [7:0] coeffphase3_1 = 8'b00100110; //sfix8_En7
  parameter signed [7:0] coeffphase3_2 = 8'b11111010; //sfix8_En7
  parameter signed [7:0] coeffphase4_1 = 8'b01000000; //sfix8_En7
  parameter signed [7:0] coeffphase4_2 = 8'b00000000; //sfix8_En7
  // Signals
  reg  [3:0] ring_count; // ufix4
  wire phase_0; // boolean
  wire phase_1; // boolean
  wire phase_2; // boolean
  wire phase_3; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [31:0] input_register; // sfix32_En15
  reg  signed [31:0] input_pipeline_phase0 [0:0] ; // sfix32_En15
  reg  signed [31:0] input_pipeline_phase2 [0:1] ; // sfix32_En15
  reg  signed [31:0] input_pipeline_phase3; // sfix32_En15
  wire signed [37:0] product_phase0_1; // sfix38_En22
  wire signed [35:0] mulcsd_temp; // sfix36_En22
  wire signed [37:0] product_phase0_2; // sfix38_En22
  wire signed [37:0] mulcsd_temp_1; // sfix38_En22
  wire signed [37:0] product_phase2_1; // sfix38_En22
  wire signed [37:0] mulcsd_temp_2; // sfix38_En22
  wire signed [37:0] product_phase2_2; // sfix38_En22
  wire signed [35:0] mulcsd_temp_3; // sfix36_En22
  wire signed [37:0] product_phase3_1; // sfix38_En22
  wire signed [39:0] sum1_1; // sfix40_En22
  wire signed [37:0] add_signext; // sfix38_En22
  wire signed [37:0] add_signext_1; // sfix38_En22
  wire signed [38:0] add_temp; // sfix39_En22
  wire signed [39:0] sum1_2; // sfix40_En22
  wire signed [37:0] add_signext_2; // sfix38_En22
  wire signed [37:0] add_signext_3; // sfix38_En22
  wire signed [38:0] add_temp_1; // sfix39_En22
  wire signed [39:0] sum2_1; // sfix40_En22
  wire signed [39:0] add_signext_4; // sfix40_En22
  wire signed [39:0] add_signext_5; // sfix40_En22
  wire signed [40:0] add_temp_2; // sfix41_En22
  wire signed [39:0] sum3_1; // sfix40_En22
  wire signed [39:0] add_signext_6; // sfix40_En22
  wire signed [39:0] add_signext_7; // sfix40_En22
  wire signed [40:0] add_temp_3; // sfix41_En22
  reg  signed [39:0] output_register; // sfix40_En22

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[3 : 1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  assign  phase_2 = ring_count[2]  && clk_enable;

  assign  phase_3 = ring_count[3]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_3;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0 <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          input_pipeline_phase0 <= input_register;
        end
      end
    end // Delay_Pipeline_Phase0_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase2_process
      if (reset == 1'b1) begin
        input_pipeline_phase2[0] <= 0;
        input_pipeline_phase2[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase2[0] <= input_register;
          input_pipeline_phase2[1] <= input_pipeline_phase2[0];
        end
      end
    end // Delay_Pipeline_Phase2_process


  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase3_process
      if (reset == 1'b1) begin
        input_pipeline_phase3 <= 0;
      end
      else begin
        if (phase_2 == 1'b1) begin
          input_pipeline_phase3 <= input_register;
        end
      end
    end // Delay_Pipeline_Phase3_process

  assign mulcsd_temp = - (
        $signed({input_register, 3'b000}) -
        $signed({input_register, 1'b0}));
  assign product_phase0_1 = $signed({{2{mulcsd_temp[35]}}, mulcsd_temp});

  assign mulcsd_temp_1 = 
        $signed({input_pipeline_phase0[0], 5'b00000}) +
        $signed({input_pipeline_phase0[0], 3'b000}) -
        $signed({input_pipeline_phase0[0], 1'b0});
  assign product_phase0_2 = mulcsd_temp_1;

  assign mulcsd_temp_2 = 
        $signed({input_pipeline_phase2[0], 5'b00000}) +
        $signed({input_pipeline_phase2[0], 3'b000}) -
        $signed({input_pipeline_phase2[0], 1'b0});
  assign product_phase2_1 = mulcsd_temp_2;

  assign mulcsd_temp_3 = - (
        $signed({input_pipeline_phase2[1], 3'b000}) -
        $signed({input_pipeline_phase2[1], 1'b0}));
  assign product_phase2_2 = $signed({{2{mulcsd_temp_3[35]}}, mulcsd_temp_3});

  assign product_phase3_1 = $signed({input_pipeline_phase3[31:0], 6'b000000});

  assign add_signext = product_phase3_1;
  assign add_signext_1 = product_phase2_1;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = $signed({{1{add_temp[38]}}, add_temp});

  assign add_signext_2 = product_phase2_2;
  assign add_signext_3 = product_phase0_1;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = $signed({{1{add_temp_1[38]}}, add_temp_1});

  assign add_signext_4 = sum1_1;
  assign add_signext_5 = sum1_2;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum2_1 = add_temp_2[39:0];

  assign add_signext_6 = sum2_1;
  assign add_signext_7 = $signed({{2{product_phase0_2[37]}}, product_phase0_2});
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum3_1 = add_temp_3[39:0];

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_3 == 1'b1) begin
          output_register <= sum3_1;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // hb_4
