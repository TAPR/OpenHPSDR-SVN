// -------------------------------------------------------------
//
// Module: cfird_4
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-30 18:17:17
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: cfird_4
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// SerialPartition: -1
// AddPipelineRegisters: On
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure         : Direct-Form Transposed FIR Polyphase Decimator
// Decimation Factor        : 4
// Polyphase Length         : 2
// Filter Length            : 6
// Stable                   : Yes
// Linear Phase             : Yes (Type 2)
//
// Arithmetic               : fixed
// Numerator                : s16,15 -> [-1 1)
// Input                    : s32,15 -> [-65536 65536)
// Filter Internals         : Full Precision
//   Output                 : s48,30 -> [-131072 131072)  (auto determined)
//   States                 : s48,30 -> [-131072 131072)  (auto determined)
//   Product                : s47,30 -> [-65536 65536)  (auto determined)
//   Polyphase Accumulator  : s48,30 -> [-131072 131072)  (auto determined)
//   Accumulator            : s48,30 -> [-131072 131072)  (auto determined)
//   Round Mode             : No rounding
//   Overflow Mode          : No overflow
//
// Implementation Cost
// Number of Multipliers : 6
// Number of Adders      : 5
// Number of States      : 1
// MultPerInputSample    : 1.5
// AddPerInputSample     : 1.25
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cfird_4 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32_En15
  output  signed [47:0] filter_out; //sfix48_En30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: cfird_4
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111110011010111; //sfix16_En15
  parameter signed [15:0] coeffphase1_2 = 16'b1110010110001001; //sfix16_En15
  parameter signed [15:0] coeffphase2_1 = 16'b1110010110001001; //sfix16_En15
  parameter signed [15:0] coeffphase2_2 = 16'b1111110011010111; //sfix16_En15
  parameter signed [15:0] coeffphase3_1 = 16'b0101100111110010; //sfix16_En15
  parameter signed [15:0] coeffphase3_2 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeffphase4_1 = 16'b0101100111110010; //sfix16_En15
  parameter signed [15:0] coeffphase4_2 = 16'b0000000000000000; //sfix16_En15
  // Signals
  reg  [1:0] cur_count; // ufix2
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  wire signed [31:0] input_mux [0:3] ; // sfix32_En15
  reg  signed [31:0] input_pipeline [0:3] ; // sfix32_En15
  wire signed [46:0] product_phase1_1; // sfix47_En30
  wire signed [47:0] mul_temp; // sfix48_En30
  wire signed [46:0] product_phase1_2; // sfix47_En30
  wire signed [47:0] mul_temp_1; // sfix48_En30
  wire signed [46:0] product_phase2_1; // sfix47_En30
  wire signed [47:0] mul_temp_2; // sfix48_En30
  wire signed [46:0] product_phase2_2; // sfix47_En30
  wire signed [47:0] mul_temp_3; // sfix48_En30
  wire signed [46:0] product_phase3_1; // sfix47_En30
  wire signed [47:0] mul_temp_4; // sfix48_En30
  wire signed [46:0] product_phase4_1; // sfix47_En30
  wire signed [47:0] mul_temp_5; // sfix48_En30
  wire signed [47:0] polyadd_1; // sfix48_En30
  wire signed [46:0] add_signext; // sfix47_En30
  wire signed [46:0] add_signext_1; // sfix47_En30
  wire signed [47:0] polyadd_1_1; // sfix48_En30
  wire signed [47:0] add_signext_2; // sfix48_En30
  wire signed [47:0] add_signext_3; // sfix48_En30
  wire signed [48:0] add_temp; // sfix49_En30
  wire signed [47:0] polyadd_1_2; // sfix48_En30
  wire signed [47:0] add_signext_4; // sfix48_En30
  wire signed [47:0] add_signext_5; // sfix48_En30
  wire signed [48:0] add_temp_1; // sfix49_En30
  wire signed [47:0] polyadd_2; // sfix48_En30
  wire signed [46:0] add_signext_6; // sfix47_En30
  wire signed [46:0] add_signext_7; // sfix47_En30
  reg  signed [47:0] delay_pipeline [0:0] ; // sfix48_En30
  wire signed [47:0] sumvector [0:0] ; // sfix48_En30
  wire signed [47:0] finalsum; // sfix48_En30
  wire signed [47:0] add_signext_8; // sfix48_En30
  wire signed [47:0] add_signext_9; // sfix48_En30
  wire signed [48:0] add_temp_2; // sfix49_En30
  reg  signed [47:0] output_register; // sfix48_En30

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 2'b00;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 2'b11) begin
            cur_count <= 2'b00;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 2'b01 && clk_enable == 1'b1)? 1 : 0;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  //   ---------------- Input Registers ----------------

  assign input_mux[0] = (cur_count==2'b00) ? filter_in : input_pipeline[0];
  assign input_mux[1] = (cur_count==2'b11) ? filter_in : input_pipeline[1];
  assign input_mux[2] = (cur_count==2'b10) ? filter_in : input_pipeline[2];
  assign input_mux[3] = (cur_count==2'b01) ? filter_in : input_pipeline[3];
  always @ (posedge clk or posedge reset)
    begin: input_pipeline_process4
      if (reset == 1'b1) begin
        input_pipeline[0] <= 0;
        input_pipeline[1] <= 0;
        input_pipeline[2] <= 0;
        input_pipeline[3] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_pipeline[0] <= input_mux[0];
          input_pipeline[1] <= input_mux[1];
          input_pipeline[2] <= input_mux[2];
          input_pipeline[3] <= input_mux[3];
        end
      end
    end // input_pipeline_process4

  assign mul_temp = input_pipeline[0] * coeffphase1_1;
  assign product_phase1_1 = mul_temp[46:0];

  assign mul_temp_1 = input_pipeline[0] * coeffphase1_2;
  assign product_phase1_2 = mul_temp_1[46:0];

  assign mul_temp_2 = input_pipeline[1] * coeffphase2_1;
  assign product_phase2_1 = mul_temp_2[46:0];

  assign mul_temp_3 = input_pipeline[1] * coeffphase2_2;
  assign product_phase2_2 = mul_temp_3[46:0];

  assign mul_temp_4 = input_pipeline[2] * coeffphase3_1;
  assign product_phase3_1 = mul_temp_4[46:0];

  assign mul_temp_5 = input_pipeline[3] * coeffphase4_1;
  assign product_phase4_1 = mul_temp_5[46:0];

  assign add_signext = product_phase1_1;
  assign add_signext_1 = product_phase2_1;
  assign polyadd_1 = add_signext + add_signext_1;

  assign add_signext_2 = polyadd_1;
  assign add_signext_3 = $signed({{1{product_phase3_1[46]}}, product_phase3_1});
  assign add_temp = add_signext_2 + add_signext_3;
  assign polyadd_1_1 = add_temp[47:0];

  assign add_signext_4 = polyadd_1_1;
  assign add_signext_5 = $signed({{1{product_phase4_1[46]}}, product_phase4_1});
  assign add_temp_1 = add_signext_4 + add_signext_5;
  assign polyadd_1_2 = add_temp_1[47:0];

  assign add_signext_6 = product_phase1_2;
  assign add_signext_7 = product_phase2_2;
  assign polyadd_2 = add_signext_6 + add_signext_7;

  always @ (posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          delay_pipeline[0] <= sumvector[0];
        end
      end
    end // Delay_Pipeline_process

  assign add_signext_8 = polyadd_1_2;
  assign add_signext_9 = delay_pipeline[0];
  assign add_temp_2 = add_signext_8 + add_signext_9;
  assign finalsum = add_temp_2[47:0];

  assign sumvector[0] = polyadd_2;

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= finalsum;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // cfird_4
