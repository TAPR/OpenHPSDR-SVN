// -------------------------------------------------------------
//
// Module: CIC6_260
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-02-09 12:55:33
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CIC6_260
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// CastBeforeSum: On
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure        : Cascaded Integrator-Comb Decimator
// Decimation Factor       : 260
// Differential Delay      : 1
// Number of Sections      : 6
// Stable                  : Yes
// Linear Phase            : Yes (Type 1)
//
// Input                   : s20,15
// Output                  : s24,-30
// Filter Internals        : Minimum Word Lengths
//   Integrator Section 1  : s66,12
//   Integrator Section 2  : s66,12
//   Integrator Section 3  : s54,0
//   Integrator Section 4  : s47,-7
//   Integrator Section 5  : s41,-13
//   Integrator Section 6  : s34,-20
//   Comb Section 1        : s31,-23
//   Comb Section 2        : s30,-24
//   Comb Section 3        : s29,-25
//   Comb Section 4        : s28,-26
//   Comb Section 5        : s28,-26
//   Comb Section 6        : s27,-27
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 12
// Number of States      : 12
// MultPerInputSample    : 0
// AddPerInputSample     : 6.0231
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC6_260 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [19:0] filter_in; //sfix20_En15
  output  signed [23:0] filter_out; //sfix24_E30
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: CIC6_260
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [8:0] cur_count; // ufix9
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [19:0] input_register; // sfix20_En15
  //   -- Section 1 Signals 
  wire signed [19:0] section_in1; // sfix20_En15
  wire signed [65:0] section_cast1; // sfix66_En12
  wire signed [65:0] sum1; // sfix66_En12
  reg  signed [65:0] section_out1; // sfix66_En12
  wire signed [65:0] add_cast; // sfix66_En12
  wire signed [65:0] add_cast_1; // sfix66_En12
  wire signed [66:0] add_temp; // sfix67_En12
  //   -- Section 2 Signals 
  wire signed [65:0] section_in2; // sfix66_En12
  wire signed [65:0] sum2; // sfix66_En12
  reg  signed [65:0] section_out2; // sfix66_En12
  wire signed [65:0] add_cast_2; // sfix66_En12
  wire signed [65:0] add_cast_3; // sfix66_En12
  wire signed [66:0] add_temp_1; // sfix67_En12
  //   -- Section 3 Signals 
  wire signed [65:0] section_in3; // sfix66_En12
  wire signed [53:0] section_cast3; // sfix54
  wire signed [53:0] sum3; // sfix54
  reg  signed [53:0] section_out3; // sfix54
  wire signed [53:0] add_cast_4; // sfix54
  wire signed [53:0] add_cast_5; // sfix54
  wire signed [54:0] add_temp_2; // sfix55
  //   -- Section 4 Signals 
  wire signed [53:0] section_in4; // sfix54
  wire signed [46:0] section_cast4; // sfix47_E7
  wire signed [46:0] sum4; // sfix47_E7
  reg  signed [46:0] section_out4; // sfix47_E7
  wire signed [46:0] add_cast_6; // sfix47_E7
  wire signed [46:0] add_cast_7; // sfix47_E7
  wire signed [47:0] add_temp_3; // sfix48_E7
  //   -- Section 5 Signals 
  wire signed [46:0] section_in5; // sfix47_E7
  wire signed [40:0] section_cast5; // sfix41_E13
  wire signed [40:0] sum5; // sfix41_E13
  reg  signed [40:0] section_out5; // sfix41_E13
  wire signed [40:0] add_cast_8; // sfix41_E13
  wire signed [40:0] add_cast_9; // sfix41_E13
  wire signed [41:0] add_temp_4; // sfix42_E13
  //   -- Section 6 Signals 
  wire signed [40:0] section_in6; // sfix41_E13
  wire signed [33:0] section_cast6; // sfix34_E20
  wire signed [33:0] sum6; // sfix34_E20
  reg  signed [33:0] section_out6; // sfix34_E20
  wire signed [33:0] add_cast_10; // sfix34_E20
  wire signed [33:0] add_cast_11; // sfix34_E20
  wire signed [34:0] add_temp_5; // sfix35_E20
  //   -- Section 7 Signals 
  wire signed [33:0] section_in7; // sfix34_E20
  wire signed [30:0] section_cast7; // sfix31_E23
  reg  signed [30:0] diff1; // sfix31_E23
  wire signed [30:0] section_out7; // sfix31_E23
  wire signed [30:0] sub_cast; // sfix31_E23
  wire signed [30:0] sub_cast_1; // sfix31_E23
  wire signed [31:0] sub_temp; // sfix32_E23
  //   -- Section 8 Signals 
  wire signed [30:0] section_in8; // sfix31_E23
  wire signed [29:0] section_cast8; // sfix30_E24
  reg  signed [29:0] diff2; // sfix30_E24
  wire signed [29:0] section_out8; // sfix30_E24
  wire signed [29:0] sub_cast_2; // sfix30_E24
  wire signed [29:0] sub_cast_3; // sfix30_E24
  wire signed [30:0] sub_temp_1; // sfix31_E24
  //   -- Section 9 Signals 
  wire signed [29:0] section_in9; // sfix30_E24
  wire signed [28:0] section_cast9; // sfix29_E25
  reg  signed [28:0] diff3; // sfix29_E25
  wire signed [28:0] section_out9; // sfix29_E25
  wire signed [28:0] sub_cast_4; // sfix29_E25
  wire signed [28:0] sub_cast_5; // sfix29_E25
  wire signed [29:0] sub_temp_2; // sfix30_E25
  //   -- Section 10 Signals 
  wire signed [28:0] section_in10; // sfix29_E25
  wire signed [27:0] section_cast10; // sfix28_E26
  reg  signed [27:0] diff4; // sfix28_E26
  wire signed [27:0] section_out10; // sfix28_E26
  wire signed [27:0] sub_cast_6; // sfix28_E26
  wire signed [27:0] sub_cast_7; // sfix28_E26
  wire signed [28:0] sub_temp_3; // sfix29_E26
  //   -- Section 11 Signals 
  wire signed [27:0] section_in11; // sfix28_E26
  reg  signed [27:0] diff5; // sfix28_E26
  wire signed [27:0] section_out11; // sfix28_E26
  wire signed [27:0] sub_cast_8; // sfix28_E26
  wire signed [27:0] sub_cast_9; // sfix28_E26
  wire signed [28:0] sub_temp_4; // sfix29_E26
  //   -- Section 12 Signals 
  wire signed [27:0] section_in12; // sfix28_E26
  wire signed [26:0] section_cast12; // sfix27_E27
  reg  signed [26:0] diff6; // sfix27_E27
  wire signed [26:0] section_out12; // sfix27_E27
  wire signed [26:0] sub_cast_10; // sfix27_E27
  wire signed [26:0] sub_cast_11; // sfix27_E27
  wire signed [27:0] sub_temp_5; // sfix28_E27
  wire signed [23:0] output_typeconvert; // sfix24_E30
  //   
  reg  signed [23:0] output_register; // sfix24_E30

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 9'b000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 9'b100000011) begin
            cur_count <= 9'b000000000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 9'b000000001 && clk_enable == 1'b1)? 1 : 0;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({{49{section_in1[19]}}, section_in1[19:3]});

  assign add_cast = section_cast1;
  assign add_cast_1 = section_out1;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign add_cast_2 = section_in2;
  assign add_cast_3 = section_out2;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[65:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = section_in3[65:12];

  assign add_cast_4 = section_cast3;
  assign add_cast_5 = section_out3;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[53:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Integrator ------------------

  assign section_in4 = section_out3;

  assign section_cast4 = section_in4[53:7];

  assign add_cast_6 = section_cast4;
  assign add_cast_7 = section_out4;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[46:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section4
      if (reset == 1'b1) begin
        section_out4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out4 <= sum4;
        end
      end
    end // integrator_delay_section4

  //   ------------------ Section # 5 : Integrator ------------------

  assign section_in5 = section_out4;

  assign section_cast5 = section_in5[46:6];

  assign add_cast_8 = section_cast5;
  assign add_cast_9 = section_out5;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[40:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section5
      if (reset == 1'b1) begin
        section_out5 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out5 <= sum5;
        end
      end
    end // integrator_delay_section5

  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = section_out5;

  assign section_cast6 = section_in6[40:7];

  assign add_cast_10 = section_cast6;
  assign add_cast_11 = section_out6;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[33:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out6 <= sum6;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Comb ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = section_in7[33:3];

  assign sub_cast = section_cast7;
  assign sub_cast_1 = diff1;
  assign sub_temp = sub_cast - sub_cast_1;
  assign section_out7 = sub_temp[30:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section7
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff1 <= section_cast7;
        end
      end
    end // comb_delay_section7

  //   ------------------ Section # 8 : Comb ------------------

  assign section_in8 = section_out7;

  assign section_cast8 = section_in8[30:1];

  assign sub_cast_2 = section_cast8;
  assign sub_cast_3 = diff2;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign section_out8 = sub_temp_1[29:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section8
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff2 <= section_cast8;
        end
      end
    end // comb_delay_section8

  //   ------------------ Section # 9 : Comb ------------------

  assign section_in9 = section_out8;

  assign section_cast9 = section_in9[29:1];

  assign sub_cast_4 = section_cast9;
  assign sub_cast_5 = diff3;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign section_out9 = sub_temp_2[28:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section9
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff3 <= section_cast9;
        end
      end
    end // comb_delay_section9

  //   ------------------ Section # 10 : Comb ------------------

  assign section_in10 = section_out9;

  assign section_cast10 = section_in10[28:1];

  assign sub_cast_6 = section_cast10;
  assign sub_cast_7 = diff4;
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign section_out10 = sub_temp_3[27:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section10
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff4 <= section_cast10;
        end
      end
    end // comb_delay_section10

  //   ------------------ Section # 11 : Comb ------------------

  assign section_in11 = section_out10;

  assign sub_cast_8 = section_in11;
  assign sub_cast_9 = diff5;
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign section_out11 = sub_temp_4[27:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section11
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff5 <= section_in11;
        end
      end
    end // comb_delay_section11

  //   ------------------ Section # 12 : Comb ------------------

  assign section_in12 = section_out11;

  assign section_cast12 = section_in12[27:1];

  assign sub_cast_10 = section_cast12;
  assign sub_cast_11 = diff6;
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign section_out12 = sub_temp_5[26:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section12
      if (reset == 1'b1) begin
        diff6 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff6 <= section_cast12;
        end
      end
    end // comb_delay_section12

  assign output_typeconvert = section_out12[26:3];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // CIC6_260
