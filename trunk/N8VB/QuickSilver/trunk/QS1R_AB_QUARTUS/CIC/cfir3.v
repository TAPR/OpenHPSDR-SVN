// -------------------------------------------------------------
//
// Module: cfir3
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-30 11:06:50
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: cfir3
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// FIRAdderStyle: tree
// SerialPartition: -1
// AddPipelineRegisters: On
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: impulse step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 4
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s32,15 -> [-65536 65536)
// Filter Internals  : Full Precision
//   Output          : s48,30 -> [-131072 131072)  (auto determined)
//   Product         : s47,30 -> [-65536 65536)  (auto determined)
//   Accumulator     : s48,30 -> [-131072 131072)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cfir3 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32_En15
  output  signed [47:0] filter_out; //sfix48_En30

  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b1101111010110100; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b0101110110001111; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b0101110110001111; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b1101111010110100; //sfix16_En15

  // Signals
  reg  signed [31:0] delay_pipeline [0:3] ; // sfix32_En15
  wire signed [46:0] product4; // sfix47_En30
  wire signed [47:0] mul_temp; // sfix48_En30
  wire signed [46:0] product3; // sfix47_En30
  wire signed [47:0] mul_temp_1; // sfix48_En30
  wire signed [46:0] product2; // sfix47_En30
  wire signed [47:0] mul_temp_2; // sfix48_En30
  wire signed [46:0] product1; // sfix47_En30
  wire signed [47:0] mul_temp_3; // sfix48_En30
  wire signed [47:0] sumvector1 [0:1] ; // sfix48_En30
  wire signed [46:0] add_signext; // sfix47_En30
  wire signed [46:0] add_signext_1; // sfix47_En30
  wire signed [46:0] add_signext_2; // sfix47_En30
  wire signed [46:0] add_signext_3; // sfix47_En30
  reg  signed [47:0] sumdelay_pipeline1 [0:1] ; // sfix48_En30
  wire signed [47:0] sum2; // sfix48_En30
  wire signed [47:0] add_signext_4; // sfix48_En30
  wire signed [47:0] add_signext_5; // sfix48_En30
  wire signed [48:0] add_temp; // sfix49_En30
  reg  signed [47:0] output_register; // sfix48_En30

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[3] * coeff4;
  assign product4 = mul_temp[46:0];

  assign mul_temp_1 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_1[46:0];

  assign mul_temp_2 = delay_pipeline[1] * coeff2;
  assign product2 = mul_temp_2[46:0];

  assign mul_temp_3 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_3[46:0];

  assign add_signext = product4;
  assign add_signext_1 = product3;
  assign sumvector1[0] = add_signext + add_signext_1;

  assign add_signext_2 = product2;
  assign add_signext_3 = product1;
  assign sumvector1[1] = add_signext_2 + add_signext_3;

  always @ (posedge clk or posedge reset)
    begin: sumdelay_pipeline_process1
      if (reset == 1'b1) begin
        sumdelay_pipeline1[0] <= 0;
        sumdelay_pipeline1[1] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumdelay_pipeline1[0] <= sumvector1[0];
          sumdelay_pipeline1[1] <= sumvector1[1];
        end
      end
    end // sumdelay_pipeline_process1

  assign add_signext_4 = sumdelay_pipeline1[0];
  assign add_signext_5 = sumdelay_pipeline1[1];
  assign add_temp = add_signext_4 + add_signext_5;
  assign sum2 = add_temp[47:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum2;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // cfir3
