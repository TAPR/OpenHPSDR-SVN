// -------------------------------------------------------------
//
// Module: CIC10_260
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-02-09 15:27:06
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: CIC10_260
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// CastBeforeSum: On
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure         : Cascaded Integrator-Comb Decimator
// Decimation Factor        : 260
// Differential Delay       : 1
// Number of Sections       : 10
// Stable                   : Yes
// Linear Phase             : No
//
// Input                    : s16,15
// Output                   : s24,-58
// Filter Internals         : Minimum Word Lengths
//   Integrator Section 1   : s70,-12
//   Integrator Section 2   : s70,-12
//   Integrator Section 3   : s71,-11
//   Integrator Section 4   : s71,-11
//   Integrator Section 5   : s71,-11
//   Integrator Section 6   : s71,-11
//   Integrator Section 7   : s63,-19
//   Integrator Section 8   : s51,-31
//   Integrator Section 9   : s45,-37
//   Integrator Section 10  : s38,-44
//   Comb Section 1         : s35,-47
//   Comb Section 2         : s34,-48
//   Comb Section 3         : s33,-49
//   Comb Section 4         : s33,-49
//   Comb Section 5         : s32,-50
//   Comb Section 6         : s31,-51
//   Comb Section 7         : s30,-52
//   Comb Section 8         : s29,-53
//   Comb Section 9         : s28,-54
//   Comb Section 10        : s27,-55
//
// Implementation Cost
// Number of Multipliers : 0
// Number of Adders      : 20
// Number of States      : 20
// MultPerInputSample    : 0
// AddPerInputSample     : 10.0385
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module CIC10_260 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16_En15
  output  signed [23:0] filter_out; //sfix24_E58
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: CIC10_260
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  // Signals
  reg  [8:0] cur_count; // ufix9
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  //   
  reg  signed [15:0] input_register; // sfix16_En15
  //   -- Section 1 Signals 
  wire signed [15:0] section_in1; // sfix16_En15
  wire signed [69:0] section_cast1; // sfix70_E12
  wire signed [69:0] sum1; // sfix70_E12
  reg  signed [69:0] section_out1; // sfix70_E12
  wire signed [69:0] add_cast; // sfix70_E12
  wire signed [69:0] add_cast_1; // sfix70_E12
  wire signed [70:0] add_temp; // sfix71_E12
  //   -- Section 2 Signals 
  wire signed [69:0] section_in2; // sfix70_E12
  wire signed [69:0] sum2; // sfix70_E12
  reg  signed [69:0] section_out2; // sfix70_E12
  wire signed [69:0] add_cast_2; // sfix70_E12
  wire signed [69:0] add_cast_3; // sfix70_E12
  wire signed [70:0] add_temp_1; // sfix71_E12
  //   -- Section 3 Signals 
  wire signed [69:0] section_in3; // sfix70_E12
  wire signed [70:0] section_cast3; // sfix71_E11
  wire signed [70:0] sum3; // sfix71_E11
  reg  signed [70:0] section_out3; // sfix71_E11
  wire signed [70:0] add_cast_4; // sfix71_E11
  wire signed [70:0] add_cast_5; // sfix71_E11
  wire signed [71:0] add_temp_2; // sfix72_E11
  //   -- Section 4 Signals 
  wire signed [70:0] section_in4; // sfix71_E11
  wire signed [70:0] sum4; // sfix71_E11
  reg  signed [70:0] section_out4; // sfix71_E11
  wire signed [70:0] add_cast_6; // sfix71_E11
  wire signed [70:0] add_cast_7; // sfix71_E11
  wire signed [71:0] add_temp_3; // sfix72_E11
  //   -- Section 5 Signals 
  wire signed [70:0] section_in5; // sfix71_E11
  wire signed [70:0] sum5; // sfix71_E11
  reg  signed [70:0] section_out5; // sfix71_E11
  wire signed [70:0] add_cast_8; // sfix71_E11
  wire signed [70:0] add_cast_9; // sfix71_E11
  wire signed [71:0] add_temp_4; // sfix72_E11
  //   -- Section 6 Signals 
  wire signed [70:0] section_in6; // sfix71_E11
  wire signed [70:0] sum6; // sfix71_E11
  reg  signed [70:0] section_out6; // sfix71_E11
  wire signed [70:0] add_cast_10; // sfix71_E11
  wire signed [70:0] add_cast_11; // sfix71_E11
  wire signed [71:0] add_temp_5; // sfix72_E11
  //   -- Section 7 Signals 
  wire signed [70:0] section_in7; // sfix71_E11
  wire signed [62:0] section_cast7; // sfix63_E19
  wire signed [62:0] sum7; // sfix63_E19
  reg  signed [62:0] section_out7; // sfix63_E19
  wire signed [62:0] add_cast_12; // sfix63_E19
  wire signed [62:0] add_cast_13; // sfix63_E19
  wire signed [63:0] add_temp_6; // sfix64_E19
  //   -- Section 8 Signals 
  wire signed [62:0] section_in8; // sfix63_E19
  wire signed [50:0] section_cast8; // sfix51_E31
  wire signed [50:0] sum8; // sfix51_E31
  reg  signed [50:0] section_out8; // sfix51_E31
  wire signed [50:0] add_cast_14; // sfix51_E31
  wire signed [50:0] add_cast_15; // sfix51_E31
  wire signed [51:0] add_temp_7; // sfix52_E31
  //   -- Section 9 Signals 
  wire signed [50:0] section_in9; // sfix51_E31
  wire signed [44:0] section_cast9; // sfix45_E37
  wire signed [44:0] sum9; // sfix45_E37
  reg  signed [44:0] section_out9; // sfix45_E37
  wire signed [44:0] add_cast_16; // sfix45_E37
  wire signed [44:0] add_cast_17; // sfix45_E37
  wire signed [45:0] add_temp_8; // sfix46_E37
  //   -- Section 10 Signals 
  wire signed [44:0] section_in10; // sfix45_E37
  wire signed [37:0] section_cast10; // sfix38_E44
  wire signed [37:0] sum10; // sfix38_E44
  reg  signed [37:0] section_out10; // sfix38_E44
  wire signed [37:0] add_cast_18; // sfix38_E44
  wire signed [37:0] add_cast_19; // sfix38_E44
  wire signed [38:0] add_temp_9; // sfix39_E44
  //   -- Section 11 Signals 
  wire signed [37:0] section_in11; // sfix38_E44
  wire signed [34:0] section_cast11; // sfix35_E47
  reg  signed [34:0] diff1; // sfix35_E47
  wire signed [34:0] section_out11; // sfix35_E47
  wire signed [34:0] sub_cast; // sfix35_E47
  wire signed [34:0] sub_cast_1; // sfix35_E47
  wire signed [35:0] sub_temp; // sfix36_E47
  //   -- Section 12 Signals 
  wire signed [34:0] section_in12; // sfix35_E47
  wire signed [33:0] section_cast12; // sfix34_E48
  reg  signed [33:0] diff2; // sfix34_E48
  wire signed [33:0] section_out12; // sfix34_E48
  wire signed [33:0] sub_cast_2; // sfix34_E48
  wire signed [33:0] sub_cast_3; // sfix34_E48
  wire signed [34:0] sub_temp_1; // sfix35_E48
  //   -- Section 13 Signals 
  wire signed [33:0] section_in13; // sfix34_E48
  wire signed [32:0] section_cast13; // sfix33_E49
  reg  signed [32:0] diff3; // sfix33_E49
  wire signed [32:0] section_out13; // sfix33_E49
  wire signed [32:0] sub_cast_4; // sfix33_E49
  wire signed [32:0] sub_cast_5; // sfix33_E49
  wire signed [33:0] sub_temp_2; // sfix34_E49
  //   -- Section 14 Signals 
  wire signed [32:0] section_in14; // sfix33_E49
  reg  signed [32:0] diff4; // sfix33_E49
  wire signed [32:0] section_out14; // sfix33_E49
  wire signed [32:0] sub_cast_6; // sfix33_E49
  wire signed [32:0] sub_cast_7; // sfix33_E49
  wire signed [33:0] sub_temp_3; // sfix34_E49
  //   -- Section 15 Signals 
  wire signed [32:0] section_in15; // sfix33_E49
  wire signed [31:0] section_cast15; // sfix32_E50
  reg  signed [31:0] diff5; // sfix32_E50
  wire signed [31:0] section_out15; // sfix32_E50
  wire signed [31:0] sub_cast_8; // sfix32_E50
  wire signed [31:0] sub_cast_9; // sfix32_E50
  wire signed [32:0] sub_temp_4; // sfix33_E50
  //   -- Section 16 Signals 
  wire signed [31:0] section_in16; // sfix32_E50
  wire signed [30:0] section_cast16; // sfix31_E51
  reg  signed [30:0] diff6; // sfix31_E51
  wire signed [30:0] section_out16; // sfix31_E51
  wire signed [30:0] sub_cast_10; // sfix31_E51
  wire signed [30:0] sub_cast_11; // sfix31_E51
  wire signed [31:0] sub_temp_5; // sfix32_E51
  //   -- Section 17 Signals 
  wire signed [30:0] section_in17; // sfix31_E51
  wire signed [29:0] section_cast17; // sfix30_E52
  reg  signed [29:0] diff7; // sfix30_E52
  wire signed [29:0] section_out17; // sfix30_E52
  wire signed [29:0] sub_cast_12; // sfix30_E52
  wire signed [29:0] sub_cast_13; // sfix30_E52
  wire signed [30:0] sub_temp_6; // sfix31_E52
  //   -- Section 18 Signals 
  wire signed [29:0] section_in18; // sfix30_E52
  wire signed [28:0] section_cast18; // sfix29_E53
  reg  signed [28:0] diff8; // sfix29_E53
  wire signed [28:0] section_out18; // sfix29_E53
  wire signed [28:0] sub_cast_14; // sfix29_E53
  wire signed [28:0] sub_cast_15; // sfix29_E53
  wire signed [29:0] sub_temp_7; // sfix30_E53
  //   -- Section 19 Signals 
  wire signed [28:0] section_in19; // sfix29_E53
  wire signed [27:0] section_cast19; // sfix28_E54
  reg  signed [27:0] diff9; // sfix28_E54
  wire signed [27:0] section_out19; // sfix28_E54
  wire signed [27:0] sub_cast_16; // sfix28_E54
  wire signed [27:0] sub_cast_17; // sfix28_E54
  wire signed [28:0] sub_temp_8; // sfix29_E54
  //   -- Section 20 Signals 
  wire signed [27:0] section_in20; // sfix28_E54
  wire signed [26:0] section_cast20; // sfix27_E55
  reg  signed [26:0] diff10; // sfix27_E55
  wire signed [26:0] section_out20; // sfix27_E55
  wire signed [26:0] sub_cast_18; // sfix27_E55
  wire signed [26:0] sub_cast_19; // sfix27_E55
  wire signed [27:0] sub_temp_9; // sfix28_E55
  wire signed [23:0] output_typeconvert; // sfix24_E58
  //   
  reg  signed [23:0] output_register; // sfix24_E58

  // Block Statements
  //   ------------------ CE Output Generation ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        cur_count <= 9'b000000000;
      end
      else begin
        if (clk_enable == 1'b1) begin
          if (cur_count == 9'b100000011) begin
            cur_count <= 9'b000000000;
          end
          else begin
            cur_count <= cur_count + 1;
          end
        end
      end
    end // ce_output

  assign  phase_1 = (cur_count == 9'b000000001 && clk_enable == 1'b1)? 1 : 0;

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  //   ------------------ Input Register ------------------

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  //   ------------------ Section # 1 : Integrator ------------------

  assign section_in1 = input_register;

  assign section_cast1 = $signed({70{section_in1[15]}});

  assign add_cast = section_cast1;
  assign add_cast_1 = section_out1;
  assign add_temp = add_cast + add_cast_1;
  assign sum1 = add_temp[69:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section1
      if (reset == 1'b1) begin
        section_out1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out1 <= sum1;
        end
      end
    end // integrator_delay_section1

  //   ------------------ Section # 2 : Integrator ------------------

  assign section_in2 = section_out1;

  assign add_cast_2 = section_in2;
  assign add_cast_3 = section_out2;
  assign add_temp_1 = add_cast_2 + add_cast_3;
  assign sum2 = add_temp_1[69:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section2
      if (reset == 1'b1) begin
        section_out2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out2 <= sum2;
        end
      end
    end // integrator_delay_section2

  //   ------------------ Section # 3 : Integrator ------------------

  assign section_in3 = section_out2;

  assign section_cast3 = $signed({section_in3[69:0], 1'b0});

  assign add_cast_4 = section_cast3;
  assign add_cast_5 = section_out3;
  assign add_temp_2 = add_cast_4 + add_cast_5;
  assign sum3 = add_temp_2[70:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section3
      if (reset == 1'b1) begin
        section_out3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out3 <= sum3;
        end
      end
    end // integrator_delay_section3

  //   ------------------ Section # 4 : Integrator ------------------

  assign section_in4 = section_out3;

  assign add_cast_6 = section_in4;
  assign add_cast_7 = section_out4;
  assign add_temp_3 = add_cast_6 + add_cast_7;
  assign sum4 = add_temp_3[70:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section4
      if (reset == 1'b1) begin
        section_out4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out4 <= sum4;
        end
      end
    end // integrator_delay_section4

  //   ------------------ Section # 5 : Integrator ------------------

  assign section_in5 = section_out4;

  assign add_cast_8 = section_in5;
  assign add_cast_9 = section_out5;
  assign add_temp_4 = add_cast_8 + add_cast_9;
  assign sum5 = add_temp_4[70:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section5
      if (reset == 1'b1) begin
        section_out5 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out5 <= sum5;
        end
      end
    end // integrator_delay_section5

  //   ------------------ Section # 6 : Integrator ------------------

  assign section_in6 = section_out5;

  assign add_cast_10 = section_in6;
  assign add_cast_11 = section_out6;
  assign add_temp_5 = add_cast_10 + add_cast_11;
  assign sum6 = add_temp_5[70:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section6
      if (reset == 1'b1) begin
        section_out6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out6 <= sum6;
        end
      end
    end // integrator_delay_section6

  //   ------------------ Section # 7 : Integrator ------------------

  assign section_in7 = section_out6;

  assign section_cast7 = section_in7[70:8];

  assign add_cast_12 = section_cast7;
  assign add_cast_13 = section_out7;
  assign add_temp_6 = add_cast_12 + add_cast_13;
  assign sum7 = add_temp_6[62:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section7
      if (reset == 1'b1) begin
        section_out7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out7 <= sum7;
        end
      end
    end // integrator_delay_section7

  //   ------------------ Section # 8 : Integrator ------------------

  assign section_in8 = section_out7;

  assign section_cast8 = section_in8[62:12];

  assign add_cast_14 = section_cast8;
  assign add_cast_15 = section_out8;
  assign add_temp_7 = add_cast_14 + add_cast_15;
  assign sum8 = add_temp_7[50:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section8
      if (reset == 1'b1) begin
        section_out8 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out8 <= sum8;
        end
      end
    end // integrator_delay_section8

  //   ------------------ Section # 9 : Integrator ------------------

  assign section_in9 = section_out8;

  assign section_cast9 = section_in9[50:6];

  assign add_cast_16 = section_cast9;
  assign add_cast_17 = section_out9;
  assign add_temp_8 = add_cast_16 + add_cast_17;
  assign sum9 = add_temp_8[44:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section9
      if (reset == 1'b1) begin
        section_out9 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out9 <= sum9;
        end
      end
    end // integrator_delay_section9

  //   ------------------ Section # 10 : Integrator ------------------

  assign section_in10 = section_out9;

  assign section_cast10 = section_in10[44:7];

  assign add_cast_18 = section_cast10;
  assign add_cast_19 = section_out10;
  assign add_temp_9 = add_cast_18 + add_cast_19;
  assign sum10 = add_temp_9[37:0];

  always @ (posedge clk or posedge reset)
    begin: integrator_delay_section10
      if (reset == 1'b1) begin
        section_out10 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          section_out10 <= sum10;
        end
      end
    end // integrator_delay_section10

  //   ------------------ Section # 11 : Comb ------------------

  assign section_in11 = section_out10;

  assign section_cast11 = section_in11[37:3];

  assign sub_cast = section_cast11;
  assign sub_cast_1 = diff1;
  assign sub_temp = sub_cast - sub_cast_1;
  assign section_out11 = sub_temp[34:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section11
      if (reset == 1'b1) begin
        diff1 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff1 <= section_cast11;
        end
      end
    end // comb_delay_section11

  //   ------------------ Section # 12 : Comb ------------------

  assign section_in12 = section_out11;

  assign section_cast12 = section_in12[34:1];

  assign sub_cast_2 = section_cast12;
  assign sub_cast_3 = diff2;
  assign sub_temp_1 = sub_cast_2 - sub_cast_3;
  assign section_out12 = sub_temp_1[33:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section12
      if (reset == 1'b1) begin
        diff2 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff2 <= section_cast12;
        end
      end
    end // comb_delay_section12

  //   ------------------ Section # 13 : Comb ------------------

  assign section_in13 = section_out12;

  assign section_cast13 = section_in13[33:1];

  assign sub_cast_4 = section_cast13;
  assign sub_cast_5 = diff3;
  assign sub_temp_2 = sub_cast_4 - sub_cast_5;
  assign section_out13 = sub_temp_2[32:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section13
      if (reset == 1'b1) begin
        diff3 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff3 <= section_cast13;
        end
      end
    end // comb_delay_section13

  //   ------------------ Section # 14 : Comb ------------------

  assign section_in14 = section_out13;

  assign sub_cast_6 = section_in14;
  assign sub_cast_7 = diff4;
  assign sub_temp_3 = sub_cast_6 - sub_cast_7;
  assign section_out14 = sub_temp_3[32:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section14
      if (reset == 1'b1) begin
        diff4 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff4 <= section_in14;
        end
      end
    end // comb_delay_section14

  //   ------------------ Section # 15 : Comb ------------------

  assign section_in15 = section_out14;

  assign section_cast15 = section_in15[32:1];

  assign sub_cast_8 = section_cast15;
  assign sub_cast_9 = diff5;
  assign sub_temp_4 = sub_cast_8 - sub_cast_9;
  assign section_out15 = sub_temp_4[31:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section15
      if (reset == 1'b1) begin
        diff5 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff5 <= section_cast15;
        end
      end
    end // comb_delay_section15

  //   ------------------ Section # 16 : Comb ------------------

  assign section_in16 = section_out15;

  assign section_cast16 = section_in16[31:1];

  assign sub_cast_10 = section_cast16;
  assign sub_cast_11 = diff6;
  assign sub_temp_5 = sub_cast_10 - sub_cast_11;
  assign section_out16 = sub_temp_5[30:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section16
      if (reset == 1'b1) begin
        diff6 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff6 <= section_cast16;
        end
      end
    end // comb_delay_section16

  //   ------------------ Section # 17 : Comb ------------------

  assign section_in17 = section_out16;

  assign section_cast17 = section_in17[30:1];

  assign sub_cast_12 = section_cast17;
  assign sub_cast_13 = diff7;
  assign sub_temp_6 = sub_cast_12 - sub_cast_13;
  assign section_out17 = sub_temp_6[29:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section17
      if (reset == 1'b1) begin
        diff7 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff7 <= section_cast17;
        end
      end
    end // comb_delay_section17

  //   ------------------ Section # 18 : Comb ------------------

  assign section_in18 = section_out17;

  assign section_cast18 = section_in18[29:1];

  assign sub_cast_14 = section_cast18;
  assign sub_cast_15 = diff8;
  assign sub_temp_7 = sub_cast_14 - sub_cast_15;
  assign section_out18 = sub_temp_7[28:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section18
      if (reset == 1'b1) begin
        diff8 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff8 <= section_cast18;
        end
      end
    end // comb_delay_section18

  //   ------------------ Section # 19 : Comb ------------------

  assign section_in19 = section_out18;

  assign section_cast19 = section_in19[28:1];

  assign sub_cast_16 = section_cast19;
  assign sub_cast_17 = diff9;
  assign sub_temp_8 = sub_cast_16 - sub_cast_17;
  assign section_out19 = sub_temp_8[27:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section19
      if (reset == 1'b1) begin
        diff9 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff9 <= section_cast19;
        end
      end
    end // comb_delay_section19

  //   ------------------ Section # 20 : Comb ------------------

  assign section_in20 = section_out19;

  assign section_cast20 = section_in20[27:1];

  assign sub_cast_18 = section_cast20;
  assign sub_cast_19 = diff10;
  assign sub_temp_9 = sub_cast_18 - sub_cast_19;
  assign section_out20 = sub_temp_9[26:0];

  always @ (posedge clk or posedge reset)
    begin: comb_delay_section20
      if (reset == 1'b1) begin
        diff10 <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          diff10 <= section_cast20;
        end
      end
    end // comb_delay_section20

  assign output_typeconvert = section_out20[26:3];

  //   ------------------ Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: output_reg_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // output_reg_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // CIC10_260
