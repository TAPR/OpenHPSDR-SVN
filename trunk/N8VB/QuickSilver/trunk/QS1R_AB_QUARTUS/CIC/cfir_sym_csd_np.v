// -------------------------------------------------------------
//
// Module: cfir_sym_csd_np
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-30 12:43:23
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: cfir_sym_csd_np
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// FIRAdderStyle: tree
// CoeffMultipliers: csd
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: impulse step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form Symmetric FIR
// Filter Length     : 4
// Stable            : Yes
// Linear Phase      : Yes (Type 2)
// Arithmetic        : fixed
// Numerator         : s10,9 -> [-1 1)
// Input             : s32,15 -> [-65536 65536)
// Filter Internals  : Full Precision
//   Output          : s42,24 -> [-131072 131072)  (auto determined)
//   Tap Sum         : s33,15 -> [-131072 131072)  (auto determined)
//   Product         : s42,24 -> [-131072 131072)  (auto determined)
//   Accumulator     : s42,24 -> [-131072 131072)  (auto determined)
//   Round Mode      : No rounding
//   Overflow Mode   : No overflow
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module cfir_sym_csd_np 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32_En15
  output  signed [41:0] filter_out; //sfix42_En24

  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [9:0] coeff1 = 10'b1101110111; //sfix10_En9
  parameter signed [9:0] coeff2 = 10'b0101110111; //sfix10_En9

  // Signals
  reg  signed [31:0] delay_pipeline [0:3] ; // sfix32_En15
  wire signed [32:0] tapsum1; // sfix33_En15
  wire signed [31:0] add_signext; // sfix32_En15
  wire signed [31:0] add_signext_1; // sfix32_En15
  wire signed [32:0] tapsum_mcand; // sfix33_En15
  wire signed [32:0] tapsum2; // sfix33_En15
  wire signed [31:0] add_signext_2; // sfix32_En15
  wire signed [31:0] add_signext_3; // sfix32_En15
  wire signed [32:0] tapsum_mcand_1; // sfix33_En15
  wire signed [41:0] product2; // sfix42_En24
  wire signed [41:0] mulcsd_temp; // sfix42_En24
  wire signed [41:0] product1; // sfix42_En24
  wire signed [40:0] mulcsd_temp_1; // sfix41_En24
  wire signed [41:0] sum1_1; // sfix42_En24
  wire signed [41:0] add_signext_4; // sfix42_En24
  wire signed [41:0] add_signext_5; // sfix42_En24
  wire signed [42:0] add_temp; // sfix43_En24
  reg  signed [41:0] output_register; // sfix42_En24

  // Block Statements
  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b1) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
        end
      end
    end // Delay_Pipeline_process


  assign add_signext = delay_pipeline[0];
  assign add_signext_1 = delay_pipeline[3];
  assign tapsum1 = add_signext + add_signext_1;

  assign tapsum_mcand = tapsum1;

  assign add_signext_2 = delay_pipeline[1];
  assign add_signext_3 = delay_pipeline[2];
  assign tapsum2 = add_signext_2 + add_signext_3;

  assign tapsum_mcand_1 = tapsum2;

  assign mulcsd_temp = 
        $signed({tapsum_mcand_1, 8'b00000000}) +
        $signed({tapsum_mcand_1, 7'b0000000}) -
        $signed({tapsum_mcand_1, 4'b0000}) +
        $signed({tapsum_mcand_1, 3'b000}) -
        tapsum_mcand_1;
  assign product2 = mulcsd_temp;

  assign mulcsd_temp_1 = - (
        $signed({tapsum_mcand, 7'b0000000}) +
        $signed({tapsum_mcand, 3'b000}) +
        tapsum_mcand);
  assign product1 = $signed({{1{mulcsd_temp_1[40]}}, mulcsd_temp_1});

  assign add_signext_4 = product2;
  assign add_signext_5 = product1;
  assign add_temp = add_signext_4 + add_signext_5;
  assign sum1_1 = add_temp[41:0];

  always @ (posedge clk or posedge reset)
    begin: Output_Register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= sum1_1;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // cfir_sym_csd_np
