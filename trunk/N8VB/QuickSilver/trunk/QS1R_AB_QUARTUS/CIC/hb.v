// -------------------------------------------------------------
//
// Module: hb
//
// Generated by MATLAB(R) 7.2 and the Filter Design HDL Coder 1.4.
//
// Generated on: 2007-01-29 16:22:38
//
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// TargetLanguage: Verilog
// Name: hb
// TargetDirectory: C:\Data\QS\QuickSilver\trunk\QS1R_AB_QUARTUS\CIC
// OptimizeForHDL: On
// FIRAdderStyle: tree
// SerialPartition: -1
// InlineConfigurations: Off
// SafeZeroConcat: Off
// TestBenchStimulus: step ramp chirp noise 
//
// Filter Settings:
//
// Discrete-Time FIR Multirate Filter (real)
// -----------------------------------------
// Filter Structure   : Direct-Form FIR Polyphase Decimator
// Decimation Factor  : 2
// Polyphase Length   : 3
// Filter Length      : 5
// Stable             : Yes
// Linear Phase       : Yes (Type 1)
//
// Arithmetic         : fixed
// Numerator          : s16,14 -> [-2 2)
// Input              : s32,15 -> [-65536 65536)
// Filter Internals   : Full Precision
//   Output           : s47,29 -> [-131072 131072)  (auto determined)
//   Product          : s47,29 -> [-131072 131072)  (auto determined)
//   Accumulator      : s47,29 -> [-131072 131072)  (auto determined)
//   Round Mode       : No rounding
//   Overflow Mode    : No overflow
//
// Implementation Cost
// Number of Multipliers : 5
// Number of Adders      : 4
// Number of States      : 4
// MultPerInputSample    : 2.5
// AddPerInputSample     : 2
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hb 
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out,
                ce_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [31:0] filter_in; //sfix32_En15
  output  signed [46:0] filter_out; //sfix47_En29
  output  ce_out; 

////////////////////////////////////////////////////////////////
//Module Architecture: hb
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeffphase1_1 = 16'b1111101100010010; //sfix16_En14
  parameter signed [15:0] coeffphase1_2 = 16'b0100101011011110; //sfix16_En14
  parameter signed [15:0] coeffphase1_3 = 16'b1111101100010010; //sfix16_En14
  parameter signed [15:0] coeffphase2_1 = 16'b1111111010010011; //sfix16_En14
  parameter signed [15:0] coeffphase2_2 = 16'b1111111010010011; //sfix16_En14
  parameter signed [15:0] coeffphase2_3 = 16'b0000000000000000; //sfix16_En14
  // Signals
  reg  [1:0] ring_count; // ufix2
  wire phase_0; // boolean
  wire phase_1; // boolean
  reg  ce_out_reg; // boolean
  reg  signed [31:0] input_register; // sfix32_En15
  reg  signed [31:0] input_pipeline_phase0 [0:1] ; // sfix32_En15
  reg  signed [31:0] input_pipeline_phase1 [0:1] ; // sfix32_En15
  wire signed [46:0] product_phase0_1; // sfix47_En29
  wire signed [47:0] mul_temp; // sfix48_En29
  wire signed [46:0] product_phase0_2; // sfix47_En29
  wire signed [47:0] mul_temp_1; // sfix48_En29
  wire signed [46:0] product_phase0_3; // sfix47_En29
  wire signed [47:0] mul_temp_2; // sfix48_En29
  wire signed [46:0] product_phase1_1; // sfix47_En29
  wire signed [47:0] mul_temp_3; // sfix48_En29
  wire signed [46:0] product_phase1_2; // sfix47_En29
  wire signed [47:0] mul_temp_4; // sfix48_En29
  wire signed [46:0] sum1_1; // sfix47_En29
  wire signed [46:0] add_signext; // sfix47_En29
  wire signed [46:0] add_signext_1; // sfix47_En29
  wire signed [47:0] add_temp; // sfix48_En29
  wire signed [46:0] sum1_2; // sfix47_En29
  wire signed [46:0] add_signext_2; // sfix47_En29
  wire signed [46:0] add_signext_3; // sfix47_En29
  wire signed [47:0] add_temp_1; // sfix48_En29
  wire signed [46:0] sum2_1; // sfix47_En29
  wire signed [46:0] add_signext_4; // sfix47_En29
  wire signed [46:0] add_signext_5; // sfix47_En29
  wire signed [47:0] add_temp_2; // sfix48_En29
  wire signed [46:0] sum3_1; // sfix47_En29
  wire signed [46:0] add_signext_6; // sfix47_En29
  wire signed [46:0] add_signext_7; // sfix47_En29
  wire signed [47:0] add_temp_3; // sfix48_En29
  reg  signed [46:0] output_register; // sfix47_En29

  // Block Statements
  always @ (posedge clk or posedge reset)
    begin: ce_output
      if (reset == 1'b1) begin
        ring_count <= 1;
      end
      else begin
        if (clk_enable == 1'b1) begin
          ring_count <= {ring_count[0], ring_count[1]};
        end
      end
    end // ce_output

  assign  phase_0 = ring_count[0]  && clk_enable;

  assign  phase_1 = ring_count[1]  && clk_enable;

  //   ------------------ CE Output Generation ------------------

  //   ------------------ CE Output Register ------------------

  always @ (posedge clk or posedge reset)
    begin: ce_output_register
      if (reset == 1'b1) begin
        ce_out_reg <= 1'b0;
      end
      else begin
          ce_out_reg <= phase_1;
      end
    end // ce_output_register

  always @ (posedge clk or posedge reset)
    begin: input_reg_process
      if (reset == 1'b1) begin
        input_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          input_register <= filter_in;
        end
      end
    end // input_reg_process

  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase0_process
      if (reset == 1'b1) begin
        input_pipeline_phase0[0] <= 0;
        input_pipeline_phase0[1] <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          input_pipeline_phase0[0] <= input_register;
          input_pipeline_phase0[1] <= input_pipeline_phase0[0];
        end
      end
    end // Delay_Pipeline_Phase0_process


  always @( posedge clk or posedge reset)
    begin: Delay_Pipeline_Phase1_process
      if (reset == 1'b1) begin
        input_pipeline_phase1[0] <= 0;
        input_pipeline_phase1[1] <= 0;
      end
      else begin
        if (phase_0 == 1'b1) begin
          input_pipeline_phase1[0] <= input_register;
          input_pipeline_phase1[1] <= input_pipeline_phase1[0];
        end
      end
    end // Delay_Pipeline_Phase1_process


  assign mul_temp = input_register * coeffphase1_1;
  assign product_phase0_1 = mul_temp[46:0];

  assign mul_temp_1 = input_pipeline_phase0[0] * coeffphase1_2;
  assign product_phase0_2 = mul_temp_1[46:0];

  assign mul_temp_2 = input_pipeline_phase0[1] * coeffphase1_3;
  assign product_phase0_3 = mul_temp_2[46:0];

  assign mul_temp_3 = input_pipeline_phase1[0] * coeffphase2_1;
  assign product_phase1_1 = mul_temp_3[46:0];

  assign mul_temp_4 = input_pipeline_phase1[1] * coeffphase2_2;
  assign product_phase1_2 = mul_temp_4[46:0];

  assign add_signext = product_phase1_1;
  assign add_signext_1 = product_phase1_2;
  assign add_temp = add_signext + add_signext_1;
  assign sum1_1 = add_temp[46:0];

  assign add_signext_2 = product_phase0_1;
  assign add_signext_3 = product_phase0_2;
  assign add_temp_1 = add_signext_2 + add_signext_3;
  assign sum1_2 = add_temp_1[46:0];

  assign add_signext_4 = sum1_1;
  assign add_signext_5 = sum1_2;
  assign add_temp_2 = add_signext_4 + add_signext_5;
  assign sum2_1 = add_temp_2[46:0];

  assign add_signext_6 = sum2_1;
  assign add_signext_7 = product_phase0_3;
  assign add_temp_3 = add_signext_6 + add_signext_7;
  assign sum3_1 = add_temp_3[46:0];

  always @ (posedge clk or posedge reset)
    begin: output_register_process
      if (reset == 1'b1) begin
        output_register <= 0;
      end
      else begin
        if (phase_1 == 1'b1) begin
          output_register <= sum3_1;
        end
      end
    end // output_register_process

  // Assignment Statements
  assign ce_out = ce_out_reg;
  assign filter_out = output_register;
endmodule  // hb
