<session jtag_chain="ByteBlasterMV [LPT1]" jtag_device="@1: EP2C8 (0x020B20DD)" sof_file="" top_level_entity="Ozy_Janus">
  <display_tree gui_logging_enabled="0">
    <display_branch instance="auto_signaltap_0" log="USE_GLOBAL_TEMP" signal_set="USE_GLOBAL_TEMP" trigger="USE_GLOBAL_TEMP"/>
  </display_tree>
  <instance entity_name="sld_signaltap" is_auto_node="yes" is_expanded="true" name="auto_signaltap_0" source_file="sld_signaltap.vhd">
    <node_ip_info instance_id="0" mfg_id="110" node_id="0" version="6"/>
    <signal_set global_temp="1" is_expanded="true" name="signal_set: 2009/07/30 17:10:38  #0">
      <clock name="TestModeCheck:TMC|clk" polarity="posedge" tap_mode="classic"/>
      <config ram_type="M4K" reserved_data_nodes="0" reserved_storage_qualifier_nodes="0" reserved_trigger_nodes="0" sample_depth="128" trigger_in_enable="no" trigger_out_enable="no"/>
      <top_entity/>
      <signal_vec>
        <trigger_input_vec>
          <wire name="IF_get_samples" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|C23" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|c23_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|data_in[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|ocnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rdreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|rdreq_dly" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rst" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|seq_err" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|sync_state[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_err" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_12_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_34_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_CNT" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_GO" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_IDLE" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|wrreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[9]" tap_mode="classic" type="register"/>
        </trigger_input_vec>
        <data_input_vec>
          <wire name="IF_get_samples" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|C23" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|c23_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|data_in[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|ocnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rdreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|rdreq_dly" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rst" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|seq_err" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|sync_state[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_err" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_12_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_34_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_CNT" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_GO" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_IDLE" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|wrreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[9]" tap_mode="classic" type="register"/>
        </data_input_vec>
        <storage_qualifier_input_vec>
          <wire name="IF_get_samples" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|C23" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|c23_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|c23_cnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|data_in[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_in[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[13]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[14]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[15]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|data_out[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|ocnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|ocnt[9]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rdreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|rdreq_dly" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|rst" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|seq_err" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_in_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|seq_out_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|sync_state[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|sync_state[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_err" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_12_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_34_CHK" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_CNT" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_GO" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|tmc_state.TMC_IDLE" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[0]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[10]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[11]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[12]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[1]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[2]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[3]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[4]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[5]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[6]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[7]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[8]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|used[9]" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|wrreq" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy" tap_mode="classic" type="combinatorial"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[0]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[10]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[11]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[12]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[13]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[14]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[15]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[1]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[2]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[3]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[4]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[5]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[6]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[7]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[8]" tap_mode="classic" type="register"/>
          <wire name="TestModeCheck:TMC|xrdy_cnt[9]" tap_mode="classic" type="register"/>
        </storage_qualifier_input_vec>
      </signal_vec>
      <presentation>
        <data_view>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rst"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|data_in" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[15]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|wrreq"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|seq_in_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[8]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rdreq"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rdreq_dly"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|data_out" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[15]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_err"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|seq_out_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[8]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|ocnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[12]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|sync_state" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[2]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_err"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_IDLE"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_12_CHK"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_34_CHK"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_CNT"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_GO"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|used" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[12]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|C23"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|c23_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[15]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|xrdy_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[15]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy"/>
          <net is_signal_inverted="no" name="IF_get_samples"/>
        </data_view>
        <setup_view>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|data_in" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_in[15]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|data_out" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|data_out[15]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|ocnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|ocnt[12]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rdreq"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rdreq_dly"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|rst"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_err"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|seq_in_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_in_cnt[8]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|seq_out_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|seq_out_cnt[8]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|sync_state" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|sync_state[2]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_err"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_IDLE"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_12_CHK"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_34_CHK"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_CNT"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|tmc_state.TMC_GO"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|used" order="lsb_to_msb" radix="hex" state="collapse" type="combinatorial">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|used[12]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|wrreq"/>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|C23"/>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|c23_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|c23_cnt[15]"/>
          </bus>
          <bus is_signal_inverted="no" link="all" name="TestModeCheck:TMC|xrdy_cnt" order="lsb_to_msb" radix="hex" state="collapse" type="register">
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[0]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[1]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[2]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[3]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[4]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[5]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[6]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[7]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[8]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[9]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[10]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[11]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[12]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[13]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[14]"/>
            <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy_cnt[15]"/>
          </bus>
          <net is_signal_inverted="no" name="TestModeCheck:TMC|xrdy"/>
          <net is_signal_inverted="no" name="IF_get_samples"/>
        </setup_view>
      </presentation>
      <trigger CRC="94F5634A" attribute_mem_mode="false" gap_record="true" global_temp="1" is_expanded="true" name="trigger: 2009/07/30 17:56:40  #0" position="center" power_up_trigger_mode="false" record_data_gap="true" segment_size="1" storage_mode="off" storage_qualifier_disabled="no" storage_qualifier_port_is_pin="false" storage_qualifier_port_name="auto_stp_external_storage_qualifier" storage_qualifier_port_tap_mode="classic" trigger_in="dont_care" trigger_out="active high" trigger_type="circular">
        <power_up_trigger position="pre" storage_qualifier_disabled="no" trigger_in="dont_care" trigger_out="active high"/>
        <events use_custom_flow_control="no">
          <level enabled="yes" name="condition1" type="basic">'TestModeCheck:TMC|C23' == rising edge
            
            <power_up enabled="yes">
            </power_up>
            <op_node/>
          </level>
        </events>
        <storage_qualifier_events>
          <transitional>00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            
            <pwr_up_transitional>00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
            
            </pwr_up_transitional>
          </transitional>
          <storage_qualifier_level type="basic">
            <power_up>
            </power_up>
            <op_node/>
          </storage_qualifier_level>
          <storage_qualifier_level type="basic">
            <power_up>
            </power_up>
            <op_node/>
          </storage_qualifier_level>
          <storage_qualifier_level type="basic">
            <power_up>
            </power_up>
            <op_node/>
          </storage_qualifier_level>
        </storage_qualifier_events>
        <log>
          <data global_temp="1" name="log: 2009/07/30 18:09:11  #0" power_up_mode="false" sample_depth="128" trigger_position="64"></data>
          <extradata>1111111111111111111111111111111111111111111111111111111111111111T111111111111111111111111111111111111111111111111111111111111111</extradata>
        </log>
      </trigger>
    </signal_set>
    <position_info>
      <single attribute="active tab" value="0"/>
      <single attribute="data horizontal scroll position" value="0"/>
      <single attribute="data vertical scroll position" value="4"/>
      <single attribute="setup horizontal scroll position" value="0"/>
      <single attribute="setup vertical scroll position" value="4"/>
      <single attribute="zoom level denominator" value="1"/>
      <single attribute="zoom level numerator" value="1"/>
      <single attribute="zoom offset denominator" value="1"/>
      <single attribute="zoom offset numerator" value="130944"/>
    </position_info>
  </instance>
  <mnemonics/>
  <static_plugin_mnemonics/>
  <global_info>
    <single attribute="active instance" value="0"/>
    <single attribute="lock mode" value="36110"/>
    <multi attribute="column width" size="23" value="34,34,191,74,68,70,88,88,98,98,88,88,110,101,101,101,101,101,101,101,101,107,78"/>
    <multi attribute="window position" size="9" value="1221,799,398,124,0,50,124,0,0"/>
  </global_info>
</session>
